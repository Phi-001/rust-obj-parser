<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="4028"><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="0.0000%" y="245" width="0.0248%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>rust_obj_parser`_dyld_private (1 samples, 0.02%)</title><rect x="0.0248%" y="213" width="0.0248%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2748%" y="223.50"></text></g><g><title>libdyld.dylib`dyld_stub_binder (1 samples, 0.02%)</title><rect x="0.0248%" y="197" width="0.0248%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2748%" y="207.50"></text></g><g><title>libdyld.dylib`_dyld_fast_stub_entry(void*, long) (1 samples, 0.02%)</title><rect x="0.0248%" y="181" width="0.0248%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2748%" y="191.50"></text></g><g><title>dyld`dyld::fastBindLazySymbol (1 samples, 0.02%)</title><rect x="0.0248%" y="165" width="0.0248%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2748%" y="175.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::doBindFastLazySymbol(unsigned int, ImageLoader::LinkContext const&amp;, void (*)(), void (*) (1 samples, 0.02%)</title><rect x="0.0248%" y="149" width="0.0248%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2748%" y="159.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolve (1 samples, 0.02%)</title><rect x="0.0248%" y="133" width="0.0248%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2748%" y="143.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolveTwolevel (1 samples, 0.02%)</title><rect x="0.0248%" y="117" width="0.0248%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2748%" y="127.50"></text></g><g><title>dyld`ImageLoader::findExportedSymbolAddress (1 samples, 0.02%)</title><rect x="0.0248%" y="101" width="0.0248%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2748%" y="111.50"></text></g><g><title>dyld`ImageLoaderMachO::getExportedSymbolAddress (1 samples, 0.02%)</title><rect x="0.0248%" y="85" width="0.0248%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2748%" y="95.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::exportedSymbolAddress (1 samples, 0.02%)</title><rect x="0.0248%" y="69" width="0.0248%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2748%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="0.0745%" y="165" width="0.0248%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="0.3245%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="0.0993%" y="149" width="0.0497%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="2"/><text x="0.3493%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="0.0993%" y="133" width="0.0497%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="2"/><text x="0.3493%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (2 samples, 0.05%)</title><rect x="0.0993%" y="117" width="0.0497%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="2"/><text x="0.3493%" y="127.50"></text></g><g><title>rust_obj_parser`&lt;alloc::string::String as core::clone::Clone&gt;::clone (15 samples, 0.37%)</title><rect x="0.0993%" y="165" width="0.3724%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="15"/><text x="0.3493%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (13 samples, 0.32%)</title><rect x="0.1490%" y="149" width="0.3227%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="13"/><text x="0.3990%" y="159.50"></text></g><g><title>rust_obj_parser`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="0.4717%" y="165" width="0.0248%" height="15" fill="rgb(210,31,41)" fg:x="19" fg:w="1"/><text x="0.7217%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.15%)</title><rect x="0.5958%" y="149" width="0.1490%" height="15" fill="rgb(221,200,47)" fg:x="24" fg:w="6"/><text x="0.8458%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="0.7448%" y="149" width="0.0497%" height="15" fill="rgb(226,26,5)" fg:x="30" fg:w="2"/><text x="0.9948%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="0.7448%" y="133" width="0.0497%" height="15" fill="rgb(249,33,26)" fg:x="30" fg:w="2"/><text x="0.9948%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="0.7448%" y="117" width="0.0497%" height="15" fill="rgb(235,183,28)" fg:x="30" fg:w="2"/><text x="0.9948%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.05%)</title><rect x="0.7448%" y="101" width="0.0497%" height="15" fill="rgb(221,5,38)" fg:x="30" fg:w="2"/><text x="0.9948%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="0.7944%" y="149" width="0.0248%" height="15" fill="rgb(247,18,42)" fg:x="32" fg:w="1"/><text x="1.0444%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size_try_large (1 samples, 0.02%)</title><rect x="0.7944%" y="133" width="0.0248%" height="15" fill="rgb(241,131,45)" fg:x="32" fg:w="1"/><text x="1.0444%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.02%)</title><rect x="0.8193%" y="149" width="0.0248%" height="15" fill="rgb(249,31,29)" fg:x="33" fg:w="1"/><text x="1.0693%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="0.8441%" y="149" width="0.0248%" height="15" fill="rgb(225,111,53)" fg:x="34" fg:w="1"/><text x="1.0941%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="0.8441%" y="133" width="0.0248%" height="15" fill="rgb(238,160,17)" fg:x="34" fg:w="1"/><text x="1.0941%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="0.8441%" y="117" width="0.0248%" height="15" fill="rgb(214,148,48)" fg:x="34" fg:w="1"/><text x="1.0941%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="0.8689%" y="149" width="0.0248%" height="15" fill="rgb(232,36,49)" fg:x="35" fg:w="1"/><text x="1.1189%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (18 samples, 0.45%)</title><rect x="0.8937%" y="149" width="0.4469%" height="15" fill="rgb(209,103,24)" fg:x="36" fg:w="18"/><text x="1.1437%" y="159.50"></text></g><g><title>rust_obj_parser`&lt;alloc::string::String as core::clone::Clone&gt;::clone (14 samples, 0.35%)</title><rect x="1.3406%" y="149" width="0.3476%" height="15" fill="rgb(229,88,8)" fg:x="54" fg:w="14"/><text x="1.5906%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (14 samples, 0.35%)</title><rect x="1.3406%" y="133" width="0.3476%" height="15" fill="rgb(213,181,19)" fg:x="54" fg:w="14"/><text x="1.5906%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1.7627%" y="133" width="0.0248%" height="15" fill="rgb(254,191,54)" fg:x="71" fg:w="1"/><text x="2.0127%" y="143.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="1.7875%" y="133" width="0.0248%" height="15" fill="rgb(241,83,37)" fg:x="72" fg:w="1"/><text x="2.0375%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="1.8371%" y="101" width="0.0248%" height="15" fill="rgb(233,36,39)" fg:x="74" fg:w="1"/><text x="2.0871%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="1.8371%" y="85" width="0.0248%" height="15" fill="rgb(226,3,54)" fg:x="74" fg:w="1"/><text x="2.0871%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.05%)</title><rect x="1.8620%" y="101" width="0.0497%" height="15" fill="rgb(245,192,40)" fg:x="75" fg:w="2"/><text x="2.1120%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="1.8868%" y="85" width="0.0248%" height="15" fill="rgb(238,167,29)" fg:x="76" fg:w="1"/><text x="2.1368%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="1.8868%" y="69" width="0.0248%" height="15" fill="rgb(232,182,51)" fg:x="76" fg:w="1"/><text x="2.1368%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (25 samples, 0.62%)</title><rect x="1.9861%" y="85" width="0.6207%" height="15" fill="rgb(231,60,39)" fg:x="80" fg:w="25"/><text x="2.2361%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="2.6316%" y="69" width="0.0248%" height="15" fill="rgb(208,69,12)" fg:x="106" fg:w="1"/><text x="2.8816%" y="79.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::WaitToken::wait (34 samples, 0.84%)</title><rect x="1.8371%" y="117" width="0.8441%" height="15" fill="rgb(235,93,37)" fg:x="74" fg:w="34"/><text x="2.0871%" y="127.50"></text></g><g><title>rust_obj_parser`std::thread::park (31 samples, 0.77%)</title><rect x="1.9116%" y="101" width="0.7696%" height="15" fill="rgb(213,116,39)" fg:x="77" fg:w="31"/><text x="2.1616%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (3 samples, 0.07%)</title><rect x="2.6068%" y="85" width="0.0745%" height="15" fill="rgb(222,207,29)" fg:x="105" fg:w="3"/><text x="2.8568%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (1 samples, 0.02%)</title><rect x="2.6564%" y="69" width="0.0248%" height="15" fill="rgb(206,96,30)" fg:x="107" fg:w="1"/><text x="2.9064%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="2.6812%" y="101" width="0.0248%" height="15" fill="rgb(218,138,4)" fg:x="108" fg:w="1"/><text x="2.9312%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="2.7805%" y="85" width="0.0248%" height="15" fill="rgb(250,191,14)" fg:x="112" fg:w="1"/><text x="3.0305%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="2.7805%" y="69" width="0.0248%" height="15" fill="rgb(239,60,40)" fg:x="112" fg:w="1"/><text x="3.0305%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="2.7805%" y="53" width="0.0248%" height="15" fill="rgb(206,27,48)" fg:x="112" fg:w="1"/><text x="3.0305%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.05%)</title><rect x="2.8054%" y="85" width="0.0497%" height="15" fill="rgb(225,35,8)" fg:x="113" fg:w="2"/><text x="3.0554%" y="95.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 1.37%)</title><rect x="1.6882%" y="149" width="1.3654%" height="15" fill="rgb(250,213,24)" fg:x="68" fg:w="55"/><text x="1.9382%" y="159.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::recv (50 samples, 1.24%)</title><rect x="1.8123%" y="133" width="1.2413%" height="15" fill="rgb(247,123,22)" fg:x="73" fg:w="50"/><text x="2.0623%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::try_recv (15 samples, 0.37%)</title><rect x="2.6812%" y="117" width="0.3724%" height="15" fill="rgb(231,138,38)" fg:x="108" fg:w="15"/><text x="2.9312%" y="127.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::pop (14 samples, 0.35%)</title><rect x="2.7061%" y="101" width="0.3476%" height="15" fill="rgb(231,145,46)" fg:x="109" fg:w="14"/><text x="2.9561%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.20%)</title><rect x="2.8550%" y="85" width="0.1986%" height="15" fill="rgb(251,118,11)" fg:x="115" fg:w="8"/><text x="3.1050%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="3.0536%" y="133" width="0.0248%" height="15" fill="rgb(217,147,25)" fg:x="123" fg:w="1"/><text x="3.3036%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="3.0536%" y="117" width="0.0248%" height="15" fill="rgb(247,81,37)" fg:x="123" fg:w="1"/><text x="3.3036%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="3.0536%" y="101" width="0.0248%" height="15" fill="rgb(209,12,38)" fg:x="123" fg:w="1"/><text x="3.3036%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="3.0536%" y="85" width="0.0248%" height="15" fill="rgb(227,1,9)" fg:x="123" fg:w="1"/><text x="3.3036%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="3.0785%" y="133" width="0.0248%" height="15" fill="rgb(248,47,43)" fg:x="124" fg:w="1"/><text x="3.3285%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="3.1033%" y="133" width="0.0248%" height="15" fill="rgb(221,10,30)" fg:x="125" fg:w="1"/><text x="3.3533%" y="143.50"></text></g><g><title>rust_obj_parser`std::sys_common::mutex::MovableMutex::new (1 samples, 0.02%)</title><rect x="3.1033%" y="117" width="0.0248%" height="15" fill="rgb(210,229,1)" fg:x="125" fg:w="1"/><text x="3.3533%" y="127.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.10%)</title><rect x="3.0536%" y="149" width="0.0993%" height="15" fill="rgb(222,148,37)" fg:x="123" fg:w="4"/><text x="3.3036%" y="159.50"></text></g><g><title>rust_obj_parser`std::sync::poison::Flag::new (1 samples, 0.02%)</title><rect x="3.1281%" y="133" width="0.0248%" height="15" fill="rgb(234,67,33)" fg:x="126" fg:w="1"/><text x="3.3781%" y="143.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.05%)</title><rect x="3.1529%" y="149" width="0.0497%" height="15" fill="rgb(247,98,35)" fg:x="127" fg:w="2"/><text x="3.4029%" y="159.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="3.1529%" y="133" width="0.0497%" height="15" fill="rgb(247,138,52)" fg:x="127" fg:w="2"/><text x="3.4029%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="3.1778%" y="117" width="0.0248%" height="15" fill="rgb(213,79,30)" fg:x="128" fg:w="1"/><text x="3.4278%" y="127.50"></text></g><g><title>rust_obj_parser`alloc::slice::merge_sort (1 samples, 0.02%)</title><rect x="3.2026%" y="149" width="0.0248%" height="15" fill="rgb(246,177,23)" fg:x="129" fg:w="1"/><text x="3.4526%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="3.2274%" y="133" width="0.0248%" height="15" fill="rgb(230,62,27)" fg:x="130" fg:w="1"/><text x="3.4774%" y="143.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.05%)</title><rect x="3.2274%" y="149" width="0.0497%" height="15" fill="rgb(216,154,8)" fg:x="130" fg:w="2"/><text x="3.4774%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.02%)</title><rect x="3.2522%" y="133" width="0.0248%" height="15" fill="rgb(244,35,45)" fg:x="131" fg:w="1"/><text x="3.5022%" y="143.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="3.2771%" y="117" width="0.0248%" height="15" fill="rgb(251,115,12)" fg:x="132" fg:w="1"/><text x="3.5271%" y="127.50"></text></g><g><title>rust_obj_parser`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="3.2771%" y="133" width="0.0497%" height="15" fill="rgb(240,54,50)" fg:x="132" fg:w="2"/><text x="3.5271%" y="143.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="3.3019%" y="117" width="0.0248%" height="15" fill="rgb(233,84,52)" fg:x="133" fg:w="1"/><text x="3.5519%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="3.3019%" y="101" width="0.0248%" height="15" fill="rgb(207,117,47)" fg:x="133" fg:w="1"/><text x="3.5519%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="3.3019%" y="85" width="0.0248%" height="15" fill="rgb(249,43,39)" fg:x="133" fg:w="1"/><text x="3.5519%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="3.3019%" y="69" width="0.0248%" height="15" fill="rgb(209,38,44)" fg:x="133" fg:w="1"/><text x="3.5519%" y="79.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::Sender&lt;T&gt;::send (11 samples, 0.27%)</title><rect x="3.3267%" y="117" width="0.2731%" height="15" fill="rgb(236,212,23)" fg:x="134" fg:w="11"/><text x="3.5767%" y="127.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::stream::Packet&lt;T&gt;::send (11 samples, 0.27%)</title><rect x="3.3267%" y="101" width="0.2731%" height="15" fill="rgb(242,79,21)" fg:x="134" fg:w="11"/><text x="3.5767%" y="111.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::SignalToken::signal (11 samples, 0.27%)</title><rect x="3.3267%" y="85" width="0.2731%" height="15" fill="rgb(211,96,35)" fg:x="134" fg:w="11"/><text x="3.5767%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (11 samples, 0.27%)</title><rect x="3.3267%" y="69" width="0.2731%" height="15" fill="rgb(253,215,40)" fg:x="134" fg:w="11"/><text x="3.5767%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="3.6246%" y="101" width="0.0248%" height="15" fill="rgb(211,81,21)" fg:x="146" fg:w="1"/><text x="3.8746%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="3.6495%" y="101" width="0.0248%" height="15" fill="rgb(208,190,38)" fg:x="147" fg:w="1"/><text x="3.8995%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_join (1 samples, 0.02%)</title><rect x="3.6743%" y="101" width="0.0248%" height="15" fill="rgb(235,213,38)" fg:x="148" fg:w="1"/><text x="3.9243%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (1 samples, 0.02%)</title><rect x="3.6991%" y="101" width="0.0248%" height="15" fill="rgb(237,122,38)" fg:x="149" fg:w="1"/><text x="3.9491%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="3.7239%" y="85" width="0.0248%" height="15" fill="rgb(244,218,35)" fg:x="150" fg:w="1"/><text x="3.9739%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="3.7239%" y="69" width="0.0248%" height="15" fill="rgb(240,68,47)" fg:x="150" fg:w="1"/><text x="3.9739%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="3.7239%" y="53" width="0.0248%" height="15" fill="rgb(210,16,53)" fg:x="150" fg:w="1"/><text x="3.9739%" y="63.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.05%)</title><rect x="3.7239%" y="101" width="0.0497%" height="15" fill="rgb(235,124,12)" fg:x="150" fg:w="2"/><text x="3.9739%" y="111.50"></text></g><g><title>rust_obj_parser`__rdl_dealloc (1 samples, 0.02%)</title><rect x="3.7488%" y="85" width="0.0248%" height="15" fill="rgb(224,169,11)" fg:x="151" fg:w="1"/><text x="3.9988%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (9 samples, 0.22%)</title><rect x="3.7736%" y="85" width="0.2234%" height="15" fill="rgb(250,166,2)" fg:x="152" fg:w="9"/><text x="4.0236%" y="95.50"></text></g><g><title>rust_obj_parser`core::ptr::drop_in_place&lt;rust_obj_parser::parser::ThreadPool&gt; (76 samples, 1.89%)</title><rect x="3.2771%" y="149" width="1.8868%" height="15" fill="rgb(242,216,29)" fg:x="132" fg:w="76"/><text x="3.5271%" y="159.50">r..</text></g><g><title>rust_obj_parser`&lt;rust_obj_parser::parser::ThreadPool as core::ops::drop::Drop&gt;::drop (74 samples, 1.84%)</title><rect x="3.3267%" y="133" width="1.8371%" height="15" fill="rgb(230,116,27)" fg:x="134" fg:w="74"/><text x="3.5767%" y="143.50">r..</text></g><g><title>rust_obj_parser`std::thread::JoinHandle&lt;T&gt;::join (63 samples, 1.56%)</title><rect x="3.5998%" y="117" width="1.5641%" height="15" fill="rgb(228,99,48)" fg:x="145" fg:w="63"/><text x="3.8498%" y="127.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::join (56 samples, 1.39%)</title><rect x="3.7736%" y="101" width="1.3903%" height="15" fill="rgb(253,11,6)" fg:x="152" fg:w="56"/><text x="4.0236%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_join (47 samples, 1.17%)</title><rect x="3.9970%" y="85" width="1.1668%" height="15" fill="rgb(247,143,39)" fg:x="161" fg:w="47"/><text x="4.2470%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_deallocate (42 samples, 1.04%)</title><rect x="4.1212%" y="69" width="1.0427%" height="15" fill="rgb(236,97,10)" fg:x="166" fg:w="42"/><text x="4.3712%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (41 samples, 1.02%)</title><rect x="4.1460%" y="53" width="1.0179%" height="15" fill="rgb(233,208,19)" fg:x="167" fg:w="41"/><text x="4.3960%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.05%)</title><rect x="5.1639%" y="133" width="0.0497%" height="15" fill="rgb(216,164,2)" fg:x="208" fg:w="2"/><text x="5.4139%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="5.1887%" y="117" width="0.0248%" height="15" fill="rgb(220,129,5)" fg:x="209" fg:w="1"/><text x="5.4387%" y="127.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::ObjectInfo::extend (3 samples, 0.07%)</title><rect x="5.1639%" y="149" width="0.0745%" height="15" fill="rgb(242,17,10)" fg:x="208" fg:w="3"/><text x="5.4139%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="5.2135%" y="133" width="0.0248%" height="15" fill="rgb(242,107,0)" fg:x="210" fg:w="1"/><text x="5.4635%" y="143.50"></text></g><g><title>rust_obj_parser`__rdl_alloc (1 samples, 0.02%)</title><rect x="5.2632%" y="133" width="0.0248%" height="15" fill="rgb(251,28,31)" fg:x="212" fg:w="1"/><text x="5.5132%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (1 samples, 0.02%)</title><rect x="5.2632%" y="117" width="0.0248%" height="15" fill="rgb(233,223,10)" fg:x="212" fg:w="1"/><text x="5.5132%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (1 samples, 0.02%)</title><rect x="5.2632%" y="101" width="0.0248%" height="15" fill="rgb(215,21,27)" fg:x="212" fg:w="1"/><text x="5.5132%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (1 samples, 0.02%)</title><rect x="5.2632%" y="85" width="0.0248%" height="15" fill="rgb(232,23,21)" fg:x="212" fg:w="1"/><text x="5.5132%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="5.2632%" y="69" width="0.0248%" height="15" fill="rgb(244,5,23)" fg:x="212" fg:w="1"/><text x="5.5132%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="5.2632%" y="53" width="0.0248%" height="15" fill="rgb(226,81,46)" fg:x="212" fg:w="1"/><text x="5.5132%" y="63.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::SignalToken::signal (12 samples, 0.30%)</title><rect x="5.2880%" y="133" width="0.2979%" height="15" fill="rgb(247,70,30)" fg:x="213" fg:w="12"/><text x="5.5380%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (11 samples, 0.27%)</title><rect x="5.3128%" y="117" width="0.2731%" height="15" fill="rgb(212,68,19)" fg:x="214" fg:w="11"/><text x="5.5628%" y="127.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::Sender&lt;T&gt;::send (25 samples, 0.62%)</title><rect x="5.2383%" y="149" width="0.6207%" height="15" fill="rgb(240,187,13)" fg:x="211" fg:w="25"/><text x="5.4883%" y="159.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::oneshot::Packet&lt;T&gt;::send (11 samples, 0.27%)</title><rect x="5.5859%" y="133" width="0.2731%" height="15" fill="rgb(223,113,26)" fg:x="225" fg:w="11"/><text x="5.8359%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::SignalToken::signal (11 samples, 0.27%)</title><rect x="5.5859%" y="117" width="0.2731%" height="15" fill="rgb(206,192,2)" fg:x="225" fg:w="11"/><text x="5.8359%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (10 samples, 0.25%)</title><rect x="5.6107%" y="101" width="0.2483%" height="15" fill="rgb(241,108,4)" fg:x="226" fg:w="10"/><text x="5.8607%" y="111.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::oneshot::Packet&lt;T&gt;::recv (1 samples, 0.02%)</title><rect x="5.8590%" y="149" width="0.0248%" height="15" fill="rgb(247,173,49)" fg:x="236" fg:w="1"/><text x="6.1090%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="5.8838%" y="133" width="0.0248%" height="15" fill="rgb(224,114,35)" fg:x="237" fg:w="1"/><text x="6.1338%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (20 samples, 0.50%)</title><rect x="5.9086%" y="117" width="0.4965%" height="15" fill="rgb(245,159,27)" fg:x="238" fg:w="20"/><text x="6.1586%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (4 samples, 0.10%)</title><rect x="6.6534%" y="101" width="0.0993%" height="15" fill="rgb(245,172,44)" fg:x="268" fg:w="4"/><text x="6.9034%" y="111.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::new (38 samples, 0.94%)</title><rect x="5.9086%" y="133" width="0.9434%" height="15" fill="rgb(236,23,11)" fg:x="238" fg:w="38"/><text x="6.1586%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_create (18 samples, 0.45%)</title><rect x="6.4052%" y="117" width="0.4469%" height="15" fill="rgb(205,117,38)" fg:x="258" fg:w="18"/><text x="6.6552%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_protect_trap (4 samples, 0.10%)</title><rect x="6.7527%" y="101" width="0.0993%" height="15" fill="rgb(237,72,25)" fg:x="272" fg:w="4"/><text x="7.0027%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="6.8769%" y="69" width="0.0248%" height="15" fill="rgb(244,70,9)" fg:x="277" fg:w="1"/><text x="7.1269%" y="79.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::parse_obj_threaded (259 samples, 6.43%)</title><rect x="0.4965%" y="165" width="6.4300%" height="15" fill="rgb(217,125,39)" fg:x="20" fg:w="259"/><text x="0.7465%" y="175.50">rust_obj..</text></g><g><title>rust_obj_parser`std::thread::spawn (42 samples, 1.04%)</title><rect x="5.8838%" y="149" width="1.0427%" height="15" fill="rgb(235,36,10)" fg:x="237" fg:w="42"/><text x="6.1338%" y="159.50"></text></g><g><title>rust_obj_parser`std::thread::Thread::new (3 samples, 0.07%)</title><rect x="6.8520%" y="133" width="0.0745%" height="15" fill="rgb(251,123,47)" fg:x="276" fg:w="3"/><text x="7.1020%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="6.8520%" y="117" width="0.0745%" height="15" fill="rgb(221,13,13)" fg:x="276" fg:w="3"/><text x="7.1020%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.07%)</title><rect x="6.8520%" y="101" width="0.0745%" height="15" fill="rgb(238,131,9)" fg:x="276" fg:w="3"/><text x="7.1020%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.07%)</title><rect x="6.8520%" y="85" width="0.0745%" height="15" fill="rgb(211,50,8)" fg:x="276" fg:w="3"/><text x="7.1020%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="6.9017%" y="69" width="0.0248%" height="15" fill="rgb(245,182,24)" fg:x="278" fg:w="1"/><text x="7.1517%" y="79.50"></text></g><g><title>0x1 (280 samples, 6.95%)</title><rect x="0.0000%" y="277" width="6.9513%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="280"/><text x="0.2500%" y="287.50">0x1</text></g><g><title>libdyld.dylib`start (280 samples, 6.95%)</title><rect x="0.0000%" y="261" width="6.9513%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="280"/><text x="0.2500%" y="271.50">libdyld.d..</text></g><g><title>rust_obj_parser`main (279 samples, 6.93%)</title><rect x="0.0248%" y="245" width="6.9265%" height="15" fill="rgb(213,55,15)" fg:x="1" fg:w="279"/><text x="0.2748%" y="255.50">rust_obj_..</text></g><g><title>rust_obj_parser`std::rt::lang_start_internal (279 samples, 6.93%)</title><rect x="0.0248%" y="229" width="6.9265%" height="15" fill="rgb(209,9,3)" fg:x="1" fg:w="279"/><text x="0.2748%" y="239.50">rust_obj_..</text></g><g><title>rust_obj_parser`std::rt::lang_start::_{{closure}} (278 samples, 6.90%)</title><rect x="0.0497%" y="213" width="6.9017%" height="15" fill="rgb(230,59,30)" fg:x="2" fg:w="278"/><text x="0.2997%" y="223.50">rust_obj_..</text></g><g><title>rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace (278 samples, 6.90%)</title><rect x="0.0497%" y="197" width="6.9017%" height="15" fill="rgb(209,121,21)" fg:x="2" fg:w="278"/><text x="0.2997%" y="207.50">rust_obj_..</text></g><g><title>rust_obj_parser`rust_obj_parser::main (278 samples, 6.90%)</title><rect x="0.0497%" y="181" width="6.9017%" height="15" fill="rgb(220,109,13)" fg:x="2" fg:w="278"/><text x="0.2997%" y="191.50">rust_obj_..</text></g><g><title>rust_obj_parser`std::fs::read_to_string::inner (1 samples, 0.02%)</title><rect x="6.9265%" y="165" width="0.0248%" height="15" fill="rgb(232,18,1)" fg:x="279" fg:w="1"/><text x="7.1765%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.02%)</title><rect x="6.9265%" y="149" width="0.0248%" height="15" fill="rgb(215,41,42)" fg:x="279" fg:w="1"/><text x="7.1765%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (44 samples, 1.09%)</title><rect x="6.9513%" y="277" width="1.0924%" height="15" fill="rgb(224,123,36)" fg:x="280" fg:w="44"/><text x="7.2013%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__thread_selfid (3 samples, 0.07%)</title><rect x="8.8133%" y="261" width="0.0745%" height="15" fill="rgb(240,125,3)" fg:x="355" fg:w="3"/><text x="9.0633%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (1 samples, 0.02%)</title><rect x="8.8878%" y="261" width="0.0248%" height="15" fill="rgb(205,98,50)" fg:x="358" fg:w="1"/><text x="9.1378%" y="271.50"></text></g><g><title>libsystem_c.dylib`sysconf (1 samples, 0.02%)</title><rect x="8.9126%" y="245" width="0.0248%" height="15" fill="rgb(205,185,37)" fg:x="359" fg:w="1"/><text x="9.1626%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__disable_threadsignal (4 samples, 0.10%)</title><rect x="8.9374%" y="245" width="0.0993%" height="15" fill="rgb(238,207,15)" fg:x="360" fg:w="4"/><text x="9.1874%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (24 samples, 0.60%)</title><rect x="9.0367%" y="245" width="0.5958%" height="15" fill="rgb(213,199,42)" fg:x="364" fg:w="24"/><text x="9.2867%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__sigaltstack (6 samples, 0.15%)</title><rect x="9.6326%" y="245" width="0.1490%" height="15" fill="rgb(235,201,11)" fg:x="388" fg:w="6"/><text x="9.8826%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.07%)</title><rect x="9.9057%" y="181" width="0.0745%" height="15" fill="rgb(207,46,11)" fg:x="399" fg:w="3"/><text x="10.1557%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="9.9553%" y="165" width="0.0248%" height="15" fill="rgb(241,35,35)" fg:x="401" fg:w="1"/><text x="10.2053%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="9.9553%" y="149" width="0.0248%" height="15" fill="rgb(243,32,47)" fg:x="401" fg:w="1"/><text x="10.2053%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_finalize_list (5 samples, 0.12%)</title><rect x="9.8808%" y="213" width="0.1241%" height="15" fill="rgb(247,202,23)" fg:x="398" fg:w="5"/><text x="10.1308%" y="223.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread_local_dtor::register_dtor::run_dtors (5 samples, 0.12%)</title><rect x="9.8808%" y="197" width="0.1241%" height="15" fill="rgb(219,102,11)" fg:x="398" fg:w="5"/><text x="10.1308%" y="207.50"></text></g><g><title>rust_obj_parser`std::thread::local::fast::destroy_value (1 samples, 0.02%)</title><rect x="9.9801%" y="181" width="0.0248%" height="15" fill="rgb(243,110,44)" fg:x="402" fg:w="1"/><text x="10.2301%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (10 samples, 0.25%)</title><rect x="9.7815%" y="245" width="0.2483%" height="15" fill="rgb(222,74,54)" fg:x="394" fg:w="10"/><text x="10.0315%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (10 samples, 0.25%)</title><rect x="9.7815%" y="229" width="0.2483%" height="15" fill="rgb(216,99,12)" fg:x="394" fg:w="10"/><text x="10.0315%" y="239.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread_local_dtor::register_dtor::run_dtors (1 samples, 0.02%)</title><rect x="10.0050%" y="213" width="0.0248%" height="15" fill="rgb(226,22,26)" fg:x="403" fg:w="1"/><text x="10.2550%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_setcancelstate_exit (1 samples, 0.02%)</title><rect x="10.0298%" y="245" width="0.0248%" height="15" fill="rgb(217,163,10)" fg:x="404" fg:w="1"/><text x="10.2798%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (30 samples, 0.74%)</title><rect x="10.0546%" y="213" width="0.7448%" height="15" fill="rgb(213,25,53)" fg:x="405" fg:w="30"/><text x="10.3046%" y="223.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (1 samples, 0.02%)</title><rect x="10.7994%" y="213" width="0.0248%" height="15" fill="rgb(252,105,26)" fg:x="435" fg:w="1"/><text x="11.0494%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_join$NOCANCEL (34 samples, 0.84%)</title><rect x="10.0546%" y="245" width="0.8441%" height="15" fill="rgb(220,39,43)" fg:x="405" fg:w="34"/><text x="10.3046%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (34 samples, 0.84%)</title><rect x="10.0546%" y="229" width="0.8441%" height="15" fill="rgb(229,68,48)" fg:x="405" fg:w="34"/><text x="10.3046%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (3 samples, 0.07%)</title><rect x="10.8242%" y="213" width="0.0745%" height="15" fill="rgb(252,8,32)" fg:x="436" fg:w="3"/><text x="11.0742%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (3 samples, 0.07%)</title><rect x="10.8242%" y="197" width="0.0745%" height="15" fill="rgb(223,20,43)" fg:x="436" fg:w="3"/><text x="11.0742%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (5 samples, 0.12%)</title><rect x="10.9235%" y="229" width="0.1241%" height="15" fill="rgb(229,81,49)" fg:x="440" fg:w="5"/><text x="11.1735%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__sigaltstack (8 samples, 0.20%)</title><rect x="11.0477%" y="229" width="0.1986%" height="15" fill="rgb(236,28,36)" fg:x="445" fg:w="8"/><text x="11.2977%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="11.2463%" y="213" width="0.0248%" height="15" fill="rgb(249,185,26)" fg:x="453" fg:w="1"/><text x="11.4963%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_self (1 samples, 0.02%)</title><rect x="11.2711%" y="213" width="0.0248%" height="15" fill="rgb(249,174,33)" fg:x="454" fg:w="1"/><text x="11.5211%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_get_stackaddr_np (1 samples, 0.02%)</title><rect x="11.2959%" y="197" width="0.0248%" height="15" fill="rgb(233,201,37)" fg:x="455" fg:w="1"/><text x="11.5459%" y="207.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread::guard::current (2 samples, 0.05%)</title><rect x="11.2959%" y="213" width="0.0497%" height="15" fill="rgb(221,78,26)" fg:x="455" fg:w="2"/><text x="11.5459%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_get_stacksize_np (1 samples, 0.02%)</title><rect x="11.3208%" y="197" width="0.0248%" height="15" fill="rgb(250,127,30)" fg:x="456" fg:w="1"/><text x="11.5708%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="11.3456%" y="197" width="0.0497%" height="15" fill="rgb(230,49,44)" fg:x="457" fg:w="2"/><text x="11.5956%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="11.3704%" y="181" width="0.0248%" height="15" fill="rgb(229,67,23)" fg:x="458" fg:w="1"/><text x="11.6204%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="11.3704%" y="165" width="0.0248%" height="15" fill="rgb(249,83,47)" fg:x="458" fg:w="1"/><text x="11.6204%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="11.3952%" y="197" width="0.0248%" height="15" fill="rgb(215,43,3)" fg:x="459" fg:w="1"/><text x="11.6452%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="11.3952%" y="181" width="0.0248%" height="15" fill="rgb(238,154,13)" fg:x="459" fg:w="1"/><text x="11.6452%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="11.6435%" y="181" width="0.0248%" height="15" fill="rgb(219,56,2)" fg:x="469" fg:w="1"/><text x="11.8935%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="11.6435%" y="165" width="0.0248%" height="15" fill="rgb(233,0,4)" fg:x="469" fg:w="1"/><text x="11.8935%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="11.6435%" y="149" width="0.0248%" height="15" fill="rgb(235,30,7)" fg:x="469" fg:w="1"/><text x="11.8935%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="11.6683%" y="181" width="0.0248%" height="15" fill="rgb(250,79,13)" fg:x="470" fg:w="1"/><text x="11.9183%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="11.6683%" y="165" width="0.0248%" height="15" fill="rgb(211,146,34)" fg:x="470" fg:w="1"/><text x="11.9183%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="11.6683%" y="149" width="0.0248%" height="15" fill="rgb(228,22,38)" fg:x="470" fg:w="1"/><text x="11.9183%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="11.8918%" y="149" width="0.0497%" height="15" fill="rgb(235,168,5)" fg:x="479" fg:w="2"/><text x="12.1418%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.05%)</title><rect x="11.8918%" y="133" width="0.0497%" height="15" fill="rgb(221,155,16)" fg:x="479" fg:w="2"/><text x="12.1418%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.05%)</title><rect x="11.8918%" y="117" width="0.0497%" height="15" fill="rgb(215,215,53)" fg:x="479" fg:w="2"/><text x="12.1418%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.07%)</title><rect x="11.9414%" y="149" width="0.0745%" height="15" fill="rgb(223,4,10)" fg:x="481" fg:w="3"/><text x="12.1914%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="12.0159%" y="149" width="0.0248%" height="15" fill="rgb(234,103,6)" fg:x="484" fg:w="1"/><text x="12.2659%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (37 samples, 0.92%)</title><rect x="12.0904%" y="133" width="0.9186%" height="15" fill="rgb(227,97,0)" fg:x="487" fg:w="37"/><text x="12.3404%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_check_init_slow (1 samples, 0.02%)</title><rect x="13.0089%" y="117" width="0.0248%" height="15" fill="rgb(234,150,53)" fg:x="524" fg:w="1"/><text x="13.2589%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="13.0338%" y="117" width="0.0248%" height="15" fill="rgb(228,201,54)" fg:x="525" fg:w="1"/><text x="13.2838%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (4 samples, 0.10%)</title><rect x="13.0089%" y="133" width="0.0993%" height="15" fill="rgb(222,22,37)" fg:x="524" fg:w="4"/><text x="13.2589%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (2 samples, 0.05%)</title><rect x="13.0586%" y="117" width="0.0497%" height="15" fill="rgb(237,53,32)" fg:x="526" fg:w="2"/><text x="13.3086%" y="127.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::WaitToken::wait (52 samples, 1.29%)</title><rect x="11.8421%" y="165" width="1.2910%" height="15" fill="rgb(233,25,53)" fg:x="477" fg:w="52"/><text x="12.0921%" y="175.50"></text></g><g><title>rust_obj_parser`std::thread::park (44 samples, 1.09%)</title><rect x="12.0407%" y="149" width="1.0924%" height="15" fill="rgb(210,40,34)" fg:x="485" fg:w="44"/><text x="12.2907%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="13.1082%" y="133" width="0.0248%" height="15" fill="rgb(241,220,44)" fg:x="528" fg:w="1"/><text x="13.3582%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::oneshot::Packet&lt;T&gt;::recv (59 samples, 1.46%)</title><rect x="11.6931%" y="181" width="1.4647%" height="15" fill="rgb(235,28,35)" fg:x="471" fg:w="59"/><text x="11.9431%" y="191.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::tokens (1 samples, 0.02%)</title><rect x="13.1331%" y="165" width="0.0248%" height="15" fill="rgb(210,56,17)" fg:x="529" fg:w="1"/><text x="13.3831%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="13.1331%" y="149" width="0.0248%" height="15" fill="rgb(224,130,29)" fg:x="529" fg:w="1"/><text x="13.3831%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="13.1331%" y="133" width="0.0248%" height="15" fill="rgb(235,212,8)" fg:x="529" fg:w="1"/><text x="13.3831%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="13.1331%" y="117" width="0.0248%" height="15" fill="rgb(223,33,50)" fg:x="529" fg:w="1"/><text x="13.3831%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="13.1579%" y="165" width="0.0248%" height="15" fill="rgb(219,149,13)" fg:x="530" fg:w="1"/><text x="13.4079%" y="175.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="13.1827%" y="149" width="0.0248%" height="15" fill="rgb(250,156,29)" fg:x="531" fg:w="1"/><text x="13.4327%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (8 samples, 0.20%)</title><rect x="13.2324%" y="133" width="0.1986%" height="15" fill="rgb(216,193,19)" fg:x="533" fg:w="8"/><text x="13.4824%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::WaitToken::wait (11 samples, 0.27%)</title><rect x="13.1827%" y="165" width="0.2731%" height="15" fill="rgb(216,135,14)" fg:x="531" fg:w="11"/><text x="13.4327%" y="175.50"></text></g><g><title>rust_obj_parser`std::thread::park (10 samples, 0.25%)</title><rect x="13.2075%" y="149" width="0.2483%" height="15" fill="rgb(241,47,5)" fg:x="532" fg:w="10"/><text x="13.4575%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="13.4310%" y="133" width="0.0248%" height="15" fill="rgb(233,42,35)" fg:x="541" fg:w="1"/><text x="13.6810%" y="143.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 2.06%)</title><rect x="11.4201%" y="197" width="2.0606%" height="15" fill="rgb(231,13,6)" fg:x="460" fg:w="83"/><text x="11.6701%" y="207.50">r..</text></g><g><title>rust_obj_parser`std::sync::mpsc::stream::Packet&lt;T&gt;::recv (13 samples, 0.32%)</title><rect x="13.1579%" y="181" width="0.3227%" height="15" fill="rgb(207,181,40)" fg:x="530" fg:w="13"/><text x="13.4079%" y="191.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::stream::Packet&lt;T&gt;::try_recv (1 samples, 0.02%)</title><rect x="13.4558%" y="165" width="0.0248%" height="15" fill="rgb(254,173,49)" fg:x="542" fg:w="1"/><text x="13.7058%" y="175.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::dec2flt (5 samples, 0.12%)</title><rect x="13.4806%" y="197" width="0.1241%" height="15" fill="rgb(221,1,38)" fg:x="543" fg:w="5"/><text x="13.7306%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.30%)</title><rect x="24.5035%" y="181" width="0.2979%" height="15" fill="rgb(206,124,46)" fg:x="987" fg:w="12"/><text x="24.7535%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="24.8014%" y="165" width="0.0248%" height="15" fill="rgb(249,21,11)" fg:x="999" fg:w="1"/><text x="25.0514%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="24.8014%" y="181" width="0.0497%" height="15" fill="rgb(222,201,40)" fg:x="999" fg:w="2"/><text x="25.0514%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size_try_large (1 samples, 0.02%)</title><rect x="24.8262%" y="165" width="0.0248%" height="15" fill="rgb(235,61,29)" fg:x="1000" fg:w="1"/><text x="25.0762%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.02%)</title><rect x="24.8262%" y="149" width="0.0248%" height="15" fill="rgb(219,207,3)" fg:x="1000" fg:w="1"/><text x="25.0762%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (2 samples, 0.05%)</title><rect x="24.8759%" y="165" width="0.0497%" height="15" fill="rgb(222,56,46)" fg:x="1002" fg:w="2"/><text x="25.1259%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`large_entry_free_no_lock (1 samples, 0.02%)</title><rect x="24.9255%" y="165" width="0.0248%" height="15" fill="rgb(239,76,54)" fg:x="1004" fg:w="1"/><text x="25.1755%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (5 samples, 0.12%)</title><rect x="24.8510%" y="181" width="0.1241%" height="15" fill="rgb(231,124,27)" fg:x="1001" fg:w="5"/><text x="25.1010%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (1 samples, 0.02%)</title><rect x="24.9503%" y="165" width="0.0248%" height="15" fill="rgb(249,195,6)" fg:x="1005" fg:w="1"/><text x="25.2003%" y="175.50"></text></g><g><title>rust_obj_parser`&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 1.22%)</title><rect x="24.9752%" y="181" width="1.2165%" height="15" fill="rgb(237,174,47)" fg:x="1006" fg:w="49"/><text x="25.2252%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.87%)</title><rect x="26.1917%" y="181" width="0.8689%" height="15" fill="rgb(206,201,31)" fg:x="1055" fg:w="35"/><text x="26.4417%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (11 samples, 0.27%)</title><rect x="27.0606%" y="181" width="0.2731%" height="15" fill="rgb(231,57,52)" fg:x="1090" fg:w="11"/><text x="27.3106%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::short_fast_pow10 (8 samples, 0.20%)</title><rect x="27.3337%" y="181" width="0.1986%" height="15" fill="rgb(248,177,22)" fg:x="1101" fg:w="8"/><text x="27.5837%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (1 samples, 0.02%)</title><rect x="27.6564%" y="117" width="0.0248%" height="15" fill="rgb(215,211,37)" fg:x="1114" fg:w="1"/><text x="27.9064%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.12%)</title><rect x="27.6316%" y="133" width="0.1241%" height="15" fill="rgb(241,128,51)" fg:x="1113" fg:w="5"/><text x="27.8816%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.07%)</title><rect x="27.6812%" y="117" width="0.0745%" height="15" fill="rgb(227,165,31)" fg:x="1115" fg:w="3"/><text x="27.9312%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (3 samples, 0.07%)</title><rect x="27.6812%" y="101" width="0.0745%" height="15" fill="rgb(228,167,24)" fg:x="1115" fg:w="3"/><text x="27.9312%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.15%)</title><rect x="27.6316%" y="149" width="0.1490%" height="15" fill="rgb(228,143,12)" fg:x="1113" fg:w="6"/><text x="27.8816%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.02%)</title><rect x="27.7557%" y="133" width="0.0248%" height="15" fill="rgb(249,149,8)" fg:x="1118" fg:w="1"/><text x="28.0057%" y="143.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.27%)</title><rect x="27.5323%" y="181" width="0.2731%" height="15" fill="rgb(243,35,44)" fg:x="1109" fg:w="11"/><text x="27.7823%" y="191.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (7 samples, 0.17%)</title><rect x="27.6316%" y="165" width="0.1738%" height="15" fill="rgb(246,89,9)" fg:x="1113" fg:w="7"/><text x="27.8816%" y="175.50"></text></g><g><title>rust_obj_parser`__rdl_realloc (1 samples, 0.02%)</title><rect x="27.7805%" y="149" width="0.0248%" height="15" fill="rgb(233,213,13)" fg:x="1119" fg:w="1"/><text x="28.0305%" y="159.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="27.8054%" y="181" width="0.0248%" height="15" fill="rgb(233,141,41)" fg:x="1120" fg:w="1"/><text x="28.0554%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (35 samples, 0.87%)</title><rect x="33.9374%" y="165" width="0.8689%" height="15" fill="rgb(239,167,4)" fg:x="1367" fg:w="35"/><text x="34.1874%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (95 samples, 2.36%)</title><rect x="42.9245%" y="149" width="2.3585%" height="15" fill="rgb(209,217,16)" fg:x="1729" fg:w="95"/><text x="43.1745%" y="159.50">l..</text></g><g><title>rust_obj_parser`&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,145 samples, 28.43%)</title><rect x="34.8064%" y="165" width="28.4260%" height="15" fill="rgb(219,88,35)" fg:x="1402" fg:w="1145"/><text x="35.0564%" y="175.50">rust_obj_parser`&lt;core::str::iter::Lines as cor..</text></g><g><title>rust_obj_parser`core::slice::memchr::memchr_general_case (723 samples, 17.95%)</title><rect x="45.2830%" y="149" width="17.9494%" height="15" fill="rgb(220,193,23)" fg:x="1824" fg:w="723"/><text x="45.5330%" y="159.50">rust_obj_parser`core::slice:..</text></g><g><title>rust_obj_parser`DYLD-STUB$$memcmp (23 samples, 0.57%)</title><rect x="63.2324%" y="165" width="0.5710%" height="15" fill="rgb(230,90,52)" fg:x="2547" fg:w="23"/><text x="63.4824%" y="175.50"></text></g><g><title>rust_obj_parser`__rust_alloc (1 samples, 0.02%)</title><rect x="63.8530%" y="149" width="0.0248%" height="15" fill="rgb(252,106,19)" fg:x="2572" fg:w="1"/><text x="64.1030%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="63.9027%" y="85" width="0.0248%" height="15" fill="rgb(206,74,20)" fg:x="2574" fg:w="1"/><text x="64.1527%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="63.9027%" y="133" width="0.0497%" height="15" fill="rgb(230,138,44)" fg:x="2574" fg:w="2"/><text x="64.1527%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="63.9027%" y="117" width="0.0497%" height="15" fill="rgb(235,182,43)" fg:x="2574" fg:w="2"/><text x="64.1527%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="63.9027%" y="101" width="0.0497%" height="15" fill="rgb(242,16,51)" fg:x="2574" fg:w="2"/><text x="64.1527%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="63.9275%" y="85" width="0.0248%" height="15" fill="rgb(248,9,4)" fg:x="2575" fg:w="1"/><text x="64.1775%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (1 samples, 0.02%)</title><rect x="64.1013%" y="101" width="0.0248%" height="15" fill="rgb(210,31,22)" fg:x="2582" fg:w="1"/><text x="64.3513%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.05%)</title><rect x="64.1509%" y="85" width="0.0497%" height="15" fill="rgb(239,54,39)" fg:x="2584" fg:w="2"/><text x="64.4009%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.05%)</title><rect x="64.2006%" y="85" width="0.0497%" height="15" fill="rgb(230,99,41)" fg:x="2586" fg:w="2"/><text x="64.4506%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="64.2254%" y="69" width="0.0248%" height="15" fill="rgb(253,106,12)" fg:x="2587" fg:w="1"/><text x="64.4754%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (4 samples, 0.10%)</title><rect x="64.2502%" y="85" width="0.0993%" height="15" fill="rgb(213,46,41)" fg:x="2588" fg:w="4"/><text x="64.5002%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="64.3247%" y="69" width="0.0248%" height="15" fill="rgb(215,133,35)" fg:x="2591" fg:w="1"/><text x="64.5747%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (2 samples, 0.05%)</title><rect x="64.3496%" y="69" width="0.0497%" height="15" fill="rgb(213,28,5)" fg:x="2592" fg:w="2"/><text x="64.5996%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="64.4489%" y="37" width="0.0248%" height="15" fill="rgb(215,77,49)" fg:x="2596" fg:w="1"/><text x="64.6989%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.15%)</title><rect x="64.3992%" y="69" width="0.1490%" height="15" fill="rgb(248,100,22)" fg:x="2594" fg:w="6"/><text x="64.6492%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (5 samples, 0.12%)</title><rect x="64.4240%" y="53" width="0.1241%" height="15" fill="rgb(208,67,9)" fg:x="2595" fg:w="5"/><text x="64.6740%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.07%)</title><rect x="64.4737%" y="37" width="0.0745%" height="15" fill="rgb(219,133,21)" fg:x="2597" fg:w="3"/><text x="64.7237%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.25%)</title><rect x="64.3496%" y="85" width="0.2483%" height="15" fill="rgb(246,46,29)" fg:x="2592" fg:w="10"/><text x="64.5996%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="64.5482%" y="69" width="0.0497%" height="15" fill="rgb(246,185,52)" fg:x="2600" fg:w="2"/><text x="64.7982%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="64.5978%" y="85" width="0.0248%" height="15" fill="rgb(252,136,11)" fg:x="2602" fg:w="1"/><text x="64.8478%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="64.5978%" y="69" width="0.0248%" height="15" fill="rgb(219,138,53)" fg:x="2602" fg:w="1"/><text x="64.8478%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="64.6226%" y="85" width="0.0248%" height="15" fill="rgb(211,51,23)" fg:x="2603" fg:w="1"/><text x="64.8726%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (4 samples, 0.10%)</title><rect x="64.6475%" y="85" width="0.0993%" height="15" fill="rgb(247,221,28)" fg:x="2604" fg:w="4"/><text x="64.8975%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 0.10%)</title><rect x="64.6475%" y="69" width="0.0993%" height="15" fill="rgb(251,222,45)" fg:x="2604" fg:w="4"/><text x="64.8975%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (50 samples, 1.24%)</title><rect x="64.0516%" y="117" width="1.2413%" height="15" fill="rgb(217,162,53)" fg:x="2580" fg:w="50"/><text x="64.3016%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (47 samples, 1.17%)</title><rect x="64.1261%" y="101" width="1.1668%" height="15" fill="rgb(229,93,14)" fg:x="2583" fg:w="47"/><text x="64.3761%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (22 samples, 0.55%)</title><rect x="64.7468%" y="85" width="0.5462%" height="15" fill="rgb(209,67,49)" fg:x="2608" fg:w="22"/><text x="64.9968%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.02%)</title><rect x="65.2929%" y="117" width="0.0248%" height="15" fill="rgb(213,87,29)" fg:x="2630" fg:w="1"/><text x="65.5429%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (58 samples, 1.44%)</title><rect x="63.9523%" y="133" width="1.4399%" height="15" fill="rgb(205,151,52)" fg:x="2576" fg:w="58"/><text x="64.2023%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.07%)</title><rect x="65.3178%" y="117" width="0.0745%" height="15" fill="rgb(253,215,39)" fg:x="2631" fg:w="3"/><text x="65.5678%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.07%)</title><rect x="65.3178%" y="101" width="0.0745%" height="15" fill="rgb(221,220,41)" fg:x="2631" fg:w="3"/><text x="65.5678%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.05%)</title><rect x="65.3923%" y="133" width="0.0497%" height="15" fill="rgb(218,133,21)" fg:x="2634" fg:w="2"/><text x="65.6423%" y="143.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (67 samples, 1.66%)</title><rect x="63.8034%" y="165" width="1.6634%" height="15" fill="rgb(221,193,43)" fg:x="2570" fg:w="67"/><text x="64.0534%" y="175.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (64 samples, 1.59%)</title><rect x="63.8779%" y="149" width="1.5889%" height="15" fill="rgb(240,128,52)" fg:x="2573" fg:w="64"/><text x="64.1279%" y="159.50"></text></g><g><title>rust_obj_parser`__rdl_realloc (1 samples, 0.02%)</title><rect x="65.4419%" y="133" width="0.0248%" height="15" fill="rgb(253,114,12)" fg:x="2636" fg:w="1"/><text x="65.6919%" y="143.50"></text></g><g><title>rust_obj_parser`core::iter::traits::iterator::Iterator::partition (1,587 samples, 39.40%)</title><rect x="27.8302%" y="181" width="39.3992%" height="15" fill="rgb(215,223,47)" fg:x="1121" fg:w="1587"/><text x="28.0802%" y="191.50">rust_obj_parser`core::iter::traits::iterator::Iterator::partition</text></g><g><title>rust_obj_parser`core::slice::memchr::memchr_general_case (71 samples, 1.76%)</title><rect x="65.4667%" y="165" width="1.7627%" height="15" fill="rgb(248,225,23)" fg:x="2637" fg:w="71"/><text x="65.7167%" y="175.50"></text></g><g><title>rust_obj_parser`core::num::_&lt;impl core::str::traits::FromStr for u64&gt;::from_str (10 samples, 0.25%)</title><rect x="67.2294%" y="181" width="0.2483%" height="15" fill="rgb(250,108,0)" fg:x="2708" fg:w="10"/><text x="67.4794%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (21 samples, 0.52%)</title><rect x="76.7627%" y="165" width="0.5214%" height="15" fill="rgb(228,208,7)" fg:x="3092" fg:w="21"/><text x="77.0127%" y="175.50"></text></g><g><title>rust_obj_parser`&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::short_fast_pow10 (2 samples, 0.05%)</title><rect x="77.2840%" y="165" width="0.0497%" height="15" fill="rgb(244,45,10)" fg:x="3113" fg:w="2"/><text x="77.5340%" y="175.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::extract_sign (9 samples, 0.22%)</title><rect x="77.3337%" y="165" width="0.2234%" height="15" fill="rgb(207,125,25)" fg:x="3115" fg:w="9"/><text x="77.5837%" y="175.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::dec2flt (481 samples, 11.94%)</title><rect x="67.4777%" y="181" width="11.9414%" height="15" fill="rgb(210,195,18)" fg:x="2718" fg:w="481"/><text x="67.7277%" y="191.50">rust_obj_parser`co..</text></g><g><title>rust_obj_parser`core::num::dec2flt::parse::parse_decimal (75 samples, 1.86%)</title><rect x="77.5571%" y="165" width="1.8620%" height="15" fill="rgb(249,80,12)" fg:x="3124" fg:w="75"/><text x="77.8071%" y="175.50">r..</text></g><g><title>rust_obj_parser`core::num::dec2flt::extract_sign (20 samples, 0.50%)</title><rect x="79.4191%" y="181" width="0.4965%" height="15" fill="rgb(221,65,9)" fg:x="3199" fg:w="20"/><text x="79.6691%" y="191.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::parse::parse_decimal (3 samples, 0.07%)</title><rect x="79.9156%" y="181" width="0.0745%" height="15" fill="rgb(235,49,36)" fg:x="3219" fg:w="3"/><text x="80.1656%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (175 samples, 4.34%)</title><rect x="87.1152%" y="165" width="4.3446%" height="15" fill="rgb(225,32,20)" fg:x="3509" fg:w="175"/><text x="87.3652%" y="175.50">rust_..</text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.02%)</title><rect x="91.4598%" y="117" width="0.0248%" height="15" fill="rgb(215,141,46)" fg:x="3684" fg:w="1"/><text x="91.7098%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (1 samples, 0.02%)</title><rect x="91.4846%" y="101" width="0.0248%" height="15" fill="rgb(250,160,47)" fg:x="3685" fg:w="1"/><text x="91.7346%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.07%)</title><rect x="91.5094%" y="85" width="0.0745%" height="15" fill="rgb(216,222,40)" fg:x="3686" fg:w="3"/><text x="91.7594%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.02%)</title><rect x="91.5839%" y="85" width="0.0248%" height="15" fill="rgb(234,217,39)" fg:x="3689" fg:w="1"/><text x="91.8339%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.02%)</title><rect x="91.5839%" y="69" width="0.0248%" height="15" fill="rgb(207,178,40)" fg:x="3689" fg:w="1"/><text x="91.8339%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (2 samples, 0.05%)</title><rect x="91.6087%" y="85" width="0.0497%" height="15" fill="rgb(221,136,13)" fg:x="3690" fg:w="2"/><text x="91.8587%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (2 samples, 0.05%)</title><rect x="91.6087%" y="69" width="0.0497%" height="15" fill="rgb(249,199,10)" fg:x="3690" fg:w="2"/><text x="91.8587%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (2 samples, 0.05%)</title><rect x="91.6087%" y="53" width="0.0497%" height="15" fill="rgb(249,222,13)" fg:x="3690" fg:w="2"/><text x="91.8587%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (2 samples, 0.05%)</title><rect x="91.6584%" y="69" width="0.0497%" height="15" fill="rgb(244,185,38)" fg:x="3692" fg:w="2"/><text x="91.9084%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.07%)</title><rect x="91.6584%" y="85" width="0.0745%" height="15" fill="rgb(236,202,9)" fg:x="3692" fg:w="3"/><text x="91.9084%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="91.7080%" y="69" width="0.0248%" height="15" fill="rgb(250,229,37)" fg:x="3694" fg:w="1"/><text x="91.9580%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`realloc (32 samples, 0.79%)</title><rect x="91.4598%" y="133" width="0.7944%" height="15" fill="rgb(206,174,23)" fg:x="3684" fg:w="32"/><text x="91.7098%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (31 samples, 0.77%)</title><rect x="91.4846%" y="117" width="0.7696%" height="15" fill="rgb(211,33,43)" fg:x="3685" fg:w="31"/><text x="91.7346%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (30 samples, 0.74%)</title><rect x="91.5094%" y="101" width="0.7448%" height="15" fill="rgb(245,58,50)" fg:x="3686" fg:w="30"/><text x="91.7594%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (21 samples, 0.52%)</title><rect x="91.7329%" y="85" width="0.5214%" height="15" fill="rgb(244,68,36)" fg:x="3695" fg:w="21"/><text x="91.9829%" y="95.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (33 samples, 0.82%)</title><rect x="91.4598%" y="165" width="0.8193%" height="15" fill="rgb(232,229,15)" fg:x="3684" fg:w="33"/><text x="91.7098%" y="175.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (33 samples, 0.82%)</title><rect x="91.4598%" y="149" width="0.8193%" height="15" fill="rgb(254,30,23)" fg:x="3684" fg:w="33"/><text x="91.7098%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="92.2542%" y="133" width="0.0248%" height="15" fill="rgb(235,160,14)" fg:x="3716" fg:w="1"/><text x="92.5042%" y="143.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::add_vertex (755 samples, 18.74%)</title><rect x="79.9901%" y="181" width="18.7438%" height="15" fill="rgb(212,155,44)" fg:x="3222" fg:w="755"/><text x="80.2401%" y="191.50">rust_obj_parser`rust_obj_pars..</text></g><g><title>rust_obj_parser`core::num::_&lt;impl core::str::traits::FromStr for u64&gt;::from_str (260 samples, 6.45%)</title><rect x="92.2790%" y="165" width="6.4548%" height="15" fill="rgb(226,2,50)" fg:x="3717" fg:w="260"/><text x="92.5290%" y="175.50">rust_obj..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="98.9325%" y="149" width="0.0497%" height="15" fill="rgb(234,177,6)" fg:x="3985" fg:w="2"/><text x="99.1825%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="98.9325%" y="133" width="0.0497%" height="15" fill="rgb(217,24,9)" fg:x="3985" fg:w="2"/><text x="99.1825%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="98.9325%" y="117" width="0.0497%" height="15" fill="rgb(220,13,46)" fg:x="3985" fg:w="2"/><text x="99.1825%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="98.9573%" y="101" width="0.0248%" height="15" fill="rgb(239,221,27)" fg:x="3986" fg:w="1"/><text x="99.2073%" y="111.50"></text></g><g><title>rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}} (3,454 samples, 85.75%)</title><rect x="13.6048%" y="197" width="85.7498%" height="15" fill="rgb(222,198,25)" fg:x="548" fg:w="3454"/><text x="13.8548%" y="207.50">rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_obj_parser`std::sync::mpsc::Sender&lt;T&gt;::send (25 samples, 0.62%)</title><rect x="98.7339%" y="181" width="0.6207%" height="15" fill="rgb(211,99,13)" fg:x="3977" fg:w="25"/><text x="98.9839%" y="191.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::send (22 samples, 0.55%)</title><rect x="98.8083%" y="165" width="0.5462%" height="15" fill="rgb(232,111,31)" fg:x="3980" fg:w="22"/><text x="99.0583%" y="175.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::SignalToken::signal (15 samples, 0.37%)</title><rect x="98.9821%" y="149" width="0.3724%" height="15" fill="rgb(245,82,37)" fg:x="3987" fg:w="15"/><text x="99.2321%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (14 samples, 0.35%)</title><rect x="99.0070%" y="133" width="0.3476%" height="15" fill="rgb(227,149,46)" fg:x="3988" fg:w="14"/><text x="99.2570%" y="143.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::add_vertex (12 samples, 0.30%)</title><rect x="99.3545%" y="197" width="0.2979%" height="15" fill="rgb(218,36,50)" fg:x="4002" fg:w="12"/><text x="99.6045%" y="207.50"></text></g><g><title>rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace (3,558 samples, 88.33%)</title><rect x="11.3456%" y="213" width="88.3317%" height="15" fill="rgb(226,80,48)" fg:x="457" fg:w="3558"/><text x="11.5956%" y="223.50">rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_obj_parser`std::sync::mpsc::Sender&lt;T&gt;::send (1 samples, 0.02%)</title><rect x="99.6524%" y="197" width="0.0248%" height="15" fill="rgb(238,224,15)" fg:x="4014" fg:w="1"/><text x="99.9024%" y="207.50"></text></g><g><title>libdyld.dylib`_tlv_atexit (1 samples, 0.02%)</title><rect x="99.6773%" y="197" width="0.0248%" height="15" fill="rgb(241,136,10)" fg:x="4015" fg:w="1"/><text x="99.9273%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.07%)</title><rect x="99.7021%" y="197" width="0.0745%" height="15" fill="rgb(208,32,45)" fg:x="4016" fg:w="3"/><text x="99.9521%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_allocate_and_initialize_for_key (1 samples, 0.02%)</title><rect x="99.7517%" y="181" width="0.0248%" height="15" fill="rgb(207,135,9)" fg:x="4018" fg:w="1"/><text x="100.0017%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.7517%" y="165" width="0.0248%" height="15" fill="rgb(206,86,44)" fg:x="4018" fg:w="1"/><text x="100.0017%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.7517%" y="149" width="0.0248%" height="15" fill="rgb(245,177,15)" fg:x="4018" fg:w="1"/><text x="100.0017%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.7517%" y="133" width="0.0248%" height="15" fill="rgb(206,64,50)" fg:x="4018" fg:w="1"/><text x="100.0017%" y="143.50"></text></g><g><title>rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}} (3,567 samples, 88.56%)</title><rect x="11.2463%" y="229" width="88.5551%" height="15" fill="rgb(234,36,40)" fg:x="453" fg:w="3567"/><text x="11.4963%" y="239.50">rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_obj_parser`std::sys_common::thread_info::set (5 samples, 0.12%)</title><rect x="99.6773%" y="213" width="0.1241%" height="15" fill="rgb(213,64,8)" fg:x="4015" fg:w="5"/><text x="99.9273%" y="223.50"></text></g><g><title>rust_obj_parser`std::thread::local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.02%)</title><rect x="99.7766%" y="197" width="0.0248%" height="15" fill="rgb(210,75,36)" fg:x="4019" fg:w="1"/><text x="100.0266%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.7766%" y="181" width="0.0248%" height="15" fill="rgb(229,88,21)" fg:x="4019" fg:w="1"/><text x="100.0266%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.7766%" y="165" width="0.0248%" height="15" fill="rgb(252,204,47)" fg:x="4019" fg:w="1"/><text x="100.0266%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.7766%" y="149" width="0.0248%" height="15" fill="rgb(208,77,27)" fg:x="4019" fg:w="1"/><text x="100.0266%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="99.7766%" y="133" width="0.0248%" height="15" fill="rgb(221,76,26)" fg:x="4019" fg:w="1"/><text x="100.0266%" y="143.50"></text></g><g><title>libsystem_c.dylib`sysconf (1 samples, 0.02%)</title><rect x="99.9503%" y="213" width="0.0248%" height="15" fill="rgb(225,139,18)" fg:x="4026" fg:w="1"/><text x="100.2003%" y="223.50"></text></g><g><title>libsystem_c.dylib`getpagesize (1 samples, 0.02%)</title><rect x="99.9503%" y="197" width="0.0248%" height="15" fill="rgb(230,137,11)" fg:x="4026" fg:w="1"/><text x="100.2003%" y="207.50"></text></g><g><title>all (4,028 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(212,28,1)" fg:x="0" fg:w="4028"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (3,704 samples, 91.96%)</title><rect x="8.0437%" y="277" width="91.9563%" height="15" fill="rgb(248,164,17)" fg:x="324" fg:w="3704"/><text x="8.2937%" y="287.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (3,669 samples, 91.09%)</title><rect x="8.9126%" y="261" width="91.0874%" height="15" fill="rgb(222,171,42)" fg:x="359" fg:w="3669"/><text x="9.1626%" y="271.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::new::thread_start (3,589 samples, 89.10%)</title><rect x="10.8987%" y="245" width="89.1013%" height="15" fill="rgb(243,84,45)" fg:x="439" fg:w="3589"/><text x="11.1487%" y="255.50">rust_obj_parser`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_obj_parser`std::sys::unix::stack_overflow::imp::make_handler (8 samples, 0.20%)</title><rect x="99.8014%" y="229" width="0.1986%" height="15" fill="rgb(252,49,23)" fg:x="4020" fg:w="8"/><text x="100.0514%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (1 samples, 0.02%)</title><rect x="99.9752%" y="213" width="0.0248%" height="15" fill="rgb(215,19,7)" fg:x="4027" fg:w="1"/><text x="100.2252%" y="223.50"></text></g></svg></svg>