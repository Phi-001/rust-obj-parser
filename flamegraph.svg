<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="4156"><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="0.0000%" y="149" width="0.0241%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (8 samples, 0.19%)</title><rect x="0.0241%" y="149" width="0.1925%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="8"/><text x="0.2741%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (8 samples, 0.19%)</title><rect x="0.0241%" y="133" width="0.1925%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="8"/><text x="0.2741%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (8 samples, 0.19%)</title><rect x="0.0241%" y="117" width="0.1925%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="8"/><text x="0.2741%" y="127.50"></text></g><g><title>rust_obj_parser`&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.22%)</title><rect x="0.2166%" y="149" width="0.2166%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="9"/><text x="0.4666%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.22%)</title><rect x="0.2166%" y="133" width="0.2166%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="9"/><text x="0.4666%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.19%)</title><rect x="0.4812%" y="133" width="0.1925%" height="15" fill="rgb(207,160,47)" fg:x="20" fg:w="8"/><text x="0.7312%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="0.6737%" y="133" width="0.0481%" height="15" fill="rgb(228,23,34)" fg:x="28" fg:w="2"/><text x="0.9237%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.6978%" y="117" width="0.0241%" height="15" fill="rgb(218,30,26)" fg:x="29" fg:w="1"/><text x="0.9478%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.6978%" y="101" width="0.0241%" height="15" fill="rgb(220,122,19)" fg:x="29" fg:w="1"/><text x="0.9478%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`large_entry_for_pointer_no_lock (1 samples, 0.02%)</title><rect x="0.7218%" y="117" width="0.0241%" height="15" fill="rgb(250,228,42)" fg:x="30" fg:w="1"/><text x="0.9718%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.07%)</title><rect x="0.7218%" y="133" width="0.0722%" height="15" fill="rgb(240,193,28)" fg:x="30" fg:w="3"/><text x="0.9718%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size_try_large (2 samples, 0.05%)</title><rect x="0.7459%" y="117" width="0.0481%" height="15" fill="rgb(216,20,37)" fg:x="31" fg:w="2"/><text x="0.9959%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`large_entry_free_no_lock (1 samples, 0.02%)</title><rect x="0.7940%" y="117" width="0.0241%" height="15" fill="rgb(206,188,39)" fg:x="33" fg:w="1"/><text x="1.0440%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_large (3 samples, 0.07%)</title><rect x="0.7940%" y="133" width="0.0722%" height="15" fill="rgb(217,207,13)" fg:x="33" fg:w="3"/><text x="1.0440%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.05%)</title><rect x="0.8181%" y="117" width="0.0481%" height="15" fill="rgb(231,73,38)" fg:x="34" fg:w="2"/><text x="1.0681%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.05%)</title><rect x="0.8181%" y="101" width="0.0481%" height="15" fill="rgb(225,20,46)" fg:x="34" fg:w="2"/><text x="1.0681%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.07%)</title><rect x="0.8662%" y="133" width="0.0722%" height="15" fill="rgb(210,31,41)" fg:x="36" fg:w="3"/><text x="1.1162%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="0.9143%" y="117" width="0.0241%" height="15" fill="rgb(221,200,47)" fg:x="38" fg:w="1"/><text x="1.1643%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="0.9143%" y="101" width="0.0241%" height="15" fill="rgb(226,26,5)" fg:x="38" fg:w="1"/><text x="1.1643%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="0.9384%" y="133" width="0.0241%" height="15" fill="rgb(249,33,26)" fg:x="39" fg:w="1"/><text x="1.1884%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (38 samples, 0.91%)</title><rect x="0.9625%" y="133" width="0.9143%" height="15" fill="rgb(235,183,28)" fg:x="40" fg:w="38"/><text x="1.2125%" y="143.50"></text></g><g><title>rust_obj_parser`&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.22%)</title><rect x="1.8768%" y="133" width="0.2166%" height="15" fill="rgb(221,5,38)" fg:x="78" fg:w="9"/><text x="2.1268%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.22%)</title><rect x="1.8768%" y="117" width="0.2166%" height="15" fill="rgb(247,18,42)" fg:x="78" fg:w="9"/><text x="2.1268%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="2.0934%" y="69" width="0.0241%" height="15" fill="rgb(241,131,45)" fg:x="87" fg:w="1"/><text x="2.3434%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="2.0934%" y="53" width="0.0241%" height="15" fill="rgb(249,31,29)" fg:x="87" fg:w="1"/><text x="2.3434%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="2.0934%" y="37" width="0.0241%" height="15" fill="rgb(225,111,53)" fg:x="87" fg:w="1"/><text x="2.3434%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.07%)</title><rect x="2.1174%" y="69" width="0.0722%" height="15" fill="rgb(238,160,17)" fg:x="88" fg:w="3"/><text x="2.3674%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.07%)</title><rect x="2.1174%" y="53" width="0.0722%" height="15" fill="rgb(214,148,48)" fg:x="88" fg:w="3"/><text x="2.3674%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.07%)</title><rect x="2.1174%" y="37" width="0.0722%" height="15" fill="rgb(232,36,49)" fg:x="88" fg:w="3"/><text x="2.3674%" y="47.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.19%)</title><rect x="2.0934%" y="133" width="0.1925%" height="15" fill="rgb(209,103,24)" fg:x="87" fg:w="8"/><text x="2.3434%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::recv (8 samples, 0.19%)</title><rect x="2.0934%" y="117" width="0.1925%" height="15" fill="rgb(229,88,8)" fg:x="87" fg:w="8"/><text x="2.3434%" y="127.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::try_recv (8 samples, 0.19%)</title><rect x="2.0934%" y="101" width="0.1925%" height="15" fill="rgb(213,181,19)" fg:x="87" fg:w="8"/><text x="2.3434%" y="111.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::pop (8 samples, 0.19%)</title><rect x="2.0934%" y="85" width="0.1925%" height="15" fill="rgb(254,191,54)" fg:x="87" fg:w="8"/><text x="2.3434%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.10%)</title><rect x="2.1896%" y="69" width="0.0962%" height="15" fill="rgb(241,83,37)" fg:x="91" fg:w="4"/><text x="2.4396%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="2.2859%" y="101" width="0.0241%" height="15" fill="rgb(233,36,39)" fg:x="95" fg:w="1"/><text x="2.5359%" y="111.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.05%)</title><rect x="2.2859%" y="133" width="0.0481%" height="15" fill="rgb(226,3,54)" fg:x="95" fg:w="2"/><text x="2.5359%" y="143.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="2.2859%" y="117" width="0.0481%" height="15" fill="rgb(245,192,40)" fg:x="95" fg:w="2"/><text x="2.5359%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="2.3099%" y="101" width="0.0241%" height="15" fill="rgb(238,167,29)" fg:x="96" fg:w="1"/><text x="2.5599%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.02%)</title><rect x="2.3099%" y="85" width="0.0241%" height="15" fill="rgb(232,182,51)" fg:x="96" fg:w="1"/><text x="2.5599%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="2.3099%" y="69" width="0.0241%" height="15" fill="rgb(231,60,39)" fg:x="96" fg:w="1"/><text x="2.5599%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="2.3099%" y="53" width="0.0241%" height="15" fill="rgb(208,69,12)" fg:x="96" fg:w="1"/><text x="2.5599%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="2.3099%" y="37" width="0.0241%" height="15" fill="rgb(235,93,37)" fg:x="96" fg:w="1"/><text x="2.5599%" y="47.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.05%)</title><rect x="2.3340%" y="117" width="0.0481%" height="15" fill="rgb(213,116,39)" fg:x="97" fg:w="2"/><text x="2.5840%" y="127.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.10%)</title><rect x="2.3340%" y="133" width="0.0962%" height="15" fill="rgb(222,207,29)" fg:x="97" fg:w="4"/><text x="2.5840%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="2.3821%" y="117" width="0.0481%" height="15" fill="rgb(206,96,30)" fg:x="99" fg:w="2"/><text x="2.6321%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.05%)</title><rect x="2.3821%" y="101" width="0.0481%" height="15" fill="rgb(218,138,4)" fg:x="99" fg:w="2"/><text x="2.6321%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.05%)</title><rect x="2.3821%" y="85" width="0.0481%" height="15" fill="rgb(250,191,14)" fg:x="99" fg:w="2"/><text x="2.6321%" y="95.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::ObjectInfo::extend (9 samples, 0.22%)</title><rect x="2.4302%" y="133" width="0.2166%" height="15" fill="rgb(239,60,40)" fg:x="101" fg:w="9"/><text x="2.6802%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.22%)</title><rect x="2.4302%" y="117" width="0.2166%" height="15" fill="rgb(206,27,48)" fg:x="101" fg:w="9"/><text x="2.6802%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="2.6949%" y="117" width="0.0481%" height="15" fill="rgb(225,35,8)" fg:x="112" fg:w="2"/><text x="2.9449%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="2.7190%" y="101" width="0.0241%" height="15" fill="rgb(250,213,24)" fg:x="113" fg:w="1"/><text x="2.9690%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.05%)</title><rect x="2.7430%" y="117" width="0.0481%" height="15" fill="rgb(247,123,22)" fg:x="114" fg:w="2"/><text x="2.9930%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.05%)</title><rect x="2.7430%" y="101" width="0.0481%" height="15" fill="rgb(231,138,38)" fg:x="114" fg:w="2"/><text x="2.9930%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="2.7911%" y="101" width="0.0241%" height="15" fill="rgb(231,145,46)" fg:x="116" fg:w="1"/><text x="3.0411%" y="111.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.10%)</title><rect x="2.7911%" y="117" width="0.0962%" height="15" fill="rgb(251,118,11)" fg:x="116" fg:w="4"/><text x="3.0411%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.07%)</title><rect x="2.8152%" y="101" width="0.0722%" height="15" fill="rgb(217,147,25)" fg:x="117" fg:w="3"/><text x="3.0652%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.05%)</title><rect x="2.8393%" y="85" width="0.0481%" height="15" fill="rgb(247,81,37)" fg:x="118" fg:w="2"/><text x="3.0893%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="2.8633%" y="69" width="0.0241%" height="15" fill="rgb(209,12,38)" fg:x="119" fg:w="1"/><text x="3.1133%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (35 samples, 0.84%)</title><rect x="2.8874%" y="101" width="0.8422%" height="15" fill="rgb(227,1,9)" fg:x="120" fg:w="35"/><text x="3.1374%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.02%)</title><rect x="3.8258%" y="85" width="0.0241%" height="15" fill="rgb(248,47,43)" fg:x="159" fg:w="1"/><text x="4.0758%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (55 samples, 1.32%)</title><rect x="3.8499%" y="69" width="1.3234%" height="15" fill="rgb(221,10,30)" fg:x="160" fg:w="55"/><text x="4.0999%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_join (62 samples, 1.49%)</title><rect x="3.7295%" y="101" width="1.4918%" height="15" fill="rgb(210,229,1)" fg:x="155" fg:w="62"/><text x="3.9795%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_deallocate (57 samples, 1.37%)</title><rect x="3.8499%" y="85" width="1.3715%" height="15" fill="rgb(222,148,37)" fg:x="160" fg:w="57"/><text x="4.0999%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_vm_deallocate (2 samples, 0.05%)</title><rect x="5.1732%" y="69" width="0.0481%" height="15" fill="rgb(234,67,33)" fg:x="215" fg:w="2"/><text x="5.4232%" y="79.50"></text></g><g><title>rust_obj_parser`std::thread::JoinHandle&lt;T&gt;::join (108 samples, 2.60%)</title><rect x="2.6468%" y="133" width="2.5987%" height="15" fill="rgb(247,98,35)" fg:x="110" fg:w="108"/><text x="2.8968%" y="143.50">ru..</text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::join (98 samples, 2.36%)</title><rect x="2.8874%" y="117" width="2.3580%" height="15" fill="rgb(247,138,52)" fg:x="120" fg:w="98"/><text x="3.1374%" y="127.50">r..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (1 samples, 0.02%)</title><rect x="5.2214%" y="101" width="0.0241%" height="15" fill="rgb(213,79,30)" fg:x="217" fg:w="1"/><text x="5.4714%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="5.2695%" y="117" width="0.0241%" height="15" fill="rgb(246,177,23)" fg:x="219" fg:w="1"/><text x="5.5195%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="5.2695%" y="101" width="0.0241%" height="15" fill="rgb(230,62,27)" fg:x="219" fg:w="1"/><text x="5.5195%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="5.2695%" y="85" width="0.0241%" height="15" fill="rgb(216,154,8)" fg:x="219" fg:w="1"/><text x="5.5195%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="5.2695%" y="69" width="0.0241%" height="15" fill="rgb(244,35,45)" fg:x="219" fg:w="1"/><text x="5.5195%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (45 samples, 1.08%)</title><rect x="5.2936%" y="101" width="1.0828%" height="15" fill="rgb(251,115,12)" fg:x="220" fg:w="45"/><text x="5.5436%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="6.3763%" y="101" width="0.0481%" height="15" fill="rgb(240,54,50)" fg:x="265" fg:w="2"/><text x="6.6263%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="6.3763%" y="85" width="0.0481%" height="15" fill="rgb(233,84,52)" fg:x="265" fg:w="2"/><text x="6.6263%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="6.3763%" y="69" width="0.0481%" height="15" fill="rgb(207,117,47)" fg:x="265" fg:w="2"/><text x="6.6263%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (14 samples, 0.34%)</title><rect x="7.0500%" y="85" width="0.3369%" height="15" fill="rgb(249,43,39)" fg:x="293" fg:w="14"/><text x="7.3000%" y="95.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::new (93 samples, 2.24%)</title><rect x="5.2936%" y="117" width="2.2377%" height="15" fill="rgb(209,38,44)" fg:x="220" fg:w="93"/><text x="5.5436%" y="127.50">r..</text></g><g><title>libsystem_pthread.dylib`_pthread_create (46 samples, 1.11%)</title><rect x="6.4244%" y="101" width="1.1068%" height="15" fill="rgb(236,212,23)" fg:x="267" fg:w="46"/><text x="6.6744%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_protect_trap (6 samples, 0.14%)</title><rect x="7.3869%" y="85" width="0.1444%" height="15" fill="rgb(242,79,21)" fg:x="307" fg:w="6"/><text x="7.6369%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="7.5313%" y="101" width="0.0241%" height="15" fill="rgb(211,96,35)" fg:x="313" fg:w="1"/><text x="7.7813%" y="111.50"></text></g><g><title>rust_obj_parser`std::rt::lang_start::_{{closure}} (315 samples, 7.58%)</title><rect x="0.0000%" y="197" width="7.5794%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="315"/><text x="0.2500%" y="207.50">rust_obj_p..</text></g><g><title>rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace (315 samples, 7.58%)</title><rect x="0.0000%" y="181" width="7.5794%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="315"/><text x="0.2500%" y="191.50">rust_obj_p..</text></g><g><title>rust_obj_parser`rust_obj_parser::main (315 samples, 7.58%)</title><rect x="0.0000%" y="165" width="7.5794%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="315"/><text x="0.2500%" y="175.50">rust_obj_p..</text></g><g><title>rust_obj_parser`rust_obj_parser::parser::parse_obj_threaded (297 samples, 7.15%)</title><rect x="0.4331%" y="149" width="7.1463%" height="15" fill="rgb(235,213,38)" fg:x="18" fg:w="297"/><text x="0.6831%" y="159.50">rust_obj_p..</text></g><g><title>rust_obj_parser`std::thread::spawn (97 samples, 2.33%)</title><rect x="5.2454%" y="133" width="2.3340%" height="15" fill="rgb(237,122,38)" fg:x="218" fg:w="97"/><text x="5.4954%" y="143.50">r..</text></g><g><title>rust_obj_parser`std::thread::Thread::new (2 samples, 0.05%)</title><rect x="7.5313%" y="117" width="0.0481%" height="15" fill="rgb(244,218,35)" fg:x="313" fg:w="2"/><text x="7.7813%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="7.5553%" y="101" width="0.0241%" height="15" fill="rgb(240,68,47)" fg:x="314" fg:w="1"/><text x="7.8053%" y="111.50"></text></g><g><title>0x1 (316 samples, 7.60%)</title><rect x="0.0000%" y="261" width="7.6035%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="316"/><text x="0.2500%" y="271.50">0x1</text></g><g><title>libdyld.dylib`start (316 samples, 7.60%)</title><rect x="0.0000%" y="245" width="7.6035%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="316"/><text x="0.2500%" y="255.50">libdyld.dy..</text></g><g><title>rust_obj_parser`main (316 samples, 7.60%)</title><rect x="0.0000%" y="229" width="7.6035%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="316"/><text x="0.2500%" y="239.50">rust_obj_p..</text></g><g><title>rust_obj_parser`std::rt::lang_start_internal (316 samples, 7.60%)</title><rect x="0.0000%" y="213" width="7.6035%" height="15" fill="rgb(250,166,2)" fg:x="0" fg:w="316"/><text x="0.2500%" y="223.50">rust_obj_p..</text></g><g><title>rust_obj_parser`std::sys_common::mutex::MovableMutex::new (1 samples, 0.02%)</title><rect x="7.5794%" y="197" width="0.0241%" height="15" fill="rgb(242,216,29)" fg:x="315" fg:w="1"/><text x="7.8294%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (53 samples, 1.28%)</title><rect x="7.6035%" y="261" width="1.2753%" height="15" fill="rgb(230,116,27)" fg:x="316" fg:w="53"/><text x="7.8535%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.05%)</title><rect x="8.8787%" y="261" width="0.0481%" height="15" fill="rgb(228,99,48)" fg:x="369" fg:w="2"/><text x="9.1287%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__thread_selfid (6 samples, 0.14%)</title><rect x="10.6352%" y="245" width="0.1444%" height="15" fill="rgb(253,11,6)" fg:x="442" fg:w="6"/><text x="10.8852%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__disable_threadsignal (3 samples, 0.07%)</title><rect x="10.8277%" y="229" width="0.0722%" height="15" fill="rgb(247,143,39)" fg:x="450" fg:w="3"/><text x="11.0777%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (19 samples, 0.46%)</title><rect x="10.8999%" y="229" width="0.4572%" height="15" fill="rgb(236,97,10)" fg:x="453" fg:w="19"/><text x="11.1499%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__sigaltstack (7 samples, 0.17%)</title><rect x="11.3571%" y="229" width="0.1684%" height="15" fill="rgb(233,208,19)" fg:x="472" fg:w="7"/><text x="11.6071%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="11.5496%" y="181" width="0.0241%" height="15" fill="rgb(216,164,2)" fg:x="480" fg:w="1"/><text x="11.7996%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="11.5736%" y="165" width="0.0241%" height="15" fill="rgb(220,129,5)" fg:x="481" fg:w="1"/><text x="11.8236%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="11.5736%" y="149" width="0.0241%" height="15" fill="rgb(242,17,10)" fg:x="481" fg:w="1"/><text x="11.8236%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (7 samples, 0.17%)</title><rect x="11.5255%" y="229" width="0.1684%" height="15" fill="rgb(242,107,0)" fg:x="479" fg:w="7"/><text x="11.7755%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (7 samples, 0.17%)</title><rect x="11.5255%" y="213" width="0.1684%" height="15" fill="rgb(251,28,31)" fg:x="479" fg:w="7"/><text x="11.7755%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_finalize_list (6 samples, 0.14%)</title><rect x="11.5496%" y="197" width="0.1444%" height="15" fill="rgb(233,223,10)" fg:x="480" fg:w="6"/><text x="11.7996%" y="207.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread_local_dtor::register_dtor::run_dtors (5 samples, 0.12%)</title><rect x="11.5736%" y="181" width="0.1203%" height="15" fill="rgb(215,21,27)" fg:x="481" fg:w="5"/><text x="11.8236%" y="191.50"></text></g><g><title>rust_obj_parser`std::thread::local::fast::destroy_value (4 samples, 0.10%)</title><rect x="11.5977%" y="165" width="0.0962%" height="15" fill="rgb(232,23,21)" fg:x="482" fg:w="4"/><text x="11.8477%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (36 samples, 0.87%)</title><rect x="11.6939%" y="197" width="0.8662%" height="15" fill="rgb(244,5,23)" fg:x="486" fg:w="36"/><text x="11.9439%" y="207.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (2 samples, 0.05%)</title><rect x="12.5602%" y="197" width="0.0481%" height="15" fill="rgb(226,81,46)" fg:x="522" fg:w="2"/><text x="12.8102%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_joiner_prepost_wake (1 samples, 0.02%)</title><rect x="12.6083%" y="197" width="0.0241%" height="15" fill="rgb(247,70,30)" fg:x="524" fg:w="1"/><text x="12.8583%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (9 samples, 0.22%)</title><rect x="12.6323%" y="181" width="0.2166%" height="15" fill="rgb(212,68,19)" fg:x="525" fg:w="9"/><text x="12.8823%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_join$NOCANCEL (49 samples, 1.18%)</title><rect x="11.6939%" y="229" width="1.1790%" height="15" fill="rgb(240,187,13)" fg:x="486" fg:w="49"/><text x="11.9439%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (49 samples, 1.18%)</title><rect x="11.6939%" y="213" width="1.1790%" height="15" fill="rgb(223,113,26)" fg:x="486" fg:w="49"/><text x="11.9439%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (10 samples, 0.24%)</title><rect x="12.6323%" y="197" width="0.2406%" height="15" fill="rgb(206,192,2)" fg:x="525" fg:w="10"/><text x="12.8823%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_joiner_wake (1 samples, 0.02%)</title><rect x="12.8489%" y="181" width="0.0241%" height="15" fill="rgb(241,108,4)" fg:x="534" fg:w="1"/><text x="13.0989%" y="191.50"></text></g><g><title>rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.02%)</title><rect x="12.8730%" y="229" width="0.0241%" height="15" fill="rgb(247,173,49)" fg:x="535" fg:w="1"/><text x="13.1230%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (10 samples, 0.24%)</title><rect x="12.9692%" y="213" width="0.2406%" height="15" fill="rgb(224,114,35)" fg:x="539" fg:w="10"/><text x="13.2192%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__sigaltstack (12 samples, 0.29%)</title><rect x="13.2098%" y="213" width="0.2887%" height="15" fill="rgb(245,159,27)" fg:x="549" fg:w="12"/><text x="13.4598%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="13.4986%" y="213" width="0.0241%" height="15" fill="rgb(245,172,44)" fg:x="561" fg:w="1"/><text x="13.7486%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="13.4986%" y="197" width="0.0241%" height="15" fill="rgb(236,23,11)" fg:x="561" fg:w="1"/><text x="13.7486%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="13.4986%" y="181" width="0.0241%" height="15" fill="rgb(205,117,38)" fg:x="561" fg:w="1"/><text x="13.7486%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.05%)</title><rect x="13.5226%" y="213" width="0.0481%" height="15" fill="rgb(237,72,25)" fg:x="562" fg:w="2"/><text x="13.7726%" y="223.50"></text></g><g><title>rust_obj_parser`core::ptr::drop_in_place&lt;rust_obj_parser::parser::create_thread_parse&lt;rust_obj_parser::parser::parse_obj_threaded::{{closure}},rust_obj_parser::parser::parse_obj_threaded::{{closure}}&gt;::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="13.5707%" y="197" width="0.0241%" height="15" fill="rgb(244,70,9)" fg:x="564" fg:w="1"/><text x="13.8207%" y="207.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::face (5 samples, 0.12%)</title><rect x="13.5948%" y="197" width="0.1203%" height="15" fill="rgb(217,125,39)" fg:x="565" fg:w="5"/><text x="13.8448%" y="207.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::vertex (1 samples, 0.02%)</title><rect x="13.7151%" y="197" width="0.0241%" height="15" fill="rgb(235,36,10)" fg:x="570" fg:w="1"/><text x="13.9651%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (23 samples, 0.55%)</title><rect x="15.1107%" y="181" width="0.5534%" height="15" fill="rgb(251,123,47)" fg:x="628" fg:w="23"/><text x="15.3607%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="15.6882%" y="165" width="0.0241%" height="15" fill="rgb(221,13,13)" fg:x="652" fg:w="1"/><text x="15.9382%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="15.6882%" y="149" width="0.0241%" height="15" fill="rgb(238,131,9)" fg:x="652" fg:w="1"/><text x="15.9382%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.12%)</title><rect x="15.6641%" y="181" width="0.1203%" height="15" fill="rgb(211,50,8)" fg:x="651" fg:w="5"/><text x="15.9141%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size_try_large (3 samples, 0.07%)</title><rect x="15.7122%" y="165" width="0.0722%" height="15" fill="rgb(245,182,24)" fg:x="653" fg:w="3"/><text x="15.9622%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (2 samples, 0.05%)</title><rect x="15.7363%" y="149" width="0.0481%" height="15" fill="rgb(242,14,37)" fg:x="654" fg:w="2"/><text x="15.9863%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (2 samples, 0.05%)</title><rect x="15.9047%" y="165" width="0.0481%" height="15" fill="rgb(246,228,12)" fg:x="661" fg:w="2"/><text x="16.1547%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (9 samples, 0.22%)</title><rect x="15.7844%" y="181" width="0.2166%" height="15" fill="rgb(213,55,15)" fg:x="656" fg:w="9"/><text x="16.0344%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (2 samples, 0.05%)</title><rect x="15.9528%" y="165" width="0.0481%" height="15" fill="rgb(209,9,3)" fg:x="663" fg:w="2"/><text x="16.2028%" y="175.50"></text></g><g><title>rust_obj_parser`&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.91%)</title><rect x="16.0010%" y="181" width="0.9143%" height="15" fill="rgb(230,59,30)" fg:x="665" fg:w="38"/><text x="16.2510%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.34%)</title><rect x="16.9153%" y="181" width="0.3369%" height="15" fill="rgb(209,121,21)" fg:x="703" fg:w="14"/><text x="17.1653%" y="191.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.07%)</title><rect x="17.2522%" y="181" width="0.0722%" height="15" fill="rgb(220,109,13)" fg:x="717" fg:w="3"/><text x="17.5022%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (37 samples, 0.89%)</title><rect x="23.7488%" y="165" width="0.8903%" height="15" fill="rgb(232,18,1)" fg:x="987" fg:w="37"/><text x="23.9988%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (78 samples, 1.88%)</title><rect x="32.2666%" y="149" width="1.8768%" height="15" fill="rgb(215,41,42)" fg:x="1341" fg:w="78"/><text x="32.5166%" y="159.50">l..</text></g><g><title>rust_obj_parser`&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,098 samples, 26.42%)</title><rect x="24.6391%" y="165" width="26.4196%" height="15" fill="rgb(224,123,36)" fg:x="1024" fg:w="1098"/><text x="24.8891%" y="175.50">rust_obj_parser`&lt;core::str::iter::Lines as..</text></g><g><title>rust_obj_parser`core::slice::memchr::memchr_general_case (703 samples, 16.92%)</title><rect x="34.1434%" y="149" width="16.9153%" height="15" fill="rgb(240,125,3)" fg:x="1419" fg:w="703"/><text x="34.3934%" y="159.50">rust_obj_parser`core::slic..</text></g><g><title>rust_obj_parser`DYLD-STUB$$memcmp (19 samples, 0.46%)</title><rect x="51.0587%" y="165" width="0.4572%" height="15" fill="rgb(205,98,50)" fg:x="2122" fg:w="19"/><text x="51.3087%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.10%)</title><rect x="51.5399%" y="133" width="0.0962%" height="15" fill="rgb(205,185,37)" fg:x="2142" fg:w="4"/><text x="51.7899%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.10%)</title><rect x="51.5399%" y="117" width="0.0962%" height="15" fill="rgb(238,207,15)" fg:x="2142" fg:w="4"/><text x="51.7899%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.10%)</title><rect x="51.5399%" y="101" width="0.0962%" height="15" fill="rgb(213,199,42)" fg:x="2142" fg:w="4"/><text x="51.7899%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.05%)</title><rect x="51.5881%" y="85" width="0.0481%" height="15" fill="rgb(235,201,11)" fg:x="2144" fg:w="2"/><text x="51.8381%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="51.6362%" y="133" width="0.0241%" height="15" fill="rgb(207,46,11)" fg:x="2146" fg:w="1"/><text x="51.8862%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.02%)</title><rect x="51.6603%" y="117" width="0.0241%" height="15" fill="rgb(241,35,35)" fg:x="2147" fg:w="1"/><text x="51.9103%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (1 samples, 0.02%)</title><rect x="51.7084%" y="101" width="0.0241%" height="15" fill="rgb(243,32,47)" fg:x="2149" fg:w="1"/><text x="51.9584%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5 samples, 0.12%)</title><rect x="51.7324%" y="85" width="0.1203%" height="15" fill="rgb(247,202,23)" fg:x="2150" fg:w="5"/><text x="51.9824%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.05%)</title><rect x="51.8527%" y="85" width="0.0481%" height="15" fill="rgb(219,102,11)" fg:x="2155" fg:w="2"/><text x="52.1027%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="51.8768%" y="69" width="0.0241%" height="15" fill="rgb(243,110,44)" fg:x="2156" fg:w="1"/><text x="52.1268%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (5 samples, 0.12%)</title><rect x="51.9009%" y="85" width="0.1203%" height="15" fill="rgb(222,74,54)" fg:x="2157" fg:w="5"/><text x="52.1509%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="51.9971%" y="69" width="0.0241%" height="15" fill="rgb(216,99,12)" fg:x="2161" fg:w="1"/><text x="52.2471%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (2 samples, 0.05%)</title><rect x="52.0212%" y="69" width="0.0481%" height="15" fill="rgb(226,22,26)" fg:x="2162" fg:w="2"/><text x="52.2712%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.02%)</title><rect x="52.0452%" y="53" width="0.0241%" height="15" fill="rgb(217,163,10)" fg:x="2163" fg:w="1"/><text x="52.2952%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.02%)</title><rect x="52.0452%" y="37" width="0.0241%" height="15" fill="rgb(213,25,53)" fg:x="2163" fg:w="1"/><text x="52.2952%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.10%)</title><rect x="52.0212%" y="85" width="0.0962%" height="15" fill="rgb(252,105,26)" fg:x="2162" fg:w="4"/><text x="52.2712%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.05%)</title><rect x="52.0693%" y="69" width="0.0481%" height="15" fill="rgb(220,39,43)" fg:x="2164" fg:w="2"/><text x="52.3193%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.05%)</title><rect x="52.1174%" y="85" width="0.0481%" height="15" fill="rgb(229,68,48)" fg:x="2166" fg:w="2"/><text x="52.3674%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="52.1415%" y="69" width="0.0241%" height="15" fill="rgb(252,8,32)" fg:x="2167" fg:w="1"/><text x="52.3915%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (56 samples, 1.35%)</title><rect x="51.6843%" y="117" width="1.3474%" height="15" fill="rgb(223,20,43)" fg:x="2148" fg:w="56"/><text x="51.9343%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (54 samples, 1.30%)</title><rect x="51.7324%" y="101" width="1.2993%" height="15" fill="rgb(229,81,49)" fg:x="2150" fg:w="54"/><text x="51.9824%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (36 samples, 0.87%)</title><rect x="52.1655%" y="85" width="0.8662%" height="15" fill="rgb(236,28,36)" fg:x="2168" fg:w="36"/><text x="52.4155%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_size (3 samples, 0.07%)</title><rect x="53.0318%" y="117" width="0.0722%" height="15" fill="rgb(249,185,26)" fg:x="2204" fg:w="3"/><text x="53.2818%" y="127.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (67 samples, 1.61%)</title><rect x="51.5159%" y="165" width="1.6121%" height="15" fill="rgb(249,174,33)" fg:x="2141" fg:w="67"/><text x="51.7659%" y="175.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (67 samples, 1.61%)</title><rect x="51.5159%" y="149" width="1.6121%" height="15" fill="rgb(233,201,37)" fg:x="2141" fg:w="67"/><text x="51.7659%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (61 samples, 1.47%)</title><rect x="51.6603%" y="133" width="1.4678%" height="15" fill="rgb(221,78,26)" fg:x="2147" fg:w="61"/><text x="51.9103%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="53.1039%" y="117" width="0.0241%" height="15" fill="rgb(250,127,30)" fg:x="2207" fg:w="1"/><text x="53.3539%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="53.1039%" y="101" width="0.0241%" height="15" fill="rgb(230,49,44)" fg:x="2207" fg:w="1"/><text x="53.3539%" y="111.50"></text></g><g><title>rust_obj_parser`core::iter::traits::iterator::Iterator::partition (1,542 samples, 37.10%)</title><rect x="17.3244%" y="181" width="37.1030%" height="15" fill="rgb(229,67,23)" fg:x="720" fg:w="1542"/><text x="17.5744%" y="191.50">rust_obj_parser`core::iter::traits::iterator::Iterator::part..</text></g><g><title>rust_obj_parser`core::slice::memchr::memchr_general_case (54 samples, 1.30%)</title><rect x="53.1280%" y="165" width="1.2993%" height="15" fill="rgb(249,83,47)" fg:x="2208" fg:w="54"/><text x="53.3780%" y="175.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::dec2flt (12 samples, 0.29%)</title><rect x="54.4273%" y="181" width="0.2887%" height="15" fill="rgb(215,43,3)" fg:x="2262" fg:w="12"/><text x="54.6773%" y="191.50"></text></g><g><title>rust_obj_parser`core::ptr::drop_in_place&lt;rust_obj_parser::parser::create_thread_parse&lt;rust_obj_parser::parser::parse_obj_threaded::{{closure}},rust_obj_parser::parser::parse_obj_threaded::{{closure}}&gt;::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="54.7161%" y="181" width="0.0241%" height="15" fill="rgb(238,154,13)" fg:x="2274" fg:w="1"/><text x="54.9661%" y="191.50"></text></g><g><title>rust_obj_parser`core::ptr::drop_in_place&lt;std::sync::mpsc::Sender&lt;rust_obj_parser::parser::Message&lt;rust_obj_parser::parser::ObjectInfo,rust_obj_parser::parser::VertexData&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="54.7401%" y="181" width="0.0241%" height="15" fill="rgb(219,56,2)" fg:x="2275" fg:w="1"/><text x="54.9901%" y="191.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::drop_chan (1 samples, 0.02%)</title><rect x="54.7401%" y="165" width="0.0241%" height="15" fill="rgb(233,0,4)" fg:x="2275" fg:w="1"/><text x="54.9901%" y="175.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::add_vertex (10 samples, 0.24%)</title><rect x="54.7642%" y="181" width="0.2406%" height="15" fill="rgb(235,30,7)" fg:x="2276" fg:w="10"/><text x="55.0142%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (81 samples, 1.95%)</title><rect x="56.7132%" y="165" width="1.9490%" height="15" fill="rgb(250,79,13)" fg:x="2357" fg:w="81"/><text x="56.9632%" y="175.50">r..</text></g><g><title>rust_obj_parser`core::num::_&lt;impl core::str::traits::FromStr for u64&gt;::from_str (9 samples, 0.22%)</title><rect x="58.6622%" y="165" width="0.2166%" height="15" fill="rgb(211,146,34)" fg:x="2438" fg:w="9"/><text x="58.9122%" y="175.50"></text></g><g><title>rust_obj_parser`core::str::iter::SplitInternal&lt;P&gt;::next (30 samples, 0.72%)</title><rect x="58.8787%" y="165" width="0.7218%" height="15" fill="rgb(228,22,38)" fg:x="2447" fg:w="30"/><text x="59.1287%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.12%)</title><rect x="71.7757%" y="69" width="0.1203%" height="15" fill="rgb(235,168,5)" fg:x="2983" fg:w="5"/><text x="72.0257%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.02%)</title><rect x="71.8961%" y="53" width="0.0241%" height="15" fill="rgb(221,155,16)" fg:x="2988" fg:w="1"/><text x="72.1461%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_large (2 samples, 0.05%)</title><rect x="71.8961%" y="69" width="0.0481%" height="15" fill="rgb(215,215,53)" fg:x="2988" fg:w="2"/><text x="72.1461%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`large_entry_free_no_lock (1 samples, 0.02%)</title><rect x="71.9201%" y="53" width="0.0241%" height="15" fill="rgb(223,4,10)" fg:x="2989" fg:w="1"/><text x="72.1701%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="71.9442%" y="53" width="0.0241%" height="15" fill="rgb(234,103,6)" fg:x="2990" fg:w="1"/><text x="72.1942%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.05%)</title><rect x="71.9442%" y="69" width="0.0481%" height="15" fill="rgb(227,97,0)" fg:x="2990" fg:w="2"/><text x="72.1942%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="71.9682%" y="53" width="0.0241%" height="15" fill="rgb(234,150,53)" fg:x="2991" fg:w="1"/><text x="72.2182%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (4 samples, 0.10%)</title><rect x="71.9923%" y="69" width="0.0962%" height="15" fill="rgb(228,201,54)" fg:x="2992" fg:w="4"/><text x="72.2423%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (4 samples, 0.10%)</title><rect x="71.9923%" y="53" width="0.0962%" height="15" fill="rgb(222,22,37)" fg:x="2992" fg:w="4"/><text x="72.2423%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (4 samples, 0.10%)</title><rect x="71.9923%" y="37" width="0.0962%" height="15" fill="rgb(237,53,32)" fg:x="2992" fg:w="4"/><text x="72.2423%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (3 samples, 0.07%)</title><rect x="72.0885%" y="69" width="0.0722%" height="15" fill="rgb(233,25,53)" fg:x="2996" fg:w="3"/><text x="72.3385%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.02%)</title><rect x="72.1367%" y="53" width="0.0241%" height="15" fill="rgb(210,40,34)" fg:x="2998" fg:w="1"/><text x="72.3867%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (1 samples, 0.02%)</title><rect x="72.1848%" y="53" width="0.0241%" height="15" fill="rgb(241,220,44)" fg:x="3000" fg:w="1"/><text x="72.4348%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.07%)</title><rect x="72.1607%" y="69" width="0.0722%" height="15" fill="rgb(235,28,35)" fg:x="2999" fg:w="3"/><text x="72.4107%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="72.2089%" y="53" width="0.0241%" height="15" fill="rgb(210,56,17)" fg:x="3001" fg:w="1"/><text x="72.4589%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size_try_large (1 samples, 0.02%)</title><rect x="72.2329%" y="69" width="0.0241%" height="15" fill="rgb(224,130,29)" fg:x="3002" fg:w="1"/><text x="72.4829%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.02%)</title><rect x="72.2329%" y="53" width="0.0241%" height="15" fill="rgb(235,212,8)" fg:x="3002" fg:w="1"/><text x="72.4829%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (77 samples, 1.85%)</title><rect x="71.7757%" y="101" width="1.8527%" height="15" fill="rgb(223,33,50)" fg:x="2983" fg:w="77"/><text x="72.0257%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (77 samples, 1.85%)</title><rect x="71.7757%" y="85" width="1.8527%" height="15" fill="rgb(219,149,13)" fg:x="2983" fg:w="77"/><text x="72.0257%" y="95.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (57 samples, 1.37%)</title><rect x="72.2570%" y="69" width="1.3715%" height="15" fill="rgb(250,156,29)" fg:x="3003" fg:w="57"/><text x="72.5070%" y="79.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (80 samples, 1.92%)</title><rect x="71.7517%" y="149" width="1.9249%" height="15" fill="rgb(216,193,19)" fg:x="2982" fg:w="80"/><text x="72.0017%" y="159.50">r..</text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (79 samples, 1.90%)</title><rect x="71.7757%" y="133" width="1.9009%" height="15" fill="rgb(216,135,14)" fg:x="2983" fg:w="79"/><text x="72.0257%" y="143.50">r..</text></g><g><title>libsystem_malloc.dylib`realloc (79 samples, 1.90%)</title><rect x="71.7757%" y="117" width="1.9009%" height="15" fill="rgb(241,47,5)" fg:x="2983" fg:w="79"/><text x="72.0257%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size_try_large (2 samples, 0.05%)</title><rect x="73.6285%" y="101" width="0.0481%" height="15" fill="rgb(233,42,35)" fg:x="3060" fg:w="2"/><text x="73.8785%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (2 samples, 0.05%)</title><rect x="73.6285%" y="85" width="0.0481%" height="15" fill="rgb(231,13,6)" fg:x="3060" fg:w="2"/><text x="73.8785%" y="95.50"></text></g><g><title>rust_obj_parser`core::num::_&lt;impl core::str::traits::FromStr for u64&gt;::from_str (140 samples, 3.37%)</title><rect x="73.6766%" y="149" width="3.3686%" height="15" fill="rgb(207,181,40)" fg:x="3062" fg:w="140"/><text x="73.9266%" y="159.50">rus..</text></g><g><title>rust_obj_parser`rust_obj_parser::parser::face (1,051 samples, 25.29%)</title><rect x="55.0048%" y="181" width="25.2887%" height="15" fill="rgb(254,173,49)" fg:x="2286" fg:w="1051"/><text x="55.2548%" y="191.50">rust_obj_parser`rust_obj_parser::parser:..</text></g><g><title>rust_obj_parser`rust_obj_parser::parser::add_vertex (860 samples, 20.69%)</title><rect x="59.6006%" y="165" width="20.6930%" height="15" fill="rgb(221,1,38)" fg:x="2477" fg:w="860"/><text x="59.8506%" y="175.50">rust_obj_parser`rust_obj_parser::..</text></g><g><title>rust_obj_parser`core::str::iter::SplitInternal&lt;P&gt;::next (135 samples, 3.25%)</title><rect x="77.0452%" y="149" width="3.2483%" height="15" fill="rgb(206,124,46)" fg:x="3202" fg:w="135"/><text x="77.2952%" y="159.50">rus..</text></g><g><title>rust_obj_parser`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (200 samples, 4.81%)</title><rect x="80.7748%" y="165" width="4.8123%" height="15" fill="rgb(249,21,11)" fg:x="3357" fg:w="200"/><text x="81.0248%" y="175.50">rust_o..</text></g><g><title>rust_obj_parser`&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (12 samples, 0.29%)</title><rect x="85.5871%" y="165" width="0.2887%" height="15" fill="rgb(222,201,40)" fg:x="3557" fg:w="12"/><text x="85.8371%" y="175.50"></text></g><g><title>rust_obj_parser`&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::short_fast_pow10 (6 samples, 0.14%)</title><rect x="85.8758%" y="165" width="0.1444%" height="15" fill="rgb(235,61,29)" fg:x="3569" fg:w="6"/><text x="86.1258%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.02%)</title><rect x="86.0443%" y="85" width="0.0241%" height="15" fill="rgb(219,207,3)" fg:x="3576" fg:w="1"/><text x="86.2943%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.07%)</title><rect x="86.0443%" y="117" width="0.0722%" height="15" fill="rgb(222,56,46)" fg:x="3576" fg:w="3"/><text x="86.2943%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.07%)</title><rect x="86.0443%" y="101" width="0.0722%" height="15" fill="rgb(239,76,54)" fg:x="3576" fg:w="3"/><text x="86.2943%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="86.0683%" y="85" width="0.0481%" height="15" fill="rgb(231,124,27)" fg:x="3577" fg:w="2"/><text x="86.3183%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="86.0924%" y="69" width="0.0241%" height="15" fill="rgb(249,195,6)" fg:x="3578" fg:w="1"/><text x="86.3424%" y="79.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.14%)</title><rect x="86.0202%" y="165" width="0.1444%" height="15" fill="rgb(237,174,47)" fg:x="3575" fg:w="6"/><text x="86.2702%" y="175.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (6 samples, 0.14%)</title><rect x="86.0202%" y="149" width="0.1444%" height="15" fill="rgb(206,201,31)" fg:x="3575" fg:w="6"/><text x="86.2702%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.12%)</title><rect x="86.0443%" y="133" width="0.1203%" height="15" fill="rgb(231,57,52)" fg:x="3576" fg:w="5"/><text x="86.2943%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.05%)</title><rect x="86.1165%" y="117" width="0.0481%" height="15" fill="rgb(248,177,22)" fg:x="3579" fg:w="2"/><text x="86.3665%" y="127.50"></text></g><g><title>rust_obj_parser`&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (36 samples, 0.87%)</title><rect x="95.5727%" y="149" width="0.8662%" height="15" fill="rgb(215,211,37)" fg:x="3972" fg:w="36"/><text x="95.8227%" y="159.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::extract_sign (15 samples, 0.36%)</title><rect x="96.4389%" y="149" width="0.3609%" height="15" fill="rgb(241,128,51)" fg:x="4008" fg:w="15"/><text x="96.6889%" y="159.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::dec2flt (515 samples, 12.39%)</title><rect x="86.1646%" y="165" width="12.3917%" height="15" fill="rgb(227,165,31)" fg:x="3581" fg:w="515"/><text x="86.4146%" y="175.50">rust_obj_parser`cor..</text></g><g><title>rust_obj_parser`core::num::dec2flt::parse::parse_decimal (73 samples, 1.76%)</title><rect x="96.7998%" y="149" width="1.7565%" height="15" fill="rgb(228,167,24)" fg:x="4023" fg:w="73"/><text x="97.0498%" y="159.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::extract_sign (8 samples, 0.19%)</title><rect x="98.5563%" y="165" width="0.1925%" height="15" fill="rgb(228,143,12)" fg:x="4096" fg:w="8"/><text x="98.8063%" y="175.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::vertex (771 samples, 18.55%)</title><rect x="80.2936%" y="181" width="18.5515%" height="15" fill="rgb(249,149,8)" fg:x="3337" fg:w="771"/><text x="80.5436%" y="191.50">rust_obj_parser`rust_obj_pars..</text></g><g><title>rust_obj_parser`core::num::dec2flt::parse::parse_decimal (4 samples, 0.10%)</title><rect x="98.7488%" y="165" width="0.0962%" height="15" fill="rgb(243,35,44)" fg:x="4104" fg:w="4"/><text x="98.9988%" y="175.50"></text></g><g><title>rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace (3,540 samples, 85.18%)</title><rect x="13.7392%" y="197" width="85.1781%" height="15" fill="rgb(246,89,9)" fg:x="571" fg:w="3540"/><text x="13.9892%" y="207.50">rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_obj_parser`std::sync::mpsc::Sender&lt;T&gt;::send (3 samples, 0.07%)</title><rect x="98.8450%" y="181" width="0.0722%" height="15" fill="rgb(233,213,13)" fg:x="4108" fg:w="3"/><text x="99.0950%" y="191.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::send (3 samples, 0.07%)</title><rect x="98.8450%" y="165" width="0.0722%" height="15" fill="rgb(233,141,41)" fg:x="4108" fg:w="3"/><text x="99.0950%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="98.8691%" y="149" width="0.0481%" height="15" fill="rgb(239,167,4)" fg:x="4109" fg:w="2"/><text x="99.1191%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="98.8691%" y="133" width="0.0481%" height="15" fill="rgb(209,217,16)" fg:x="4109" fg:w="2"/><text x="99.1191%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="98.8691%" y="117" width="0.0481%" height="15" fill="rgb(219,88,35)" fg:x="4109" fg:w="2"/><text x="99.1191%" y="127.50"></text></g><g><title>libdyld.dylib`_tlv_atexit (1 samples, 0.02%)</title><rect x="98.9413%" y="181" width="0.0241%" height="15" fill="rgb(220,193,23)" fg:x="4112" fg:w="1"/><text x="99.1913%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.0375%" y="133" width="0.0241%" height="15" fill="rgb(230,90,52)" fg:x="4116" fg:w="1"/><text x="99.2875%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.0375%" y="117" width="0.0241%" height="15" fill="rgb(252,106,19)" fg:x="4116" fg:w="1"/><text x="99.2875%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="99.0135%" y="149" width="0.0722%" height="15" fill="rgb(206,74,20)" fg:x="4115" fg:w="3"/><text x="99.2635%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.0616%" y="133" width="0.0241%" height="15" fill="rgb(230,138,44)" fg:x="4117" fg:w="1"/><text x="99.3116%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.14%)</title><rect x="98.9654%" y="181" width="0.1444%" height="15" fill="rgb(235,182,43)" fg:x="4113" fg:w="6"/><text x="99.2154%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_allocate_and_initialize_for_key (5 samples, 0.12%)</title><rect x="98.9894%" y="165" width="0.1203%" height="15" fill="rgb(242,16,51)" fg:x="4114" fg:w="5"/><text x="99.2394%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="99.0857%" y="149" width="0.0241%" height="15" fill="rgb(248,9,4)" fg:x="4118" fg:w="1"/><text x="99.3357%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.1338%" y="149" width="0.0241%" height="15" fill="rgb(210,31,22)" fg:x="4120" fg:w="1"/><text x="99.3838%" y="159.50"></text></g><g><title>rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}} (3,558 samples, 85.61%)</title><rect x="13.5707%" y="213" width="85.6112%" height="15" fill="rgb(239,54,39)" fg:x="564" fg:w="3558"/><text x="13.8207%" y="223.50">rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_obj_parser`std::sys_common::thread_info::set (11 samples, 0.26%)</title><rect x="98.9172%" y="197" width="0.2647%" height="15" fill="rgb(230,99,41)" fg:x="4111" fg:w="11"/><text x="99.1672%" y="207.50"></text></g><g><title>rust_obj_parser`std::thread::local::fast::Key&lt;T&gt;::try_initialize (3 samples, 0.07%)</title><rect x="99.1097%" y="181" width="0.0722%" height="15" fill="rgb(253,106,12)" fg:x="4119" fg:w="3"/><text x="99.3597%" y="191.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.05%)</title><rect x="99.1338%" y="165" width="0.0481%" height="15" fill="rgb(213,46,41)" fg:x="4120" fg:w="2"/><text x="99.3838%" y="175.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.1578%" y="149" width="0.0241%" height="15" fill="rgb(215,133,35)" fg:x="4121" fg:w="1"/><text x="99.4078%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.1578%" y="133" width="0.0241%" height="15" fill="rgb(213,28,5)" fg:x="4121" fg:w="1"/><text x="99.4078%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.1578%" y="117" width="0.0241%" height="15" fill="rgb(215,77,49)" fg:x="4121" fg:w="1"/><text x="99.4078%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="99.1578%" y="101" width="0.0241%" height="15" fill="rgb(248,100,22)" fg:x="4121" fg:w="1"/><text x="99.4078%" y="111.50"></text></g><g><title>all (4,156 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(208,67,9)" fg:x="0" fg:w="4156"/><text x="0.2500%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (3,785 samples, 91.07%)</title><rect x="8.9269%" y="261" width="91.0731%" height="15" fill="rgb(219,133,21)" fg:x="371" fg:w="3785"/><text x="9.1769%" y="271.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (3,708 samples, 89.22%)</title><rect x="10.7796%" y="245" width="89.2204%" height="15" fill="rgb(246,46,29)" fg:x="448" fg:w="3708"/><text x="11.0296%" y="255.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::new::thread_start (3,620 samples, 87.10%)</title><rect x="12.8970%" y="229" width="87.1030%" height="15" fill="rgb(246,185,52)" fg:x="536" fg:w="3620"/><text x="13.1470%" y="239.50">rust_obj_parser`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_obj_parser`std::sys::unix::stack_overflow::imp::make_handler (34 samples, 0.82%)</title><rect x="99.1819%" y="213" width="0.8181%" height="15" fill="rgb(252,136,11)" fg:x="4122" fg:w="34"/><text x="99.4319%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (22 samples, 0.53%)</title><rect x="99.4706%" y="197" width="0.5294%" height="15" fill="rgb(219,138,53)" fg:x="4134" fg:w="22"/><text x="99.7206%" y="207.50"></text></g></svg></svg>