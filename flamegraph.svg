<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="3956"><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.03%)</title><rect x="0.0000%" y="245" width="0.0253%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.05%)</title><rect x="0.0253%" y="165" width="0.0506%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.2753%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="0.0758%" y="149" width="0.0253%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.3258%" y="159.50"></text></g><g><title>rust_obj_parser`&lt;alloc::string::String as core::clone::Clone&gt;::clone (13 samples, 0.33%)</title><rect x="0.0758%" y="165" width="0.3286%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="13"/><text x="0.3258%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (12 samples, 0.30%)</title><rect x="0.1011%" y="149" width="0.3033%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="12"/><text x="0.3511%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.18%)</title><rect x="0.5056%" y="149" width="0.1769%" height="15" fill="rgb(232,128,0)" fg:x="20" fg:w="7"/><text x="0.7556%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="0.6825%" y="149" width="0.0253%" height="15" fill="rgb(207,160,47)" fg:x="27" fg:w="1"/><text x="0.9325%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="0.6825%" y="133" width="0.0253%" height="15" fill="rgb(228,23,34)" fg:x="27" fg:w="1"/><text x="0.9325%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="0.6825%" y="117" width="0.0253%" height="15" fill="rgb(218,30,26)" fg:x="27" fg:w="1"/><text x="0.9325%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="0.7078%" y="149" width="0.0253%" height="15" fill="rgb(220,122,19)" fg:x="28" fg:w="1"/><text x="0.9578%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.05%)</title><rect x="0.7331%" y="149" width="0.0506%" height="15" fill="rgb(250,228,42)" fg:x="29" fg:w="2"/><text x="0.9831%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="0.7583%" y="133" width="0.0253%" height="15" fill="rgb(240,193,28)" fg:x="30" fg:w="1"/><text x="1.0083%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="0.7583%" y="117" width="0.0253%" height="15" fill="rgb(216,20,37)" fg:x="30" fg:w="1"/><text x="1.0083%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.28%)</title><rect x="0.7836%" y="149" width="0.2781%" height="15" fill="rgb(206,188,39)" fg:x="31" fg:w="11"/><text x="1.0336%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1.0617%" y="133" width="0.0253%" height="15" fill="rgb(217,207,13)" fg:x="42" fg:w="1"/><text x="1.3117%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1.0617%" y="117" width="0.0253%" height="15" fill="rgb(231,73,38)" fg:x="42" fg:w="1"/><text x="1.3117%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (1 samples, 0.03%)</title><rect x="1.0617%" y="101" width="0.0253%" height="15" fill="rgb(225,20,46)" fg:x="42" fg:w="1"/><text x="1.3117%" y="111.50"></text></g><g><title>rust_obj_parser`&lt;alloc::string::String as core::clone::Clone&gt;::clone (15 samples, 0.38%)</title><rect x="1.0617%" y="149" width="0.3792%" height="15" fill="rgb(210,31,41)" fg:x="42" fg:w="15"/><text x="1.3117%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (14 samples, 0.35%)</title><rect x="1.0870%" y="133" width="0.3539%" height="15" fill="rgb(221,200,47)" fg:x="43" fg:w="14"/><text x="1.3370%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="1.4661%" y="133" width="0.0253%" height="15" fill="rgb(226,26,5)" fg:x="58" fg:w="1"/><text x="1.7161%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="1.4661%" y="117" width="0.0253%" height="15" fill="rgb(249,33,26)" fg:x="58" fg:w="1"/><text x="1.7161%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="1.4661%" y="101" width="0.0253%" height="15" fill="rgb(235,183,28)" fg:x="58" fg:w="1"/><text x="1.7161%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="1.5672%" y="101" width="0.0506%" height="15" fill="rgb(221,5,38)" fg:x="62" fg:w="2"/><text x="1.8172%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="1.5925%" y="85" width="0.0253%" height="15" fill="rgb(247,18,42)" fg:x="63" fg:w="1"/><text x="1.8425%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="1.5925%" y="69" width="0.0253%" height="15" fill="rgb(241,131,45)" fg:x="63" fg:w="1"/><text x="1.8425%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1.6178%" y="101" width="0.0253%" height="15" fill="rgb(249,31,29)" fg:x="64" fg:w="1"/><text x="1.8678%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (30 samples, 0.76%)</title><rect x="1.6936%" y="85" width="0.7583%" height="15" fill="rgb(225,111,53)" fg:x="67" fg:w="30"/><text x="1.9436%" y="95.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::WaitToken::wait (39 samples, 0.99%)</title><rect x="1.4914%" y="117" width="0.9858%" height="15" fill="rgb(238,160,17)" fg:x="59" fg:w="39"/><text x="1.7414%" y="127.50"></text></g><g><title>rust_obj_parser`std::thread::park (33 samples, 0.83%)</title><rect x="1.6431%" y="101" width="0.8342%" height="15" fill="rgb(214,148,48)" fg:x="65" fg:w="33"/><text x="1.8931%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.03%)</title><rect x="2.4520%" y="85" width="0.0253%" height="15" fill="rgb(232,36,49)" fg:x="97" fg:w="1"/><text x="2.7020%" y="95.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::tokens (1 samples, 0.03%)</title><rect x="2.4772%" y="117" width="0.0253%" height="15" fill="rgb(209,103,24)" fg:x="98" fg:w="1"/><text x="2.7272%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="2.4772%" y="101" width="0.0253%" height="15" fill="rgb(229,88,8)" fg:x="98" fg:w="1"/><text x="2.7272%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="2.4772%" y="85" width="0.0253%" height="15" fill="rgb(213,181,19)" fg:x="98" fg:w="1"/><text x="2.7272%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="2.4772%" y="69" width="0.0253%" height="15" fill="rgb(254,191,54)" fg:x="98" fg:w="1"/><text x="2.7272%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="2.5025%" y="85" width="0.0253%" height="15" fill="rgb(241,83,37)" fg:x="99" fg:w="1"/><text x="2.7525%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="2.5278%" y="85" width="0.0253%" height="15" fill="rgb(233,36,39)" fg:x="100" fg:w="1"/><text x="2.7778%" y="95.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 1.21%)</title><rect x="1.4408%" y="149" width="1.2133%" height="15" fill="rgb(226,3,54)" fg:x="57" fg:w="48"/><text x="1.6908%" y="159.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::recv (46 samples, 1.16%)</title><rect x="1.4914%" y="133" width="1.1628%" height="15" fill="rgb(245,192,40)" fg:x="59" fg:w="46"/><text x="1.7414%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::try_recv (6 samples, 0.15%)</title><rect x="2.5025%" y="117" width="0.1517%" height="15" fill="rgb(238,167,29)" fg:x="99" fg:w="6"/><text x="2.7525%" y="127.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::pop (6 samples, 0.15%)</title><rect x="2.5025%" y="101" width="0.1517%" height="15" fill="rgb(232,182,51)" fg:x="99" fg:w="6"/><text x="2.7525%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.10%)</title><rect x="2.5531%" y="85" width="0.1011%" height="15" fill="rgb(231,60,39)" fg:x="101" fg:w="4"/><text x="2.8031%" y="95.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.10%)</title><rect x="2.6542%" y="149" width="0.1011%" height="15" fill="rgb(208,69,12)" fg:x="105" fg:w="4"/><text x="2.9042%" y="159.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::new (2 samples, 0.05%)</title><rect x="2.7048%" y="133" width="0.0506%" height="15" fill="rgb(235,93,37)" fg:x="107" fg:w="2"/><text x="2.9548%" y="143.50"></text></g><g><title>rust_obj_parser`std::sys_common::mutex::MovableMutex::new (2 samples, 0.05%)</title><rect x="2.7048%" y="117" width="0.0506%" height="15" fill="rgb(213,116,39)" fg:x="107" fg:w="2"/><text x="2.9548%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="2.7048%" y="101" width="0.0506%" height="15" fill="rgb(222,207,29)" fg:x="107" fg:w="2"/><text x="2.9548%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="2.7048%" y="85" width="0.0506%" height="15" fill="rgb(206,96,30)" fg:x="107" fg:w="2"/><text x="2.9548%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="2.7048%" y="69" width="0.0506%" height="15" fill="rgb(218,138,4)" fg:x="107" fg:w="2"/><text x="2.9548%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="2.7553%" y="117" width="0.0253%" height="15" fill="rgb(250,191,14)" fg:x="109" fg:w="1"/><text x="3.0053%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="2.7553%" y="101" width="0.0253%" height="15" fill="rgb(239,60,40)" fg:x="109" fg:w="1"/><text x="3.0053%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (1 samples, 0.03%)</title><rect x="2.7553%" y="85" width="0.0253%" height="15" fill="rgb(206,27,48)" fg:x="109" fg:w="1"/><text x="3.0053%" y="95.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.05%)</title><rect x="2.7553%" y="149" width="0.0506%" height="15" fill="rgb(225,35,8)" fg:x="109" fg:w="2"/><text x="3.0053%" y="159.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="2.7553%" y="133" width="0.0506%" height="15" fill="rgb(250,213,24)" fg:x="109" fg:w="2"/><text x="3.0053%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="2.7806%" y="117" width="0.0253%" height="15" fill="rgb(247,123,22)" fg:x="110" fg:w="1"/><text x="3.0306%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="2.7806%" y="101" width="0.0253%" height="15" fill="rgb(231,138,38)" fg:x="110" fg:w="1"/><text x="3.0306%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="2.7806%" y="85" width="0.0253%" height="15" fill="rgb(231,145,46)" fg:x="110" fg:w="1"/><text x="3.0306%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="2.7806%" y="69" width="0.0253%" height="15" fill="rgb(251,118,11)" fg:x="110" fg:w="1"/><text x="3.0306%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (1 samples, 0.03%)</title><rect x="2.7806%" y="53" width="0.0253%" height="15" fill="rgb(217,147,25)" fg:x="110" fg:w="1"/><text x="3.0306%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.05%)</title><rect x="2.8059%" y="133" width="0.0506%" height="15" fill="rgb(247,81,37)" fg:x="111" fg:w="2"/><text x="3.0559%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.03%)</title><rect x="2.8564%" y="133" width="0.0253%" height="15" fill="rgb(209,12,38)" fg:x="113" fg:w="1"/><text x="3.1064%" y="143.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.10%)</title><rect x="2.8059%" y="149" width="0.1011%" height="15" fill="rgb(227,1,9)" fg:x="111" fg:w="4"/><text x="3.0559%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="2.8817%" y="133" width="0.0253%" height="15" fill="rgb(248,47,43)" fg:x="114" fg:w="1"/><text x="3.1317%" y="143.50"></text></g><g><title>rust_obj_parser`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="2.9070%" y="133" width="0.0253%" height="15" fill="rgb(221,10,30)" fg:x="115" fg:w="1"/><text x="3.1570%" y="143.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.03%)</title><rect x="2.9070%" y="117" width="0.0253%" height="15" fill="rgb(210,229,1)" fg:x="115" fg:w="1"/><text x="3.1570%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="2.9070%" y="101" width="0.0253%" height="15" fill="rgb(222,148,37)" fg:x="115" fg:w="1"/><text x="3.1570%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="2.9070%" y="85" width="0.0253%" height="15" fill="rgb(234,67,33)" fg:x="115" fg:w="1"/><text x="3.1570%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="2.9070%" y="69" width="0.0253%" height="15" fill="rgb(247,98,35)" fg:x="115" fg:w="1"/><text x="3.1570%" y="79.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::Sender&lt;T&gt;::send (7 samples, 0.18%)</title><rect x="2.9323%" y="117" width="0.1769%" height="15" fill="rgb(247,138,52)" fg:x="116" fg:w="7"/><text x="3.1823%" y="127.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::stream::Packet&lt;T&gt;::send (7 samples, 0.18%)</title><rect x="2.9323%" y="101" width="0.1769%" height="15" fill="rgb(213,79,30)" fg:x="116" fg:w="7"/><text x="3.1823%" y="111.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::SignalToken::signal (7 samples, 0.18%)</title><rect x="2.9323%" y="85" width="0.1769%" height="15" fill="rgb(246,177,23)" fg:x="116" fg:w="7"/><text x="3.1823%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (7 samples, 0.18%)</title><rect x="2.9323%" y="69" width="0.1769%" height="15" fill="rgb(230,62,27)" fg:x="116" fg:w="7"/><text x="3.1823%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="3.1092%" y="101" width="0.0253%" height="15" fill="rgb(216,154,8)" fg:x="123" fg:w="1"/><text x="3.3592%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="3.1092%" y="85" width="0.0253%" height="15" fill="rgb(244,35,45)" fg:x="123" fg:w="1"/><text x="3.3592%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="3.1345%" y="85" width="0.0253%" height="15" fill="rgb(251,115,12)" fg:x="124" fg:w="1"/><text x="3.3845%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="3.1345%" y="69" width="0.0253%" height="15" fill="rgb(240,54,50)" fg:x="124" fg:w="1"/><text x="3.3845%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="3.1345%" y="53" width="0.0253%" height="15" fill="rgb(233,84,52)" fg:x="124" fg:w="1"/><text x="3.3845%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.05%)</title><rect x="3.1598%" y="85" width="0.0506%" height="15" fill="rgb(207,117,47)" fg:x="125" fg:w="2"/><text x="3.4098%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.05%)</title><rect x="3.1598%" y="69" width="0.0506%" height="15" fill="rgb(249,43,39)" fg:x="125" fg:w="2"/><text x="3.4098%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="3.1850%" y="53" width="0.0253%" height="15" fill="rgb(209,38,44)" fg:x="126" fg:w="1"/><text x="3.4350%" y="63.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.10%)</title><rect x="3.1345%" y="101" width="0.1011%" height="15" fill="rgb(236,212,23)" fg:x="124" fg:w="4"/><text x="3.3845%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="3.2103%" y="85" width="0.0253%" height="15" fill="rgb(242,79,21)" fg:x="127" fg:w="1"/><text x="3.4603%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (7 samples, 0.18%)</title><rect x="3.2356%" y="85" width="0.1769%" height="15" fill="rgb(211,96,35)" fg:x="128" fg:w="7"/><text x="3.4856%" y="95.50"></text></g><g><title>rust_obj_parser`core::ptr::drop_in_place&lt;rust_obj_parser::parser::ThreadPool&gt; (55 samples, 1.39%)</title><rect x="2.9070%" y="149" width="1.3903%" height="15" fill="rgb(253,215,40)" fg:x="115" fg:w="55"/><text x="3.1570%" y="159.50"></text></g><g><title>rust_obj_parser`&lt;rust_obj_parser::parser::ThreadPool as core::ops::drop::Drop&gt;::drop (54 samples, 1.37%)</title><rect x="2.9323%" y="133" width="1.3650%" height="15" fill="rgb(211,81,21)" fg:x="116" fg:w="54"/><text x="3.1823%" y="143.50"></text></g><g><title>rust_obj_parser`std::thread::JoinHandle&lt;T&gt;::join (47 samples, 1.19%)</title><rect x="3.1092%" y="117" width="1.1881%" height="15" fill="rgb(208,190,38)" fg:x="123" fg:w="47"/><text x="3.3592%" y="127.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::join (42 samples, 1.06%)</title><rect x="3.2356%" y="101" width="1.0617%" height="15" fill="rgb(235,213,38)" fg:x="128" fg:w="42"/><text x="3.4856%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_join (35 samples, 0.88%)</title><rect x="3.4125%" y="85" width="0.8847%" height="15" fill="rgb(237,122,38)" fg:x="135" fg:w="35"/><text x="3.6625%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_deallocate (32 samples, 0.81%)</title><rect x="3.4884%" y="69" width="0.8089%" height="15" fill="rgb(244,218,35)" fg:x="138" fg:w="32"/><text x="3.7384%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (32 samples, 0.81%)</title><rect x="3.4884%" y="53" width="0.8089%" height="15" fill="rgb(240,68,47)" fg:x="138" fg:w="32"/><text x="3.7384%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="4.2973%" y="133" width="0.0253%" height="15" fill="rgb(210,16,53)" fg:x="170" fg:w="1"/><text x="4.5473%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="4.3225%" y="133" width="0.0253%" height="15" fill="rgb(235,124,12)" fg:x="171" fg:w="1"/><text x="4.5725%" y="143.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::ObjectInfo::extend (6 samples, 0.15%)</title><rect x="4.2973%" y="149" width="0.1517%" height="15" fill="rgb(224,169,11)" fg:x="170" fg:w="6"/><text x="4.5473%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.10%)</title><rect x="4.3478%" y="133" width="0.1011%" height="15" fill="rgb(250,166,2)" fg:x="172" fg:w="4"/><text x="4.5978%" y="143.50"></text></g><g><title>rust_obj_parser`__rdl_alloc (1 samples, 0.03%)</title><rect x="4.4995%" y="133" width="0.0253%" height="15" fill="rgb(242,216,29)" fg:x="178" fg:w="1"/><text x="4.7495%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (1 samples, 0.03%)</title><rect x="4.4995%" y="117" width="0.0253%" height="15" fill="rgb(230,116,27)" fg:x="178" fg:w="1"/><text x="4.7495%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (7 samples, 0.18%)</title><rect x="4.5501%" y="117" width="0.1769%" height="15" fill="rgb(228,99,48)" fg:x="180" fg:w="7"/><text x="4.8001%" y="127.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::SignalToken::signal (9 samples, 0.23%)</title><rect x="4.5248%" y="133" width="0.2275%" height="15" fill="rgb(253,11,6)" fg:x="179" fg:w="9"/><text x="4.7748%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (1 samples, 0.03%)</title><rect x="4.7270%" y="117" width="0.0253%" height="15" fill="rgb(247,143,39)" fg:x="187" fg:w="1"/><text x="4.9770%" y="127.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::oneshot::Packet&lt;T&gt;::send (12 samples, 0.30%)</title><rect x="4.7523%" y="133" width="0.3033%" height="15" fill="rgb(236,97,10)" fg:x="188" fg:w="12"/><text x="5.0023%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::SignalToken::signal (12 samples, 0.30%)</title><rect x="4.7523%" y="117" width="0.3033%" height="15" fill="rgb(233,208,19)" fg:x="188" fg:w="12"/><text x="5.0023%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (12 samples, 0.30%)</title><rect x="4.7523%" y="101" width="0.3033%" height="15" fill="rgb(216,164,2)" fg:x="188" fg:w="12"/><text x="5.0023%" y="111.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::spsc_queue::Queue&lt;T,ProducerAddition,ConsumerAddition&gt;::with_additions (2 samples, 0.05%)</title><rect x="5.0556%" y="133" width="0.0506%" height="15" fill="rgb(220,129,5)" fg:x="200" fg:w="2"/><text x="5.3056%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="5.0556%" y="117" width="0.0506%" height="15" fill="rgb(242,17,10)" fg:x="200" fg:w="2"/><text x="5.3056%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="5.0556%" y="101" width="0.0506%" height="15" fill="rgb(242,107,0)" fg:x="200" fg:w="2"/><text x="5.3056%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="5.0556%" y="85" width="0.0506%" height="15" fill="rgb(251,28,31)" fg:x="200" fg:w="2"/><text x="5.3056%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="5.0809%" y="69" width="0.0253%" height="15" fill="rgb(233,223,10)" fg:x="201" fg:w="1"/><text x="5.3309%" y="79.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::Sender&lt;T&gt;::send (27 samples, 0.68%)</title><rect x="4.4489%" y="149" width="0.6825%" height="15" fill="rgb(215,21,27)" fg:x="176" fg:w="27"/><text x="4.6989%" y="159.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::stream::Packet&lt;T&gt;::send (1 samples, 0.03%)</title><rect x="5.1062%" y="133" width="0.0253%" height="15" fill="rgb(232,23,21)" fg:x="202" fg:w="1"/><text x="5.3562%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="5.1062%" y="117" width="0.0253%" height="15" fill="rgb(244,5,23)" fg:x="202" fg:w="1"/><text x="5.3562%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="5.1062%" y="101" width="0.0253%" height="15" fill="rgb(226,81,46)" fg:x="202" fg:w="1"/><text x="5.3562%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="5.1062%" y="85" width="0.0253%" height="15" fill="rgb(247,70,30)" fg:x="202" fg:w="1"/><text x="5.3562%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="5.1062%" y="69" width="0.0253%" height="15" fill="rgb(212,68,19)" fg:x="202" fg:w="1"/><text x="5.3562%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="5.1314%" y="133" width="0.0253%" height="15" fill="rgb(240,187,13)" fg:x="203" fg:w="1"/><text x="5.3814%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (11 samples, 0.28%)</title><rect x="5.1567%" y="117" width="0.2781%" height="15" fill="rgb(223,113,26)" fg:x="204" fg:w="11"/><text x="5.4067%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (4 samples, 0.10%)</title><rect x="5.8140%" y="101" width="0.1011%" height="15" fill="rgb(206,192,2)" fg:x="230" fg:w="4"/><text x="6.0640%" y="111.50"></text></g><g><title>0x1 (238 samples, 6.02%)</title><rect x="0.0000%" y="277" width="6.0162%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="238"/><text x="0.2500%" y="287.50">0x1</text></g><g><title>libdyld.dylib`start (238 samples, 6.02%)</title><rect x="0.0000%" y="261" width="6.0162%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="238"/><text x="0.2500%" y="271.50">libdyld...</text></g><g><title>rust_obj_parser`main (237 samples, 5.99%)</title><rect x="0.0253%" y="245" width="5.9909%" height="15" fill="rgb(224,114,35)" fg:x="1" fg:w="237"/><text x="0.2753%" y="255.50">rust_obj..</text></g><g><title>rust_obj_parser`std::rt::lang_start_internal (237 samples, 5.99%)</title><rect x="0.0253%" y="229" width="5.9909%" height="15" fill="rgb(245,159,27)" fg:x="1" fg:w="237"/><text x="0.2753%" y="239.50">rust_obj..</text></g><g><title>rust_obj_parser`std::rt::lang_start::_{{closure}} (237 samples, 5.99%)</title><rect x="0.0253%" y="213" width="5.9909%" height="15" fill="rgb(245,172,44)" fg:x="1" fg:w="237"/><text x="0.2753%" y="223.50">rust_obj..</text></g><g><title>rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace (237 samples, 5.99%)</title><rect x="0.0253%" y="197" width="5.9909%" height="15" fill="rgb(236,23,11)" fg:x="1" fg:w="237"/><text x="0.2753%" y="207.50">rust_obj..</text></g><g><title>rust_obj_parser`rust_obj_parser::main (237 samples, 5.99%)</title><rect x="0.0253%" y="181" width="5.9909%" height="15" fill="rgb(205,117,38)" fg:x="1" fg:w="237"/><text x="0.2753%" y="191.50">rust_obj..</text></g><g><title>rust_obj_parser`rust_obj_parser::parser::parse_obj_threaded (222 samples, 5.61%)</title><rect x="0.4044%" y="165" width="5.6117%" height="15" fill="rgb(237,72,25)" fg:x="16" fg:w="222"/><text x="0.6544%" y="175.50">rust_ob..</text></g><g><title>rust_obj_parser`std::thread::spawn (35 samples, 0.88%)</title><rect x="5.1314%" y="149" width="0.8847%" height="15" fill="rgb(244,70,9)" fg:x="203" fg:w="35"/><text x="5.3814%" y="159.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::new (34 samples, 0.86%)</title><rect x="5.1567%" y="133" width="0.8595%" height="15" fill="rgb(217,125,39)" fg:x="204" fg:w="34"/><text x="5.4067%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_create (23 samples, 0.58%)</title><rect x="5.4348%" y="117" width="0.5814%" height="15" fill="rgb(235,36,10)" fg:x="215" fg:w="23"/><text x="5.6848%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_protect_trap (4 samples, 0.10%)</title><rect x="5.9151%" y="101" width="0.1011%" height="15" fill="rgb(251,123,47)" fg:x="234" fg:w="4"/><text x="6.1651%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (33 samples, 0.83%)</title><rect x="6.0162%" y="277" width="0.8342%" height="15" fill="rgb(221,13,13)" fg:x="238" fg:w="33"/><text x="6.2662%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.03%)</title><rect x="6.8504%" y="277" width="0.0253%" height="15" fill="rgb(238,131,9)" fg:x="271" fg:w="1"/><text x="7.1004%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__thread_selfid (1 samples, 0.03%)</title><rect x="7.3812%" y="261" width="0.0253%" height="15" fill="rgb(211,50,8)" fg:x="292" fg:w="1"/><text x="7.6312%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__disable_threadsignal (1 samples, 0.03%)</title><rect x="7.4570%" y="245" width="0.0253%" height="15" fill="rgb(245,182,24)" fg:x="295" fg:w="1"/><text x="7.7070%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (28 samples, 0.71%)</title><rect x="7.4823%" y="245" width="0.7078%" height="15" fill="rgb(242,14,37)" fg:x="296" fg:w="28"/><text x="7.7323%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__sigaltstack (6 samples, 0.15%)</title><rect x="8.1901%" y="245" width="0.1517%" height="15" fill="rgb(246,228,12)" fg:x="324" fg:w="6"/><text x="8.4401%" y="255.50"></text></g><g><title>libdyld.dylib`DYLD-STUB$$pthread_getspecific (1 samples, 0.03%)</title><rect x="8.3670%" y="213" width="0.0253%" height="15" fill="rgb(213,55,15)" fg:x="331" fg:w="1"/><text x="8.6170%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (3 samples, 0.08%)</title><rect x="8.3418%" y="245" width="0.0758%" height="15" fill="rgb(209,9,3)" fg:x="330" fg:w="3"/><text x="8.5918%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (3 samples, 0.08%)</title><rect x="8.3418%" y="229" width="0.0758%" height="15" fill="rgb(230,59,30)" fg:x="330" fg:w="3"/><text x="8.5918%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_finalize_list (1 samples, 0.03%)</title><rect x="8.3923%" y="213" width="0.0253%" height="15" fill="rgb(209,121,21)" fg:x="332" fg:w="1"/><text x="8.6423%" y="223.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread_local_dtor::register_dtor::run_dtors (1 samples, 0.03%)</title><rect x="8.3923%" y="197" width="0.0253%" height="15" fill="rgb(220,109,13)" fg:x="332" fg:w="1"/><text x="8.6423%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="8.3923%" y="181" width="0.0253%" height="15" fill="rgb(232,18,1)" fg:x="332" fg:w="1"/><text x="8.6423%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="8.3923%" y="165" width="0.0253%" height="15" fill="rgb(215,41,42)" fg:x="332" fg:w="1"/><text x="8.6423%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (25 samples, 0.63%)</title><rect x="8.4176%" y="213" width="0.6320%" height="15" fill="rgb(224,123,36)" fg:x="333" fg:w="25"/><text x="8.6676%" y="223.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (1 samples, 0.03%)</title><rect x="9.0495%" y="213" width="0.0253%" height="15" fill="rgb(240,125,3)" fg:x="358" fg:w="1"/><text x="9.2995%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_join$NOCANCEL (30 samples, 0.76%)</title><rect x="8.4176%" y="245" width="0.7583%" height="15" fill="rgb(205,98,50)" fg:x="333" fg:w="30"/><text x="8.6676%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (30 samples, 0.76%)</title><rect x="8.4176%" y="229" width="0.7583%" height="15" fill="rgb(205,185,37)" fg:x="333" fg:w="30"/><text x="8.6676%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (4 samples, 0.10%)</title><rect x="9.0748%" y="213" width="0.1011%" height="15" fill="rgb(238,207,15)" fg:x="359" fg:w="4"/><text x="9.3248%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (4 samples, 0.10%)</title><rect x="9.0748%" y="197" width="0.1011%" height="15" fill="rgb(213,199,42)" fg:x="359" fg:w="4"/><text x="9.3248%" y="207.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sigaltstack (1 samples, 0.03%)</title><rect x="9.1759%" y="229" width="0.0253%" height="15" fill="rgb(235,201,11)" fg:x="363" fg:w="1"/><text x="9.4259%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (4 samples, 0.10%)</title><rect x="9.2012%" y="229" width="0.1011%" height="15" fill="rgb(207,46,11)" fg:x="364" fg:w="4"/><text x="9.4512%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__sigaltstack (6 samples, 0.15%)</title><rect x="9.3023%" y="229" width="0.1517%" height="15" fill="rgb(241,35,35)" fg:x="368" fg:w="6"/><text x="9.5523%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="9.4540%" y="229" width="0.0253%" height="15" fill="rgb(243,32,47)" fg:x="374" fg:w="1"/><text x="9.7040%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="9.4540%" y="213" width="0.0253%" height="15" fill="rgb(247,202,23)" fg:x="374" fg:w="1"/><text x="9.7040%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="9.4540%" y="197" width="0.0253%" height="15" fill="rgb(219,102,11)" fg:x="374" fg:w="1"/><text x="9.7040%" y="207.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread::guard::current (1 samples, 0.03%)</title><rect x="9.5046%" y="213" width="0.0253%" height="15" fill="rgb(243,110,44)" fg:x="376" fg:w="1"/><text x="9.7546%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_self (1 samples, 0.03%)</title><rect x="9.5046%" y="197" width="0.0253%" height="15" fill="rgb(222,74,54)" fg:x="376" fg:w="1"/><text x="9.7546%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="9.5298%" y="197" width="0.0506%" height="15" fill="rgb(216,99,12)" fg:x="377" fg:w="2"/><text x="9.7798%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.05%)</title><rect x="9.5298%" y="181" width="0.0506%" height="15" fill="rgb(226,22,26)" fg:x="377" fg:w="2"/><text x="9.7798%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.05%)</title><rect x="9.5298%" y="165" width="0.0506%" height="15" fill="rgb(217,163,10)" fg:x="377" fg:w="2"/><text x="9.7798%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="9.5804%" y="165" width="0.0253%" height="15" fill="rgb(213,25,53)" fg:x="379" fg:w="1"/><text x="9.8304%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.05%)</title><rect x="9.5804%" y="197" width="0.0506%" height="15" fill="rgb(252,105,26)" fg:x="379" fg:w="2"/><text x="9.8304%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.05%)</title><rect x="9.5804%" y="181" width="0.0506%" height="15" fill="rgb(220,39,43)" fg:x="379" fg:w="2"/><text x="9.8304%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="9.6057%" y="165" width="0.0253%" height="15" fill="rgb(229,68,48)" fg:x="380" fg:w="1"/><text x="9.8557%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="9.8332%" y="181" width="0.0253%" height="15" fill="rgb(252,8,32)" fg:x="389" fg:w="1"/><text x="10.0832%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.03%)</title><rect x="9.8332%" y="165" width="0.0253%" height="15" fill="rgb(223,20,43)" fg:x="389" fg:w="1"/><text x="10.0832%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="10.0607%" y="165" width="0.0253%" height="15" fill="rgb(229,81,49)" fg:x="398" fg:w="1"/><text x="10.3107%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="10.1365%" y="149" width="0.0253%" height="15" fill="rgb(236,28,36)" fg:x="401" fg:w="1"/><text x="10.3865%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.08%)</title><rect x="10.1618%" y="149" width="0.0758%" height="15" fill="rgb(249,185,26)" fg:x="402" fg:w="3"/><text x="10.4118%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="10.2376%" y="149" width="0.0253%" height="15" fill="rgb(249,174,33)" fg:x="405" fg:w="1"/><text x="10.4876%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (30 samples, 0.76%)</title><rect x="10.3640%" y="133" width="0.7583%" height="15" fill="rgb(233,201,37)" fg:x="410" fg:w="30"/><text x="10.6140%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::WaitToken::wait (42 samples, 1.06%)</title><rect x="10.0859%" y="165" width="1.0617%" height="15" fill="rgb(221,78,26)" fg:x="399" fg:w="42"/><text x="10.3359%" y="175.50"></text></g><g><title>rust_obj_parser`std::thread::park (35 samples, 0.88%)</title><rect x="10.2629%" y="149" width="0.8847%" height="15" fill="rgb(250,127,30)" fg:x="406" fg:w="35"/><text x="10.5129%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.03%)</title><rect x="11.1223%" y="133" width="0.0253%" height="15" fill="rgb(230,49,44)" fg:x="440" fg:w="1"/><text x="11.3723%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.03%)</title><rect x="11.1223%" y="117" width="0.0253%" height="15" fill="rgb(229,67,23)" fg:x="440" fg:w="1"/><text x="11.3723%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="11.1476%" y="149" width="0.0506%" height="15" fill="rgb(249,83,47)" fg:x="441" fg:w="2"/><text x="11.3976%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="11.1476%" y="133" width="0.0506%" height="15" fill="rgb(215,43,3)" fg:x="441" fg:w="2"/><text x="11.3976%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="11.1476%" y="117" width="0.0506%" height="15" fill="rgb(238,154,13)" fg:x="441" fg:w="2"/><text x="11.3976%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.05%)</title><rect x="11.1476%" y="101" width="0.0506%" height="15" fill="rgb(219,56,2)" fg:x="441" fg:w="2"/><text x="11.3976%" y="111.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::oneshot::Packet&lt;T&gt;::recv (54 samples, 1.37%)</title><rect x="9.8584%" y="181" width="1.3650%" height="15" fill="rgb(233,0,4)" fg:x="390" fg:w="54"/><text x="10.1084%" y="191.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::tokens (3 samples, 0.08%)</title><rect x="11.1476%" y="165" width="0.0758%" height="15" fill="rgb(235,30,7)" fg:x="441" fg:w="3"/><text x="11.3976%" y="175.50"></text></g><g><title>rust_obj_parser`std::sys_common::thread_info::ThreadInfo::with::_{{closure}} (1 samples, 0.03%)</title><rect x="11.1982%" y="149" width="0.0253%" height="15" fill="rgb(250,79,13)" fg:x="443" fg:w="1"/><text x="11.4482%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="11.2487%" y="165" width="0.0506%" height="15" fill="rgb(211,146,34)" fg:x="445" fg:w="2"/><text x="11.4987%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="11.2993%" y="165" width="0.0253%" height="15" fill="rgb(228,22,38)" fg:x="447" fg:w="1"/><text x="11.5493%" y="175.50"></text></g><g><title>rust_obj_parser`__rdl_dealloc (1 samples, 0.03%)</title><rect x="11.3246%" y="165" width="0.0253%" height="15" fill="rgb(235,168,5)" fg:x="448" fg:w="1"/><text x="11.5746%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (11 samples, 0.28%)</title><rect x="11.3751%" y="133" width="0.2781%" height="15" fill="rgb(221,155,16)" fg:x="450" fg:w="11"/><text x="11.6251%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::WaitToken::wait (13 samples, 0.33%)</title><rect x="11.3498%" y="165" width="0.3286%" height="15" fill="rgb(215,215,53)" fg:x="449" fg:w="13"/><text x="11.5998%" y="175.50"></text></g><g><title>rust_obj_parser`std::thread::park (13 samples, 0.33%)</title><rect x="11.3498%" y="149" width="0.3286%" height="15" fill="rgb(223,4,10)" fg:x="449" fg:w="13"/><text x="11.5998%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.03%)</title><rect x="11.6532%" y="133" width="0.0253%" height="15" fill="rgb(234,103,6)" fg:x="461" fg:w="1"/><text x="11.9032%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::tokens (1 samples, 0.03%)</title><rect x="11.6785%" y="165" width="0.0253%" height="15" fill="rgb(227,97,0)" fg:x="462" fg:w="1"/><text x="11.9285%" y="175.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 2.17%)</title><rect x="9.6309%" y="197" width="2.1739%" height="15" fill="rgb(234,150,53)" fg:x="381" fg:w="86"/><text x="9.8809%" y="207.50">r..</text></g><g><title>rust_obj_parser`std::sync::mpsc::stream::Packet&lt;T&gt;::recv (23 samples, 0.58%)</title><rect x="11.2235%" y="181" width="0.5814%" height="15" fill="rgb(228,201,54)" fg:x="444" fg:w="23"/><text x="11.4735%" y="191.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::stream::Packet&lt;T&gt;::try_recv (4 samples, 0.10%)</title><rect x="11.7037%" y="165" width="0.1011%" height="15" fill="rgb(222,22,37)" fg:x="463" fg:w="4"/><text x="11.9537%" y="175.50"></text></g><g><title>rust_obj_parser`DYLD-STUB$$memcmp (1 samples, 0.03%)</title><rect x="11.8049%" y="197" width="0.0253%" height="15" fill="rgb(237,53,32)" fg:x="467" fg:w="1"/><text x="12.0549%" y="207.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::dec2flt (7 samples, 0.18%)</title><rect x="11.8301%" y="197" width="0.1769%" height="15" fill="rgb(233,25,53)" fg:x="468" fg:w="7"/><text x="12.0801%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.40%)</title><rect x="23.5844%" y="181" width="0.4044%" height="15" fill="rgb(210,40,34)" fg:x="933" fg:w="16"/><text x="23.8344%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.03%)</title><rect x="23.9889%" y="165" width="0.0253%" height="15" fill="rgb(241,220,44)" fg:x="949" fg:w="1"/><text x="24.2389%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.03%)</title><rect x="24.0647%" y="149" width="0.0253%" height="15" fill="rgb(235,28,35)" fg:x="952" fg:w="1"/><text x="24.3147%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.15%)</title><rect x="23.9889%" y="181" width="0.1517%" height="15" fill="rgb(210,56,17)" fg:x="949" fg:w="6"/><text x="24.2389%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size_try_large (5 samples, 0.13%)</title><rect x="24.0142%" y="165" width="0.1264%" height="15" fill="rgb(224,130,29)" fg:x="950" fg:w="5"/><text x="24.2642%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (2 samples, 0.05%)</title><rect x="24.0900%" y="149" width="0.0506%" height="15" fill="rgb(235,212,8)" fg:x="953" fg:w="2"/><text x="24.3400%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.10%)</title><rect x="24.1405%" y="181" width="0.1011%" height="15" fill="rgb(223,33,50)" fg:x="955" fg:w="4"/><text x="24.3905%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (1 samples, 0.03%)</title><rect x="24.2164%" y="165" width="0.0253%" height="15" fill="rgb(219,149,13)" fg:x="958" fg:w="1"/><text x="24.4664%" y="175.50"></text></g><g><title>rust_obj_parser`&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.76%)</title><rect x="24.2417%" y="181" width="0.7583%" height="15" fill="rgb(250,156,29)" fg:x="959" fg:w="30"/><text x="24.4917%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.88%)</title><rect x="25.0000%" y="181" width="0.8847%" height="15" fill="rgb(216,193,19)" fg:x="989" fg:w="35"/><text x="25.2500%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (16 samples, 0.40%)</title><rect x="25.8847%" y="181" width="0.4044%" height="15" fill="rgb(216,135,14)" fg:x="1024" fg:w="16"/><text x="26.1347%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::short_fast_pow10 (11 samples, 0.28%)</title><rect x="26.2892%" y="181" width="0.2781%" height="15" fill="rgb(241,47,5)" fg:x="1040" fg:w="11"/><text x="26.5392%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="26.6178%" y="149" width="0.0253%" height="15" fill="rgb(233,42,35)" fg:x="1053" fg:w="1"/><text x="26.8678%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="26.6178%" y="133" width="0.0253%" height="15" fill="rgb(231,13,6)" fg:x="1053" fg:w="1"/><text x="26.8678%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="26.6178%" y="117" width="0.0253%" height="15" fill="rgb(207,181,40)" fg:x="1053" fg:w="1"/><text x="26.8678%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.03%)</title><rect x="26.6684%" y="101" width="0.0253%" height="15" fill="rgb(254,173,49)" fg:x="1055" fg:w="1"/><text x="26.9184%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.03%)</title><rect x="26.6936%" y="101" width="0.0253%" height="15" fill="rgb(221,1,38)" fg:x="1056" fg:w="1"/><text x="26.9436%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="26.7189%" y="101" width="0.0253%" height="15" fill="rgb(206,124,46)" fg:x="1057" fg:w="1"/><text x="26.9689%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="26.7189%" y="85" width="0.0253%" height="15" fill="rgb(249,21,11)" fg:x="1057" fg:w="1"/><text x="26.9689%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="26.7442%" y="101" width="0.0253%" height="15" fill="rgb(222,201,40)" fg:x="1058" fg:w="1"/><text x="26.9942%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="26.7442%" y="85" width="0.0253%" height="15" fill="rgb(235,61,29)" fg:x="1058" fg:w="1"/><text x="26.9942%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.20%)</title><rect x="26.6431%" y="133" width="0.2022%" height="15" fill="rgb(219,207,3)" fg:x="1054" fg:w="8"/><text x="26.8931%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.18%)</title><rect x="26.6684%" y="117" width="0.1769%" height="15" fill="rgb(222,56,46)" fg:x="1055" fg:w="7"/><text x="26.9184%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (3 samples, 0.08%)</title><rect x="26.7695%" y="101" width="0.0758%" height="15" fill="rgb(239,76,54)" fg:x="1059" fg:w="3"/><text x="27.0195%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.05%)</title><rect x="26.7947%" y="85" width="0.0506%" height="15" fill="rgb(231,124,27)" fg:x="1060" fg:w="2"/><text x="27.0447%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="26.8453%" y="133" width="0.0253%" height="15" fill="rgb(249,195,6)" fg:x="1062" fg:w="1"/><text x="27.0953%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="26.8453%" y="117" width="0.0253%" height="15" fill="rgb(237,174,47)" fg:x="1062" fg:w="1"/><text x="27.0953%" y="127.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.33%)</title><rect x="26.5672%" y="181" width="0.3286%" height="15" fill="rgb(206,201,31)" fg:x="1051" fg:w="13"/><text x="26.8172%" y="191.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (11 samples, 0.28%)</title><rect x="26.6178%" y="165" width="0.2781%" height="15" fill="rgb(231,57,52)" fg:x="1053" fg:w="11"/><text x="26.8678%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.25%)</title><rect x="26.6431%" y="149" width="0.2528%" height="15" fill="rgb(248,177,22)" fg:x="1054" fg:w="10"/><text x="26.8931%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="26.8706%" y="133" width="0.0253%" height="15" fill="rgb(215,211,37)" fg:x="1063" fg:w="1"/><text x="27.1206%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (43 samples, 1.09%)</title><rect x="33.4681%" y="165" width="1.0870%" height="15" fill="rgb(241,128,51)" fg:x="1324" fg:w="43"/><text x="33.7181%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (86 samples, 2.17%)</title><rect x="43.9838%" y="149" width="2.1739%" height="15" fill="rgb(227,165,31)" fg:x="1740" fg:w="86"/><text x="44.2338%" y="159.50">l..</text></g><g><title>rust_obj_parser`&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,149 samples, 29.04%)</title><rect x="34.5551%" y="165" width="29.0445%" height="15" fill="rgb(228,167,24)" fg:x="1367" fg:w="1149"/><text x="34.8051%" y="175.50">rust_obj_parser`&lt;core::str::iter::Lines as core..</text></g><g><title>rust_obj_parser`core::slice::memchr::memchr_general_case (690 samples, 17.44%)</title><rect x="46.1577%" y="149" width="17.4419%" height="15" fill="rgb(228,143,12)" fg:x="1826" fg:w="690"/><text x="46.4077%" y="159.50">rust_obj_parser`core::slice..</text></g><g><title>rust_obj_parser`DYLD-STUB$$memcmp (13 samples, 0.33%)</title><rect x="63.5996%" y="165" width="0.3286%" height="15" fill="rgb(249,149,8)" fg:x="2516" fg:w="13"/><text x="63.8496%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="64.0546%" y="133" width="0.0253%" height="15" fill="rgb(243,35,44)" fg:x="2534" fg:w="1"/><text x="64.3046%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="64.0546%" y="117" width="0.0253%" height="15" fill="rgb(246,89,9)" fg:x="2534" fg:w="1"/><text x="64.3046%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="64.0799%" y="133" width="0.0253%" height="15" fill="rgb(233,213,13)" fg:x="2535" fg:w="1"/><text x="64.3299%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="64.1052%" y="133" width="0.0253%" height="15" fill="rgb(233,141,41)" fg:x="2536" fg:w="1"/><text x="64.3552%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.03%)</title><rect x="64.2063%" y="101" width="0.0253%" height="15" fill="rgb(239,167,4)" fg:x="2540" fg:w="1"/><text x="64.4563%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.05%)</title><rect x="64.2568%" y="85" width="0.0506%" height="15" fill="rgb(209,217,16)" fg:x="2542" fg:w="2"/><text x="64.5068%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.05%)</title><rect x="64.2568%" y="69" width="0.0506%" height="15" fill="rgb(219,88,35)" fg:x="2542" fg:w="2"/><text x="64.5068%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="64.2821%" y="53" width="0.0253%" height="15" fill="rgb(220,193,23)" fg:x="2543" fg:w="1"/><text x="64.5321%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (1 samples, 0.03%)</title><rect x="64.3074%" y="85" width="0.0253%" height="15" fill="rgb(230,90,52)" fg:x="2544" fg:w="1"/><text x="64.5574%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.03%)</title><rect x="64.3327%" y="85" width="0.0253%" height="15" fill="rgb(252,106,19)" fg:x="2545" fg:w="1"/><text x="64.5827%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.03%)</title><rect x="64.4085%" y="69" width="0.0253%" height="15" fill="rgb(206,74,20)" fg:x="2548" fg:w="1"/><text x="64.6585%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="64.4338%" y="69" width="0.0253%" height="15" fill="rgb(230,138,44)" fg:x="2549" fg:w="1"/><text x="64.6838%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (6 samples, 0.15%)</title><rect x="64.3579%" y="85" width="0.1517%" height="15" fill="rgb(235,182,43)" fg:x="2546" fg:w="6"/><text x="64.6079%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.05%)</title><rect x="64.4590%" y="69" width="0.0506%" height="15" fill="rgb(242,16,51)" fg:x="2550" fg:w="2"/><text x="64.7090%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (2 samples, 0.05%)</title><rect x="64.5096%" y="69" width="0.0506%" height="15" fill="rgb(248,9,4)" fg:x="2552" fg:w="2"/><text x="64.7596%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="64.6360%" y="37" width="0.0253%" height="15" fill="rgb(210,31,22)" fg:x="2557" fg:w="1"/><text x="64.8860%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.18%)</title><rect x="64.5096%" y="85" width="0.1769%" height="15" fill="rgb(239,54,39)" fg:x="2552" fg:w="7"/><text x="64.7596%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.13%)</title><rect x="64.5602%" y="69" width="0.1264%" height="15" fill="rgb(230,99,41)" fg:x="2554" fg:w="5"/><text x="64.8102%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (4 samples, 0.10%)</title><rect x="64.5854%" y="53" width="0.1011%" height="15" fill="rgb(253,106,12)" fg:x="2555" fg:w="4"/><text x="64.8354%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="64.6613%" y="37" width="0.0253%" height="15" fill="rgb(213,46,41)" fg:x="2558" fg:w="1"/><text x="64.9113%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="64.6866%" y="85" width="0.0253%" height="15" fill="rgb(215,133,35)" fg:x="2559" fg:w="1"/><text x="64.9366%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="64.6866%" y="69" width="0.0253%" height="15" fill="rgb(213,28,5)" fg:x="2559" fg:w="1"/><text x="64.9366%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="64.7118%" y="85" width="0.0253%" height="15" fill="rgb(215,77,49)" fg:x="2560" fg:w="1"/><text x="64.9618%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (3 samples, 0.08%)</title><rect x="64.7371%" y="85" width="0.0758%" height="15" fill="rgb(248,100,22)" fg:x="2561" fg:w="3"/><text x="64.9871%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (53 samples, 1.34%)</title><rect x="64.2315%" y="101" width="1.3397%" height="15" fill="rgb(208,67,9)" fg:x="2541" fg:w="53"/><text x="64.4815%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (30 samples, 0.76%)</title><rect x="64.8129%" y="85" width="0.7583%" height="15" fill="rgb(219,133,21)" fg:x="2564" fg:w="30"/><text x="65.0629%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (55 samples, 1.39%)</title><rect x="64.2063%" y="117" width="1.3903%" height="15" fill="rgb(246,46,29)" fg:x="2540" fg:w="55"/><text x="64.4563%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="65.5713%" y="101" width="0.0253%" height="15" fill="rgb(246,185,52)" fg:x="2594" fg:w="1"/><text x="65.8213%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.05%)</title><rect x="65.5966%" y="117" width="0.0506%" height="15" fill="rgb(252,136,11)" fg:x="2595" fg:w="2"/><text x="65.8466%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (63 samples, 1.59%)</title><rect x="64.1304%" y="133" width="1.5925%" height="15" fill="rgb(219,138,53)" fg:x="2537" fg:w="63"/><text x="64.3804%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.08%)</title><rect x="65.6471%" y="117" width="0.0758%" height="15" fill="rgb(211,51,23)" fg:x="2597" fg:w="3"/><text x="65.8971%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.08%)</title><rect x="65.6471%" y="101" width="0.0758%" height="15" fill="rgb(247,221,28)" fg:x="2597" fg:w="3"/><text x="65.8971%" y="111.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (72 samples, 1.82%)</title><rect x="63.9282%" y="165" width="1.8200%" height="15" fill="rgb(251,222,45)" fg:x="2529" fg:w="72"/><text x="64.1782%" y="175.50">r..</text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (68 samples, 1.72%)</title><rect x="64.0293%" y="149" width="1.7189%" height="15" fill="rgb(217,162,53)" fg:x="2533" fg:w="68"/><text x="64.2793%" y="159.50"></text></g><g><title>rust_obj_parser`__rdl_realloc (1 samples, 0.03%)</title><rect x="65.7230%" y="133" width="0.0253%" height="15" fill="rgb(229,93,14)" fg:x="2600" fg:w="1"/><text x="65.9730%" y="143.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="65.7482%" y="165" width="0.0253%" height="15" fill="rgb(209,67,49)" fg:x="2601" fg:w="1"/><text x="65.9982%" y="175.50"></text></g><g><title>rust_obj_parser`core::iter::traits::iterator::Iterator::partition (1,591 samples, 40.22%)</title><rect x="26.8959%" y="181" width="40.2174%" height="15" fill="rgb(213,87,29)" fg:x="1064" fg:w="1591"/><text x="27.1459%" y="191.50">rust_obj_parser`core::iter::traits::iterator::Iterator::partition</text></g><g><title>rust_obj_parser`core::slice::memchr::memchr_general_case (53 samples, 1.34%)</title><rect x="65.7735%" y="165" width="1.3397%" height="15" fill="rgb(205,151,52)" fg:x="2602" fg:w="53"/><text x="66.0235%" y="175.50"></text></g><g><title>rust_obj_parser`core::num::_&lt;impl core::str::traits::FromStr for u64&gt;::from_str (5 samples, 0.13%)</title><rect x="67.1132%" y="181" width="0.1264%" height="15" fill="rgb(253,215,39)" fg:x="2655" fg:w="5"/><text x="67.3632%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (22 samples, 0.56%)</title><rect x="79.7523%" y="165" width="0.5561%" height="15" fill="rgb(221,220,41)" fg:x="3155" fg:w="22"/><text x="80.0023%" y="175.50"></text></g><g><title>rust_obj_parser`&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::short_fast_pow10 (5 samples, 0.13%)</title><rect x="80.3084%" y="165" width="0.1264%" height="15" fill="rgb(218,133,21)" fg:x="3177" fg:w="5"/><text x="80.5584%" y="175.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::extract_sign (17 samples, 0.43%)</title><rect x="80.4348%" y="165" width="0.4297%" height="15" fill="rgb(221,193,43)" fg:x="3182" fg:w="17"/><text x="80.6848%" y="175.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::dec2flt (644 samples, 16.28%)</title><rect x="67.2396%" y="181" width="16.2791%" height="15" fill="rgb(240,128,52)" fg:x="2660" fg:w="644"/><text x="67.4896%" y="191.50">rust_obj_parser`core::num..</text></g><g><title>rust_obj_parser`core::num::dec2flt::parse::parse_decimal (105 samples, 2.65%)</title><rect x="80.8645%" y="165" width="2.6542%" height="15" fill="rgb(253,114,12)" fg:x="3199" fg:w="105"/><text x="81.1145%" y="175.50">ru..</text></g><g><title>rust_obj_parser`core::num::dec2flt::extract_sign (17 samples, 0.43%)</title><rect x="83.5187%" y="181" width="0.4297%" height="15" fill="rgb(215,223,47)" fg:x="3304" fg:w="17"/><text x="83.7687%" y="191.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::parse::parse_decimal (9 samples, 0.23%)</title><rect x="83.9484%" y="181" width="0.2275%" height="15" fill="rgb(248,225,23)" fg:x="3321" fg:w="9"/><text x="84.1984%" y="191.50"></text></g><g><title>rust_obj_parser`core::ptr::drop_in_place&lt;rust_obj_parser::parser::create_thread_parse&lt;rust_obj_parser::parser::parse_obj_threaded::{{closure}},rust_obj_parser::parser::parse_obj_threaded::{{closure}}&gt;::{{closure}}&gt; (1 samples, 0.03%)</title><rect x="84.1759%" y="181" width="0.0253%" height="15" fill="rgb(250,108,0)" fg:x="3330" fg:w="1"/><text x="84.4259%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (141 samples, 3.56%)</title><rect x="89.9141%" y="165" width="3.5642%" height="15" fill="rgb(228,208,7)" fg:x="3557" fg:w="141"/><text x="90.1641%" y="175.50">rust..</text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="93.5288%" y="85" width="0.0253%" height="15" fill="rgb(244,45,10)" fg:x="3700" fg:w="1"/><text x="93.7788%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.03%)</title><rect x="93.5541%" y="85" width="0.0253%" height="15" fill="rgb(207,125,25)" fg:x="3701" fg:w="1"/><text x="93.8041%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (3 samples, 0.08%)</title><rect x="93.5794%" y="85" width="0.0758%" height="15" fill="rgb(210,195,18)" fg:x="3702" fg:w="3"/><text x="93.8294%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="93.6299%" y="69" width="0.0253%" height="15" fill="rgb(249,80,12)" fg:x="3704" fg:w="1"/><text x="93.8799%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (1 samples, 0.03%)</title><rect x="93.6552%" y="69" width="0.0253%" height="15" fill="rgb(221,65,9)" fg:x="3705" fg:w="1"/><text x="93.9052%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="93.6552%" y="85" width="0.0506%" height="15" fill="rgb(235,49,36)" fg:x="3705" fg:w="2"/><text x="93.9052%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="93.6805%" y="69" width="0.0253%" height="15" fill="rgb(225,32,20)" fg:x="3706" fg:w="1"/><text x="93.9305%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="93.6805%" y="53" width="0.0253%" height="15" fill="rgb(215,141,46)" fg:x="3706" fg:w="1"/><text x="93.9305%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (1 samples, 0.03%)</title><rect x="93.7058%" y="85" width="0.0253%" height="15" fill="rgb(250,160,47)" fg:x="3707" fg:w="1"/><text x="93.9558%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (25 samples, 0.63%)</title><rect x="93.5035%" y="117" width="0.6320%" height="15" fill="rgb(216,222,40)" fg:x="3699" fg:w="25"/><text x="93.7535%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (24 samples, 0.61%)</title><rect x="93.5288%" y="101" width="0.6067%" height="15" fill="rgb(234,217,39)" fg:x="3700" fg:w="24"/><text x="93.7788%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (16 samples, 0.40%)</title><rect x="93.7310%" y="85" width="0.4044%" height="15" fill="rgb(207,178,40)" fg:x="3708" fg:w="16"/><text x="93.9810%" y="95.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (27 samples, 0.68%)</title><rect x="93.4783%" y="165" width="0.6825%" height="15" fill="rgb(221,136,13)" fg:x="3698" fg:w="27"/><text x="93.7283%" y="175.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (26 samples, 0.66%)</title><rect x="93.5035%" y="149" width="0.6572%" height="15" fill="rgb(249,199,10)" fg:x="3699" fg:w="26"/><text x="93.7535%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (26 samples, 0.66%)</title><rect x="93.5035%" y="133" width="0.6572%" height="15" fill="rgb(249,222,13)" fg:x="3699" fg:w="26"/><text x="93.7535%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="94.1355%" y="117" width="0.0253%" height="15" fill="rgb(244,185,38)" fg:x="3724" fg:w="1"/><text x="94.3855%" y="127.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::add_vertex (581 samples, 14.69%)</title><rect x="84.2012%" y="181" width="14.6866%" height="15" fill="rgb(236,202,9)" fg:x="3331" fg:w="581"/><text x="84.4512%" y="191.50">rust_obj_parser`rust_o..</text></g><g><title>rust_obj_parser`core::num::_&lt;impl core::str::traits::FromStr for u64&gt;::from_str (187 samples, 4.73%)</title><rect x="94.1608%" y="165" width="4.7270%" height="15" fill="rgb(250,229,37)" fg:x="3725" fg:w="187"/><text x="94.4108%" y="175.50">rust_o..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (13 samples, 0.33%)</title><rect x="98.9636%" y="133" width="0.3286%" height="15" fill="rgb(206,174,23)" fg:x="3915" fg:w="13"/><text x="99.2136%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::Sender&lt;T&gt;::send (17 samples, 0.43%)</title><rect x="98.8878%" y="181" width="0.4297%" height="15" fill="rgb(211,33,43)" fg:x="3912" fg:w="17"/><text x="99.1378%" y="191.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::send (17 samples, 0.43%)</title><rect x="98.8878%" y="165" width="0.4297%" height="15" fill="rgb(245,58,50)" fg:x="3912" fg:w="17"/><text x="99.1378%" y="175.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::SignalToken::signal (14 samples, 0.35%)</title><rect x="98.9636%" y="149" width="0.3539%" height="15" fill="rgb(244,68,36)" fg:x="3915" fg:w="14"/><text x="99.2136%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (1 samples, 0.03%)</title><rect x="99.2922%" y="133" width="0.0253%" height="15" fill="rgb(232,229,15)" fg:x="3928" fg:w="1"/><text x="99.5422%" y="143.50"></text></g><g><title>rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}} (3,455 samples, 87.34%)</title><rect x="12.0071%" y="197" width="87.3357%" height="15" fill="rgb(254,30,23)" fg:x="475" fg:w="3455"/><text x="12.2571%" y="207.50">rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::send (1 samples, 0.03%)</title><rect x="99.3175%" y="181" width="0.0253%" height="15" fill="rgb(235,160,14)" fg:x="3929" fg:w="1"/><text x="99.5675%" y="191.50"></text></g><g><title>rust_obj_parser`core::ptr::drop_in_place&lt;std::sync::mpsc::IntoIter&lt;rust_obj_parser::parser::ThreadMessage&gt;&gt; (1 samples, 0.03%)</title><rect x="99.3428%" y="197" width="0.0253%" height="15" fill="rgb(212,155,44)" fg:x="3930" fg:w="1"/><text x="99.5928%" y="207.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="99.3428%" y="181" width="0.0253%" height="15" fill="rgb(226,2,50)" fg:x="3930" fg:w="1"/><text x="99.5928%" y="191.50"></text></g><g><title>rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace (3,568 samples, 90.19%)</title><rect x="9.5298%" y="213" width="90.1921%" height="15" fill="rgb(234,177,6)" fg:x="377" fg:w="3568"/><text x="9.7798%" y="223.50">rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_obj_parser`rust_obj_parser::parser::add_vertex (14 samples, 0.35%)</title><rect x="99.3680%" y="197" width="0.3539%" height="15" fill="rgb(217,24,9)" fg:x="3931" fg:w="14"/><text x="99.6180%" y="207.50"></text></g><g><title>rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}} (3,573 samples, 90.32%)</title><rect x="9.4793%" y="229" width="90.3185%" height="15" fill="rgb(220,13,46)" fg:x="375" fg:w="3573"/><text x="9.7293%" y="239.50">rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_obj_parser`std::sys_common::thread_info::set (3 samples, 0.08%)</title><rect x="99.7219%" y="213" width="0.0758%" height="15" fill="rgb(239,221,27)" fg:x="3945" fg:w="3"/><text x="99.9719%" y="223.50"></text></g><g><title>rust_obj_parser`std::thread::local::fast::Key&lt;T&gt;::try_initialize (3 samples, 0.08%)</title><rect x="99.7219%" y="197" width="0.0758%" height="15" fill="rgb(222,198,25)" fg:x="3945" fg:w="3"/><text x="99.9719%" y="207.50"></text></g><g><title>libdyld.dylib`_tlv_atexit (3 samples, 0.08%)</title><rect x="99.7219%" y="181" width="0.0758%" height="15" fill="rgb(211,99,13)" fg:x="3945" fg:w="3"/><text x="99.9719%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.08%)</title><rect x="99.7219%" y="165" width="0.0758%" height="15" fill="rgb(232,111,31)" fg:x="3945" fg:w="3"/><text x="99.9719%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.08%)</title><rect x="99.7219%" y="149" width="0.0758%" height="15" fill="rgb(245,82,37)" fg:x="3945" fg:w="3"/><text x="99.9719%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.08%)</title><rect x="99.7219%" y="133" width="0.0758%" height="15" fill="rgb(227,149,46)" fg:x="3945" fg:w="3"/><text x="99.9719%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.05%)</title><rect x="99.7472%" y="117" width="0.0506%" height="15" fill="rgb(218,36,50)" fg:x="3946" fg:w="2"/><text x="99.9972%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="99.7725%" y="101" width="0.0253%" height="15" fill="rgb(226,80,48)" fg:x="3947" fg:w="1"/><text x="100.0225%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (4 samples, 0.10%)</title><rect x="99.8736%" y="213" width="0.1011%" height="15" fill="rgb(238,224,15)" fg:x="3951" fg:w="4"/><text x="100.1236%" y="223.50"></text></g><g><title>all (3,956 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(241,136,10)" fg:x="0" fg:w="3956"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (3,684 samples, 93.12%)</title><rect x="6.8756%" y="277" width="93.1244%" height="15" fill="rgb(208,32,45)" fg:x="272" fg:w="3684"/><text x="7.1256%" y="287.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (3,663 samples, 92.59%)</title><rect x="7.4065%" y="261" width="92.5935%" height="15" fill="rgb(207,135,9)" fg:x="293" fg:w="3663"/><text x="7.6565%" y="271.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::new::thread_start (3,593 samples, 90.82%)</title><rect x="9.1759%" y="245" width="90.8241%" height="15" fill="rgb(206,86,44)" fg:x="363" fg:w="3593"/><text x="9.4259%" y="255.50">rust_obj_parser`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_obj_parser`std::sys::unix::stack_overflow::imp::make_handler (8 samples, 0.20%)</title><rect x="99.7978%" y="229" width="0.2022%" height="15" fill="rgb(245,177,15)" fg:x="3948" fg:w="8"/><text x="100.0478%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mmap (1 samples, 0.03%)</title><rect x="99.9747%" y="213" width="0.0253%" height="15" fill="rgb(206,64,50)" fg:x="3955" fg:w="1"/><text x="100.2247%" y="223.50"></text></g></svg></svg>