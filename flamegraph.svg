<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="3823"><g><title>libsystem_malloc.dylib`free_large (12 samples, 0.31%)</title><rect x="0.0000%" y="149" width="0.3139%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="12"/><text x="0.2500%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (11 samples, 0.29%)</title><rect x="0.0262%" y="133" width="0.2877%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="11"/><text x="0.2762%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (11 samples, 0.29%)</title><rect x="0.0262%" y="117" width="0.2877%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="11"/><text x="0.2762%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.03%)</title><rect x="0.3139%" y="149" width="0.0262%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="1"/><text x="0.5639%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="0.3400%" y="133" width="0.0262%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="1"/><text x="0.5900%" y="143.50"></text></g><g><title>rust_obj_parser`&lt;alloc::string::String as core::clone::Clone&gt;::clone (16 samples, 0.42%)</title><rect x="0.3400%" y="149" width="0.4185%" height="15" fill="rgb(232,128,0)" fg:x="13" fg:w="16"/><text x="0.5900%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (15 samples, 0.39%)</title><rect x="0.3662%" y="133" width="0.3924%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="15"/><text x="0.6162%" y="143.50"></text></g><g><title>rust_obj_parser`alloc::slice::merge_sort (1 samples, 0.03%)</title><rect x="0.7586%" y="149" width="0.0262%" height="15" fill="rgb(228,23,34)" fg:x="29" fg:w="1"/><text x="1.0086%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.08%)</title><rect x="0.8894%" y="133" width="0.0785%" height="15" fill="rgb(218,30,26)" fg:x="34" fg:w="3"/><text x="1.1394%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="0.9678%" y="133" width="0.0523%" height="15" fill="rgb(220,122,19)" fg:x="37" fg:w="2"/><text x="1.2178%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="0.9940%" y="117" width="0.0262%" height="15" fill="rgb(250,228,42)" fg:x="38" fg:w="1"/><text x="1.2440%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="0.9940%" y="101" width="0.0262%" height="15" fill="rgb(240,193,28)" fg:x="38" fg:w="1"/><text x="1.2440%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="1.0201%" y="133" width="0.0262%" height="15" fill="rgb(216,20,37)" fg:x="39" fg:w="1"/><text x="1.2701%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="1.0463%" y="133" width="0.0262%" height="15" fill="rgb(206,188,39)" fg:x="40" fg:w="1"/><text x="1.2963%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="1.0463%" y="117" width="0.0262%" height="15" fill="rgb(217,207,13)" fg:x="40" fg:w="1"/><text x="1.2963%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="1.0463%" y="101" width="0.0262%" height="15" fill="rgb(231,73,38)" fg:x="40" fg:w="1"/><text x="1.2963%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.05%)</title><rect x="1.0725%" y="133" width="0.0523%" height="15" fill="rgb(225,20,46)" fg:x="41" fg:w="2"/><text x="1.3225%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.05%)</title><rect x="1.0725%" y="117" width="0.0523%" height="15" fill="rgb(210,31,41)" fg:x="41" fg:w="2"/><text x="1.3225%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (34 samples, 0.89%)</title><rect x="1.1248%" y="133" width="0.8894%" height="15" fill="rgb(221,200,47)" fg:x="43" fg:w="34"/><text x="1.3748%" y="143.50"></text></g><g><title>rust_obj_parser`&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.29%)</title><rect x="2.0141%" y="133" width="0.2877%" height="15" fill="rgb(226,26,5)" fg:x="77" fg:w="11"/><text x="2.2641%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.29%)</title><rect x="2.0141%" y="117" width="0.2877%" height="15" fill="rgb(249,33,26)" fg:x="77" fg:w="11"/><text x="2.2641%" y="127.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::pop (1 samples, 0.03%)</title><rect x="2.3019%" y="101" width="0.0262%" height="15" fill="rgb(235,183,28)" fg:x="88" fg:w="1"/><text x="2.5519%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.08%)</title><rect x="2.3280%" y="69" width="0.0785%" height="15" fill="rgb(221,5,38)" fg:x="89" fg:w="3"/><text x="2.5780%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="2.3803%" y="53" width="0.0262%" height="15" fill="rgb(247,18,42)" fg:x="91" fg:w="1"/><text x="2.6303%" y="63.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.24%)</title><rect x="2.3019%" y="133" width="0.2354%" height="15" fill="rgb(241,131,45)" fg:x="88" fg:w="9"/><text x="2.5519%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::recv (9 samples, 0.24%)</title><rect x="2.3019%" y="117" width="0.2354%" height="15" fill="rgb(249,31,29)" fg:x="88" fg:w="9"/><text x="2.5519%" y="127.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::try_recv (8 samples, 0.21%)</title><rect x="2.3280%" y="101" width="0.2093%" height="15" fill="rgb(225,111,53)" fg:x="89" fg:w="8"/><text x="2.5780%" y="111.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::pop (8 samples, 0.21%)</title><rect x="2.3280%" y="85" width="0.2093%" height="15" fill="rgb(238,160,17)" fg:x="89" fg:w="8"/><text x="2.5780%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.13%)</title><rect x="2.4065%" y="69" width="0.1308%" height="15" fill="rgb(214,148,48)" fg:x="92" fg:w="5"/><text x="2.6565%" y="79.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="2.5373%" y="133" width="0.0523%" height="15" fill="rgb(232,36,49)" fg:x="97" fg:w="2"/><text x="2.7873%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::new (2 samples, 0.05%)</title><rect x="2.5373%" y="117" width="0.0523%" height="15" fill="rgb(209,103,24)" fg:x="97" fg:w="2"/><text x="2.7873%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="2.5373%" y="101" width="0.0523%" height="15" fill="rgb(229,88,8)" fg:x="97" fg:w="2"/><text x="2.7873%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="2.5634%" y="85" width="0.0262%" height="15" fill="rgb(213,181,19)" fg:x="98" fg:w="1"/><text x="2.8134%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="2.5634%" y="69" width="0.0262%" height="15" fill="rgb(254,191,54)" fg:x="98" fg:w="1"/><text x="2.8134%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="2.5634%" y="53" width="0.0262%" height="15" fill="rgb(241,83,37)" fg:x="98" fg:w="1"/><text x="2.8134%" y="63.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="2.5896%" y="133" width="0.0262%" height="15" fill="rgb(233,36,39)" fg:x="99" fg:w="1"/><text x="2.8396%" y="143.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="2.5896%" y="117" width="0.0262%" height="15" fill="rgb(226,3,54)" fg:x="99" fg:w="1"/><text x="2.8396%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="2.5896%" y="101" width="0.0262%" height="15" fill="rgb(245,192,40)" fg:x="99" fg:w="1"/><text x="2.8396%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="2.5896%" y="85" width="0.0262%" height="15" fill="rgb(238,167,29)" fg:x="99" fg:w="1"/><text x="2.8396%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (1 samples, 0.03%)</title><rect x="2.5896%" y="69" width="0.0262%" height="15" fill="rgb(232,182,51)" fg:x="99" fg:w="1"/><text x="2.8396%" y="79.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.05%)</title><rect x="2.6157%" y="133" width="0.0523%" height="15" fill="rgb(231,60,39)" fg:x="100" fg:w="2"/><text x="2.8657%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.05%)</title><rect x="2.6157%" y="117" width="0.0523%" height="15" fill="rgb(208,69,12)" fg:x="100" fg:w="2"/><text x="2.8657%" y="127.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::ObjectInfo::extend (6 samples, 0.16%)</title><rect x="2.6681%" y="133" width="0.1569%" height="15" fill="rgb(235,93,37)" fg:x="102" fg:w="6"/><text x="2.9181%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.16%)</title><rect x="2.6681%" y="117" width="0.1569%" height="15" fill="rgb(213,116,39)" fg:x="102" fg:w="6"/><text x="2.9181%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.08%)</title><rect x="2.9296%" y="117" width="0.0785%" height="15" fill="rgb(222,207,29)" fg:x="112" fg:w="3"/><text x="3.1796%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.08%)</title><rect x="2.9296%" y="101" width="0.0785%" height="15" fill="rgb(206,96,30)" fg:x="112" fg:w="3"/><text x="3.1796%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$os_unfair_lock_lock_with_options (1 samples, 0.03%)</title><rect x="3.0081%" y="101" width="0.0262%" height="15" fill="rgb(218,138,4)" fg:x="115" fg:w="1"/><text x="3.2581%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="3.0343%" y="101" width="0.0262%" height="15" fill="rgb(250,191,14)" fg:x="116" fg:w="1"/><text x="3.2843%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="3.0343%" y="85" width="0.0262%" height="15" fill="rgb(239,60,40)" fg:x="116" fg:w="1"/><text x="3.2843%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="3.0343%" y="69" width="0.0262%" height="15" fill="rgb(206,27,48)" fg:x="116" fg:w="1"/><text x="3.2843%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="3.0866%" y="69" width="0.0262%" height="15" fill="rgb(225,35,8)" fg:x="118" fg:w="1"/><text x="3.3366%" y="79.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.13%)</title><rect x="3.0081%" y="117" width="0.1308%" height="15" fill="rgb(250,213,24)" fg:x="115" fg:w="5"/><text x="3.2581%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.08%)</title><rect x="3.0604%" y="101" width="0.0785%" height="15" fill="rgb(247,123,22)" fg:x="117" fg:w="3"/><text x="3.3104%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.08%)</title><rect x="3.0604%" y="85" width="0.0785%" height="15" fill="rgb(231,138,38)" fg:x="117" fg:w="3"/><text x="3.3104%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="3.1127%" y="69" width="0.0262%" height="15" fill="rgb(231,145,46)" fg:x="119" fg:w="1"/><text x="3.3627%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (31 samples, 0.81%)</title><rect x="3.1651%" y="101" width="0.8109%" height="15" fill="rgb(251,118,11)" fg:x="121" fg:w="31"/><text x="3.4151%" y="111.50"></text></g><g><title>rust_obj_parser`std::thread::JoinHandle&lt;T&gt;::join (106 samples, 2.77%)</title><rect x="2.8250%" y="133" width="2.7727%" height="15" fill="rgb(217,147,25)" fg:x="108" fg:w="106"/><text x="3.0750%" y="143.50">ru..</text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::join (94 samples, 2.46%)</title><rect x="3.1389%" y="117" width="2.4588%" height="15" fill="rgb(247,81,37)" fg:x="120" fg:w="94"/><text x="3.3889%" y="127.50">ru..</text></g><g><title>libsystem_pthread.dylib`_pthread_join (62 samples, 1.62%)</title><rect x="3.9759%" y="101" width="1.6218%" height="15" fill="rgb(209,12,38)" fg:x="152" fg:w="62"/><text x="4.2259%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_deallocate (58 samples, 1.52%)</title><rect x="4.0806%" y="85" width="1.5171%" height="15" fill="rgb(227,1,9)" fg:x="156" fg:w="58"/><text x="4.3306%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (58 samples, 1.52%)</title><rect x="4.0806%" y="69" width="1.5171%" height="15" fill="rgb(248,47,43)" fg:x="156" fg:w="58"/><text x="4.3306%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="5.5977%" y="117" width="0.0262%" height="15" fill="rgb(221,10,30)" fg:x="214" fg:w="1"/><text x="5.8477%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="5.5977%" y="101" width="0.0262%" height="15" fill="rgb(210,229,1)" fg:x="214" fg:w="1"/><text x="5.8477%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="5.5977%" y="85" width="0.0262%" height="15" fill="rgb(222,148,37)" fg:x="214" fg:w="1"/><text x="5.8477%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="5.5977%" y="69" width="0.0262%" height="15" fill="rgb(234,67,33)" fg:x="214" fg:w="1"/><text x="5.8477%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (30 samples, 0.78%)</title><rect x="5.6500%" y="101" width="0.7847%" height="15" fill="rgb(247,98,35)" fg:x="216" fg:w="30"/><text x="5.9000%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (13 samples, 0.34%)</title><rect x="7.2195%" y="85" width="0.3400%" height="15" fill="rgb(247,138,52)" fg:x="276" fg:w="13"/><text x="7.4695%" y="95.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::new (84 samples, 2.20%)</title><rect x="5.6239%" y="117" width="2.1972%" height="15" fill="rgb(213,79,30)" fg:x="215" fg:w="84"/><text x="5.8739%" y="127.50">r..</text></g><g><title>libsystem_pthread.dylib`_pthread_create (53 samples, 1.39%)</title><rect x="6.4347%" y="101" width="1.3863%" height="15" fill="rgb(246,177,23)" fg:x="246" fg:w="53"/><text x="6.6847%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_protect_trap (10 samples, 0.26%)</title><rect x="7.5595%" y="85" width="0.2616%" height="15" fill="rgb(230,62,27)" fg:x="289" fg:w="10"/><text x="7.8095%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="7.8211%" y="101" width="0.0262%" height="15" fill="rgb(216,154,8)" fg:x="299" fg:w="1"/><text x="8.0711%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="7.8211%" y="85" width="0.0262%" height="15" fill="rgb(244,35,45)" fg:x="299" fg:w="1"/><text x="8.0711%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="7.8211%" y="69" width="0.0262%" height="15" fill="rgb(251,115,12)" fg:x="299" fg:w="1"/><text x="8.0711%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="7.8211%" y="53" width="0.0262%" height="15" fill="rgb(240,54,50)" fg:x="299" fg:w="1"/><text x="8.0711%" y="63.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutexattr_destroy (1 samples, 0.03%)</title><rect x="7.8472%" y="101" width="0.0262%" height="15" fill="rgb(233,84,52)" fg:x="300" fg:w="1"/><text x="8.0972%" y="111.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::parse_obj_threaded (274 samples, 7.17%)</title><rect x="0.7847%" y="149" width="7.1671%" height="15" fill="rgb(207,117,47)" fg:x="30" fg:w="274"/><text x="1.0347%" y="159.50">rust_obj_p..</text></g><g><title>rust_obj_parser`std::thread::spawn (90 samples, 2.35%)</title><rect x="5.5977%" y="133" width="2.3542%" height="15" fill="rgb(249,43,39)" fg:x="214" fg:w="90"/><text x="5.8477%" y="143.50">r..</text></g><g><title>rust_obj_parser`std::thread::Thread::new (5 samples, 0.13%)</title><rect x="7.8211%" y="117" width="0.1308%" height="15" fill="rgb(209,38,44)" fg:x="299" fg:w="5"/><text x="8.0711%" y="127.50"></text></g><g><title>rust_obj_parser`std::sys_common::mutex::MovableMutex::new (3 samples, 0.08%)</title><rect x="7.8734%" y="101" width="0.0785%" height="15" fill="rgb(236,212,23)" fg:x="301" fg:w="3"/><text x="8.1234%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.08%)</title><rect x="7.8734%" y="85" width="0.0785%" height="15" fill="rgb(242,79,21)" fg:x="301" fg:w="3"/><text x="8.1234%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.08%)</title><rect x="7.8734%" y="69" width="0.0785%" height="15" fill="rgb(211,96,35)" fg:x="301" fg:w="3"/><text x="8.1234%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.08%)</title><rect x="7.8734%" y="53" width="0.0785%" height="15" fill="rgb(253,215,40)" fg:x="301" fg:w="3"/><text x="8.1234%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="7.9257%" y="37" width="0.0262%" height="15" fill="rgb(211,81,21)" fg:x="303" fg:w="1"/><text x="8.1757%" y="47.50"></text></g><g><title>0x1 (305 samples, 7.98%)</title><rect x="0.0000%" y="261" width="7.9780%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="305"/><text x="0.2500%" y="271.50">0x1</text></g><g><title>libdyld.dylib`start (305 samples, 7.98%)</title><rect x="0.0000%" y="245" width="7.9780%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="305"/><text x="0.2500%" y="255.50">libdyld.dyl..</text></g><g><title>rust_obj_parser`main (305 samples, 7.98%)</title><rect x="0.0000%" y="229" width="7.9780%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="305"/><text x="0.2500%" y="239.50">rust_obj_pa..</text></g><g><title>rust_obj_parser`std::rt::lang_start_internal (305 samples, 7.98%)</title><rect x="0.0000%" y="213" width="7.9780%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="305"/><text x="0.2500%" y="223.50">rust_obj_pa..</text></g><g><title>rust_obj_parser`std::rt::lang_start::_{{closure}} (305 samples, 7.98%)</title><rect x="0.0000%" y="197" width="7.9780%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="305"/><text x="0.2500%" y="207.50">rust_obj_pa..</text></g><g><title>rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace (305 samples, 7.98%)</title><rect x="0.0000%" y="181" width="7.9780%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="305"/><text x="0.2500%" y="191.50">rust_obj_pa..</text></g><g><title>rust_obj_parser`rust_obj_parser::main (305 samples, 7.98%)</title><rect x="0.0000%" y="165" width="7.9780%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="305"/><text x="0.2500%" y="175.50">rust_obj_pa..</text></g><g><title>rust_obj_parser`std::fs::read_to_string::inner (1 samples, 0.03%)</title><rect x="7.9519%" y="149" width="0.0262%" height="15" fill="rgb(224,169,11)" fg:x="304" fg:w="1"/><text x="8.2019%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.03%)</title><rect x="7.9519%" y="133" width="0.0262%" height="15" fill="rgb(250,166,2)" fg:x="304" fg:w="1"/><text x="8.2019%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (50 samples, 1.31%)</title><rect x="7.9780%" y="261" width="1.3079%" height="15" fill="rgb(242,216,29)" fg:x="305" fg:w="50"/><text x="8.2280%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.03%)</title><rect x="9.2859%" y="261" width="0.0262%" height="15" fill="rgb(230,116,27)" fg:x="355" fg:w="1"/><text x="9.5359%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__thread_selfid (10 samples, 0.26%)</title><rect x="11.0385%" y="245" width="0.2616%" height="15" fill="rgb(228,99,48)" fg:x="422" fg:w="10"/><text x="11.2885%" y="255.50"></text></g><g><title>libsystem_c.dylib`sysconf (1 samples, 0.03%)</title><rect x="11.3262%" y="229" width="0.0262%" height="15" fill="rgb(253,11,6)" fg:x="433" fg:w="1"/><text x="11.5762%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__disable_threadsignal (2 samples, 0.05%)</title><rect x="11.3523%" y="229" width="0.0523%" height="15" fill="rgb(247,143,39)" fg:x="434" fg:w="2"/><text x="11.6023%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (21 samples, 0.55%)</title><rect x="11.4047%" y="229" width="0.5493%" height="15" fill="rgb(236,97,10)" fg:x="436" fg:w="21"/><text x="11.6547%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__sigaltstack (5 samples, 0.13%)</title><rect x="11.9540%" y="229" width="0.1308%" height="15" fill="rgb(233,208,19)" fg:x="457" fg:w="5"/><text x="12.2040%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="12.1632%" y="181" width="0.0262%" height="15" fill="rgb(216,164,2)" fg:x="465" fg:w="1"/><text x="12.4132%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (5 samples, 0.13%)</title><rect x="12.0848%" y="229" width="0.1308%" height="15" fill="rgb(220,129,5)" fg:x="462" fg:w="5"/><text x="12.3348%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (4 samples, 0.10%)</title><rect x="12.1109%" y="213" width="0.1046%" height="15" fill="rgb(242,17,10)" fg:x="463" fg:w="4"/><text x="12.3609%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_finalize_list (2 samples, 0.05%)</title><rect x="12.1632%" y="197" width="0.0523%" height="15" fill="rgb(242,107,0)" fg:x="465" fg:w="2"/><text x="12.4132%" y="207.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread_local_dtor::register_dtor::run_dtors (1 samples, 0.03%)</title><rect x="12.1894%" y="181" width="0.0262%" height="15" fill="rgb(251,28,31)" fg:x="466" fg:w="1"/><text x="12.4394%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="12.1894%" y="165" width="0.0262%" height="15" fill="rgb(233,223,10)" fg:x="466" fg:w="1"/><text x="12.4394%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="12.1894%" y="149" width="0.0262%" height="15" fill="rgb(215,21,27)" fg:x="466" fg:w="1"/><text x="12.4394%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_setcancelstate_exit (1 samples, 0.03%)</title><rect x="12.2155%" y="229" width="0.0262%" height="15" fill="rgb(232,23,21)" fg:x="467" fg:w="1"/><text x="12.4655%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (27 samples, 0.71%)</title><rect x="12.2417%" y="197" width="0.7063%" height="15" fill="rgb(244,5,23)" fg:x="468" fg:w="27"/><text x="12.4917%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_join$NOCANCEL (39 samples, 1.02%)</title><rect x="12.2417%" y="229" width="1.0201%" height="15" fill="rgb(226,81,46)" fg:x="468" fg:w="39"/><text x="12.4917%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (39 samples, 1.02%)</title><rect x="12.2417%" y="213" width="1.0201%" height="15" fill="rgb(247,70,30)" fg:x="468" fg:w="39"/><text x="12.4917%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (12 samples, 0.31%)</title><rect x="12.9479%" y="197" width="0.3139%" height="15" fill="rgb(212,68,19)" fg:x="495" fg:w="12"/><text x="13.1979%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (11 samples, 0.29%)</title><rect x="12.9741%" y="181" width="0.2877%" height="15" fill="rgb(240,187,13)" fg:x="496" fg:w="11"/><text x="13.2241%" y="191.50"></text></g><g><title>libsystem_c.dylib`getpagesize (1 samples, 0.03%)</title><rect x="13.2880%" y="213" width="0.0262%" height="15" fill="rgb(223,113,26)" fg:x="508" fg:w="1"/><text x="13.5380%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (16 samples, 0.42%)</title><rect x="13.3142%" y="213" width="0.4185%" height="15" fill="rgb(206,192,2)" fg:x="509" fg:w="16"/><text x="13.5642%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__sigaltstack (11 samples, 0.29%)</title><rect x="13.7327%" y="213" width="0.2877%" height="15" fill="rgb(241,108,4)" fg:x="525" fg:w="11"/><text x="13.9827%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.08%)</title><rect x="14.0204%" y="213" width="0.0785%" height="15" fill="rgb(247,173,49)" fg:x="536" fg:w="3"/><text x="14.2704%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.08%)</title><rect x="14.0204%" y="197" width="0.0785%" height="15" fill="rgb(224,114,35)" fg:x="536" fg:w="3"/><text x="14.2704%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.08%)</title><rect x="14.0204%" y="181" width="0.0785%" height="15" fill="rgb(245,159,27)" fg:x="536" fg:w="3"/><text x="14.2704%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.05%)</title><rect x="14.0989%" y="213" width="0.0523%" height="15" fill="rgb(245,172,44)" fg:x="539" fg:w="2"/><text x="14.3489%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="14.2035%" y="197" width="0.0262%" height="15" fill="rgb(236,23,11)" fg:x="543" fg:w="1"/><text x="14.4535%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.05%)</title><rect x="14.2297%" y="197" width="0.0523%" height="15" fill="rgb(205,117,38)" fg:x="544" fg:w="2"/><text x="14.4797%" y="207.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::face (2 samples, 0.05%)</title><rect x="14.2820%" y="197" width="0.0523%" height="15" fill="rgb(237,72,25)" fg:x="546" fg:w="2"/><text x="14.5320%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (23 samples, 0.60%)</title><rect x="15.8776%" y="181" width="0.6016%" height="15" fill="rgb(244,70,9)" fg:x="607" fg:w="23"/><text x="16.1276%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="16.4792%" y="165" width="0.0262%" height="15" fill="rgb(217,125,39)" fg:x="630" fg:w="1"/><text x="16.7292%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.18%)</title><rect x="16.4792%" y="181" width="0.1831%" height="15" fill="rgb(235,36,10)" fg:x="630" fg:w="7"/><text x="16.7292%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size_try_large (6 samples, 0.16%)</title><rect x="16.5054%" y="165" width="0.1569%" height="15" fill="rgb(251,123,47)" fg:x="631" fg:w="6"/><text x="16.7554%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (4 samples, 0.10%)</title><rect x="16.5577%" y="149" width="0.1046%" height="15" fill="rgb(221,13,13)" fg:x="633" fg:w="4"/><text x="16.8077%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (2 samples, 0.05%)</title><rect x="16.7408%" y="165" width="0.0523%" height="15" fill="rgb(238,131,9)" fg:x="640" fg:w="2"/><text x="16.9908%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (7 samples, 0.18%)</title><rect x="16.6623%" y="181" width="0.1831%" height="15" fill="rgb(211,50,8)" fg:x="637" fg:w="7"/><text x="16.9123%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (2 samples, 0.05%)</title><rect x="16.7931%" y="165" width="0.0523%" height="15" fill="rgb(245,182,24)" fg:x="642" fg:w="2"/><text x="17.0431%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`large_entry_for_pointer_no_lock (1 samples, 0.03%)</title><rect x="16.8454%" y="181" width="0.0262%" height="15" fill="rgb(242,14,37)" fg:x="644" fg:w="1"/><text x="17.0954%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.03%)</title><rect x="16.8716%" y="181" width="0.0262%" height="15" fill="rgb(246,228,12)" fg:x="645" fg:w="1"/><text x="17.1216%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 1.07%)</title><rect x="16.8977%" y="181" width="1.0725%" height="15" fill="rgb(213,55,15)" fg:x="646" fg:w="41"/><text x="17.1477%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.21%)</title><rect x="17.9702%" y="181" width="0.2093%" height="15" fill="rgb(209,9,3)" fg:x="687" fg:w="8"/><text x="18.2202%" y="191.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="18.1794%" y="181" width="0.0262%" height="15" fill="rgb(230,59,30)" fg:x="695" fg:w="1"/><text x="18.4294%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (30 samples, 0.78%)</title><rect x="24.1172%" y="165" width="0.7847%" height="15" fill="rgb(209,121,21)" fg:x="922" fg:w="30"/><text x="24.3672%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (64 samples, 1.67%)</title><rect x="32.8538%" y="149" width="1.6741%" height="15" fill="rgb(220,109,13)" fg:x="1256" fg:w="64"/><text x="33.1038%" y="159.50"></text></g><g><title>rust_obj_parser`&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,018 samples, 26.63%)</title><rect x="24.9019%" y="165" width="26.6283%" height="15" fill="rgb(232,18,1)" fg:x="952" fg:w="1018"/><text x="25.1519%" y="175.50">rust_obj_parser`&lt;core::str::iter::Lines as ..</text></g><g><title>rust_obj_parser`core::slice::memchr::memchr_general_case (650 samples, 17.00%)</title><rect x="34.5279%" y="149" width="17.0024%" height="15" fill="rgb(215,41,42)" fg:x="1320" fg:w="650"/><text x="34.7779%" y="159.50">rust_obj_parser`core::slic..</text></g><g><title>rust_obj_parser`DYLD-STUB$$memcmp (22 samples, 0.58%)</title><rect x="51.5302%" y="165" width="0.5755%" height="15" fill="rgb(224,123,36)" fg:x="1970" fg:w="22"/><text x="51.7802%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="52.1580%" y="133" width="0.0262%" height="15" fill="rgb(240,125,3)" fg:x="1994" fg:w="1"/><text x="52.4080%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (1 samples, 0.03%)</title><rect x="52.2888%" y="101" width="0.0262%" height="15" fill="rgb(205,98,50)" fg:x="1999" fg:w="1"/><text x="52.5388%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.10%)</title><rect x="52.3411%" y="85" width="0.1046%" height="15" fill="rgb(205,185,37)" fg:x="2001" fg:w="4"/><text x="52.5911%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="52.4457%" y="85" width="0.0262%" height="15" fill="rgb(238,207,15)" fg:x="2005" fg:w="1"/><text x="52.6957%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.03%)</title><rect x="52.4719%" y="85" width="0.0262%" height="15" fill="rgb(213,199,42)" fg:x="2006" fg:w="1"/><text x="52.7219%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.05%)</title><rect x="52.5242%" y="69" width="0.0523%" height="15" fill="rgb(235,201,11)" fg:x="2008" fg:w="2"/><text x="52.7742%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (4 samples, 0.10%)</title><rect x="52.4980%" y="85" width="0.1046%" height="15" fill="rgb(207,46,11)" fg:x="2007" fg:w="4"/><text x="52.7480%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="52.5765%" y="69" width="0.0262%" height="15" fill="rgb(241,35,35)" fg:x="2010" fg:w="1"/><text x="52.8265%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (5 samples, 0.13%)</title><rect x="52.6027%" y="69" width="0.1308%" height="15" fill="rgb(243,32,47)" fg:x="2011" fg:w="5"/><text x="52.8527%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (3 samples, 0.08%)</title><rect x="52.6550%" y="53" width="0.0785%" height="15" fill="rgb(247,202,23)" fg:x="2013" fg:w="3"/><text x="52.9050%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (3 samples, 0.08%)</title><rect x="52.6550%" y="37" width="0.0785%" height="15" fill="rgb(219,102,11)" fg:x="2013" fg:w="3"/><text x="52.9050%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.08%)</title><rect x="52.7335%" y="69" width="0.0785%" height="15" fill="rgb(243,110,44)" fg:x="2016" fg:w="3"/><text x="52.9835%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.03%)</title><rect x="52.7858%" y="53" width="0.0262%" height="15" fill="rgb(222,74,54)" fg:x="2018" fg:w="1"/><text x="53.0358%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.03%)</title><rect x="52.7858%" y="37" width="0.0262%" height="15" fill="rgb(216,99,12)" fg:x="2018" fg:w="1"/><text x="53.0358%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.24%)</title><rect x="52.6027%" y="85" width="0.2354%" height="15" fill="rgb(226,22,26)" fg:x="2011" fg:w="9"/><text x="52.8527%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="52.8119%" y="69" width="0.0262%" height="15" fill="rgb(217,163,10)" fg:x="2019" fg:w="1"/><text x="53.0619%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.05%)</title><rect x="52.8381%" y="85" width="0.0523%" height="15" fill="rgb(213,25,53)" fg:x="2020" fg:w="2"/><text x="53.0881%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.05%)</title><rect x="52.8381%" y="69" width="0.0523%" height="15" fill="rgb(252,105,26)" fg:x="2020" fg:w="2"/><text x="53.0881%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (4 samples, 0.10%)</title><rect x="52.8904%" y="85" width="0.1046%" height="15" fill="rgb(220,39,43)" fg:x="2022" fg:w="4"/><text x="53.1404%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.05%)</title><rect x="52.9427%" y="69" width="0.0523%" height="15" fill="rgb(229,68,48)" fg:x="2024" fg:w="2"/><text x="53.1927%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (64 samples, 1.67%)</title><rect x="52.2365%" y="117" width="1.6741%" height="15" fill="rgb(252,8,32)" fg:x="1997" fg:w="64"/><text x="52.4865%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (61 samples, 1.60%)</title><rect x="52.3149%" y="101" width="1.5956%" height="15" fill="rgb(223,20,43)" fg:x="2000" fg:w="61"/><text x="52.5649%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (35 samples, 0.92%)</title><rect x="52.9950%" y="85" width="0.9155%" height="15" fill="rgb(229,81,49)" fg:x="2026" fg:w="35"/><text x="53.2450%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`realloc (67 samples, 1.75%)</title><rect x="52.1841%" y="133" width="1.7526%" height="15" fill="rgb(236,28,36)" fg:x="1995" fg:w="67"/><text x="52.4341%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="53.9105%" y="117" width="0.0262%" height="15" fill="rgb(249,185,26)" fg:x="2061" fg:w="1"/><text x="54.1605%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="53.9105%" y="101" width="0.0262%" height="15" fill="rgb(249,174,33)" fg:x="2061" fg:w="1"/><text x="54.1605%" y="111.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (71 samples, 1.86%)</title><rect x="52.1057%" y="165" width="1.8572%" height="15" fill="rgb(233,201,37)" fg:x="1992" fg:w="71"/><text x="52.3557%" y="175.50">r..</text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (69 samples, 1.80%)</title><rect x="52.1580%" y="149" width="1.8049%" height="15" fill="rgb(221,78,26)" fg:x="1994" fg:w="69"/><text x="52.4080%" y="159.50">r..</text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="53.9367%" y="133" width="0.0262%" height="15" fill="rgb(250,127,30)" fg:x="2062" fg:w="1"/><text x="54.1867%" y="143.50"></text></g><g><title>rust_obj_parser`core::iter::traits::iterator::Iterator::partition (1,418 samples, 37.09%)</title><rect x="18.2056%" y="181" width="37.0913%" height="15" fill="rgb(230,49,44)" fg:x="696" fg:w="1418"/><text x="18.4556%" y="191.50">rust_obj_parser`core::iter::traits::iterator::Iterator::part..</text></g><g><title>rust_obj_parser`core::slice::memchr::memchr_general_case (51 samples, 1.33%)</title><rect x="53.9629%" y="165" width="1.3340%" height="15" fill="rgb(229,67,23)" fg:x="2063" fg:w="51"/><text x="54.2129%" y="175.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::dec2flt (4 samples, 0.10%)</title><rect x="55.2969%" y="181" width="0.1046%" height="15" fill="rgb(249,83,47)" fg:x="2114" fg:w="4"/><text x="55.5469%" y="191.50"></text></g><g><title>rust_obj_parser`core::ptr::drop_in_place&lt;rust_obj_parser::parser::create_thread_parse&lt;rust_obj_parser::parser::parse_obj_threaded::{{closure}},rust_obj_parser::parser::parse_obj_threaded::{{closure}}&gt;::{{closure}}&gt; (1 samples, 0.03%)</title><rect x="55.4015%" y="181" width="0.0262%" height="15" fill="rgb(215,43,3)" fg:x="2118" fg:w="1"/><text x="55.6515%" y="191.50"></text></g><g><title>rust_obj_parser`core::ptr::drop_in_place&lt;std::sync::mpsc::Sender&lt;rust_obj_parser::parser::Message&lt;rust_obj_parser::parser::ObjectInfo,rust_obj_parser::parser::VertexData&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="55.4277%" y="181" width="0.0262%" height="15" fill="rgb(238,154,13)" fg:x="2119" fg:w="1"/><text x="55.6777%" y="191.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::drop_chan (1 samples, 0.03%)</title><rect x="55.4277%" y="165" width="0.0262%" height="15" fill="rgb(219,56,2)" fg:x="2119" fg:w="1"/><text x="55.6777%" y="175.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::add_vertex (6 samples, 0.16%)</title><rect x="55.4538%" y="181" width="0.1569%" height="15" fill="rgb(233,0,4)" fg:x="2120" fg:w="6"/><text x="55.7038%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 1.70%)</title><rect x="57.2064%" y="165" width="1.7002%" height="15" fill="rgb(235,30,7)" fg:x="2187" fg:w="65"/><text x="57.4564%" y="175.50"></text></g><g><title>rust_obj_parser`core::num::_&lt;impl core::str::traits::FromStr for u64&gt;::from_str (15 samples, 0.39%)</title><rect x="58.9066%" y="165" width="0.3924%" height="15" fill="rgb(250,79,13)" fg:x="2252" fg:w="15"/><text x="59.1566%" y="175.50"></text></g><g><title>rust_obj_parser`core::str::iter::SplitInternal&lt;P&gt;::next (38 samples, 0.99%)</title><rect x="59.2990%" y="165" width="0.9940%" height="15" fill="rgb(211,146,34)" fg:x="2267" fg:w="38"/><text x="59.5490%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="72.7701%" y="133" width="0.0262%" height="15" fill="rgb(228,22,38)" fg:x="2782" fg:w="1"/><text x="73.0201%" y="143.50"></text></g><g><title>rust_obj_parser`__rdl_realloc (1 samples, 0.03%)</title><rect x="72.7962%" y="133" width="0.0262%" height="15" fill="rgb(235,168,5)" fg:x="2783" fg:w="1"/><text x="73.0462%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`large_entry_for_pointer_no_lock (1 samples, 0.03%)</title><rect x="72.8224%" y="101" width="0.0262%" height="15" fill="rgb(221,155,16)" fg:x="2784" fg:w="1"/><text x="73.0724%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (4 samples, 0.10%)</title><rect x="72.8485%" y="85" width="0.1046%" height="15" fill="rgb(215,215,53)" fg:x="2785" fg:w="4"/><text x="73.0985%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.16%)</title><rect x="72.9532%" y="69" width="0.1569%" height="15" fill="rgb(223,4,10)" fg:x="2789" fg:w="6"/><text x="73.2032%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.03%)</title><rect x="73.1101%" y="69" width="0.0262%" height="15" fill="rgb(234,103,6)" fg:x="2795" fg:w="1"/><text x="73.3601%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (7 samples, 0.18%)</title><rect x="73.1363%" y="69" width="0.1831%" height="15" fill="rgb(227,97,0)" fg:x="2796" fg:w="7"/><text x="73.3863%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (7 samples, 0.18%)</title><rect x="73.1363%" y="53" width="0.1831%" height="15" fill="rgb(234,150,53)" fg:x="2796" fg:w="7"/><text x="73.3863%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (7 samples, 0.18%)</title><rect x="73.1363%" y="37" width="0.1831%" height="15" fill="rgb(228,201,54)" fg:x="2796" fg:w="7"/><text x="73.3863%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.03%)</title><rect x="73.3194%" y="69" width="0.0262%" height="15" fill="rgb(222,22,37)" fg:x="2803" fg:w="1"/><text x="73.5694%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.03%)</title><rect x="73.3455%" y="69" width="0.0262%" height="15" fill="rgb(237,53,32)" fg:x="2804" fg:w="1"/><text x="73.5955%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.03%)</title><rect x="73.3455%" y="53" width="0.0262%" height="15" fill="rgb(233,25,53)" fg:x="2804" fg:w="1"/><text x="73.5955%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (2 samples, 0.05%)</title><rect x="73.3717%" y="53" width="0.0523%" height="15" fill="rgb(210,40,34)" fg:x="2805" fg:w="2"/><text x="73.6217%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.10%)</title><rect x="73.3717%" y="69" width="0.1046%" height="15" fill="rgb(241,220,44)" fg:x="2805" fg:w="4"/><text x="73.6217%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.05%)</title><rect x="73.4240%" y="53" width="0.0523%" height="15" fill="rgb(235,28,35)" fg:x="2807" fg:w="2"/><text x="73.6740%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.03%)</title><rect x="73.4502%" y="37" width="0.0262%" height="15" fill="rgb(210,56,17)" fg:x="2808" fg:w="1"/><text x="73.7002%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (81 samples, 2.12%)</title><rect x="72.9532%" y="85" width="2.1188%" height="15" fill="rgb(224,130,29)" fg:x="2789" fg:w="81"/><text x="73.2032%" y="95.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (61 samples, 1.60%)</title><rect x="73.4763%" y="69" width="1.5956%" height="15" fill="rgb(235,212,8)" fg:x="2809" fg:w="61"/><text x="73.7263%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (86 samples, 2.25%)</title><rect x="72.8485%" y="101" width="2.2495%" height="15" fill="rgb(223,33,50)" fg:x="2785" fg:w="86"/><text x="73.0985%" y="111.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="75.0719%" y="85" width="0.0262%" height="15" fill="rgb(219,149,13)" fg:x="2870" fg:w="1"/><text x="75.3219%" y="95.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (90 samples, 2.35%)</title><rect x="72.7701%" y="149" width="2.3542%" height="15" fill="rgb(250,156,29)" fg:x="2782" fg:w="90"/><text x="73.0201%" y="159.50">r..</text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (88 samples, 2.30%)</title><rect x="72.8224%" y="133" width="2.3019%" height="15" fill="rgb(216,193,19)" fg:x="2784" fg:w="88"/><text x="73.0724%" y="143.50">r..</text></g><g><title>libsystem_malloc.dylib`realloc (88 samples, 2.30%)</title><rect x="72.8224%" y="117" width="2.3019%" height="15" fill="rgb(216,135,14)" fg:x="2784" fg:w="88"/><text x="73.0724%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size_try_large (1 samples, 0.03%)</title><rect x="75.0981%" y="101" width="0.0262%" height="15" fill="rgb(241,47,5)" fg:x="2871" fg:w="1"/><text x="75.3481%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.03%)</title><rect x="75.0981%" y="85" width="0.0262%" height="15" fill="rgb(233,42,35)" fg:x="2871" fg:w="1"/><text x="75.3481%" y="95.50"></text></g><g><title>rust_obj_parser`core::num::_&lt;impl core::str::traits::FromStr for u64&gt;::from_str (112 samples, 2.93%)</title><rect x="75.1242%" y="149" width="2.9296%" height="15" fill="rgb(231,13,6)" fg:x="2872" fg:w="112"/><text x="75.3742%" y="159.50">ru..</text></g><g><title>rust_obj_parser`rust_obj_parser::parser::face (995 samples, 26.03%)</title><rect x="55.6108%" y="181" width="26.0267%" height="15" fill="rgb(207,181,40)" fg:x="2126" fg:w="995"/><text x="55.8608%" y="191.50">rust_obj_parser`rust_obj_parser::parser::f..</text></g><g><title>rust_obj_parser`rust_obj_parser::parser::add_vertex (816 samples, 21.34%)</title><rect x="60.2930%" y="165" width="21.3445%" height="15" fill="rgb(254,173,49)" fg:x="2305" fg:w="816"/><text x="60.5430%" y="175.50">rust_obj_parser`rust_obj_parser::p..</text></g><g><title>rust_obj_parser`core::str::iter::SplitInternal&lt;P&gt;::next (137 samples, 3.58%)</title><rect x="78.0539%" y="149" width="3.5836%" height="15" fill="rgb(221,1,38)" fg:x="2984" fg:w="137"/><text x="78.3039%" y="159.50">rust..</text></g><g><title>rust_obj_parser`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (149 samples, 3.90%)</title><rect x="82.0298%" y="165" width="3.8975%" height="15" fill="rgb(206,124,46)" fg:x="3136" fg:w="149"/><text x="82.2798%" y="175.50">rust..</text></g><g><title>rust_obj_parser`&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (13 samples, 0.34%)</title><rect x="85.9273%" y="165" width="0.3400%" height="15" fill="rgb(249,21,11)" fg:x="3285" fg:w="13"/><text x="86.1773%" y="175.50"></text></g><g><title>rust_obj_parser`&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::short_fast_pow10 (2 samples, 0.05%)</title><rect x="86.2673%" y="165" width="0.0523%" height="15" fill="rgb(222,201,40)" fg:x="3298" fg:w="2"/><text x="86.5173%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="86.3196%" y="133" width="0.0262%" height="15" fill="rgb(235,61,29)" fg:x="3300" fg:w="1"/><text x="86.5696%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="86.3196%" y="117" width="0.0262%" height="15" fill="rgb(219,207,3)" fg:x="3300" fg:w="1"/><text x="86.5696%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="86.3196%" y="101" width="0.0262%" height="15" fill="rgb(222,56,46)" fg:x="3300" fg:w="1"/><text x="86.5696%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="86.3196%" y="85" width="0.0262%" height="15" fill="rgb(239,76,54)" fg:x="3300" fg:w="1"/><text x="86.5696%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="86.3981%" y="85" width="0.0262%" height="15" fill="rgb(231,124,27)" fg:x="3303" fg:w="1"/><text x="86.6481%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.03%)</title><rect x="86.4243%" y="85" width="0.0262%" height="15" fill="rgb(249,195,6)" fg:x="3304" fg:w="1"/><text x="86.6743%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (5 samples, 0.13%)</title><rect x="86.4504%" y="85" width="0.1308%" height="15" fill="rgb(237,174,47)" fg:x="3305" fg:w="5"/><text x="86.7004%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.03%)</title><rect x="86.5551%" y="69" width="0.0262%" height="15" fill="rgb(206,201,31)" fg:x="3309" fg:w="1"/><text x="86.8051%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.26%)</title><rect x="86.3458%" y="117" width="0.2616%" height="15" fill="rgb(231,57,52)" fg:x="3301" fg:w="10"/><text x="86.5958%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.26%)</title><rect x="86.3458%" y="101" width="0.2616%" height="15" fill="rgb(248,177,22)" fg:x="3301" fg:w="10"/><text x="86.5958%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.03%)</title><rect x="86.5812%" y="85" width="0.0262%" height="15" fill="rgb(215,211,37)" fg:x="3310" fg:w="1"/><text x="86.8312%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="86.5812%" y="69" width="0.0262%" height="15" fill="rgb(241,128,51)" fg:x="3310" fg:w="1"/><text x="86.8312%" y="79.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.31%)</title><rect x="86.3196%" y="165" width="0.3139%" height="15" fill="rgb(227,165,31)" fg:x="3300" fg:w="12"/><text x="86.5696%" y="175.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (12 samples, 0.31%)</title><rect x="86.3196%" y="149" width="0.3139%" height="15" fill="rgb(228,167,24)" fg:x="3300" fg:w="12"/><text x="86.5696%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.29%)</title><rect x="86.3458%" y="133" width="0.2877%" height="15" fill="rgb(228,143,12)" fg:x="3301" fg:w="11"/><text x="86.5958%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="86.6074%" y="117" width="0.0262%" height="15" fill="rgb(249,149,8)" fg:x="3311" fg:w="1"/><text x="86.8574%" y="127.50"></text></g><g><title>rust_obj_parser`&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (37 samples, 0.97%)</title><rect x="95.8148%" y="149" width="0.9678%" height="15" fill="rgb(243,35,44)" fg:x="3663" fg:w="37"/><text x="96.0648%" y="159.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::extract_sign (5 samples, 0.13%)</title><rect x="96.7826%" y="149" width="0.1308%" height="15" fill="rgb(246,89,9)" fg:x="3700" fg:w="5"/><text x="97.0326%" y="159.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::dec2flt (443 samples, 11.59%)</title><rect x="86.6335%" y="165" width="11.5878%" height="15" fill="rgb(233,213,13)" fg:x="3312" fg:w="443"/><text x="86.8835%" y="175.50">rust_obj_parser`c..</text></g><g><title>rust_obj_parser`core::num::dec2flt::parse::parse_decimal (50 samples, 1.31%)</title><rect x="96.9134%" y="149" width="1.3079%" height="15" fill="rgb(233,141,41)" fg:x="3705" fg:w="50"/><text x="97.1634%" y="159.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::extract_sign (7 samples, 0.18%)</title><rect x="98.2213%" y="165" width="0.1831%" height="15" fill="rgb(239,167,4)" fg:x="3755" fg:w="7"/><text x="98.4713%" y="175.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::vertex (651 samples, 17.03%)</title><rect x="81.6375%" y="181" width="17.0285%" height="15" fill="rgb(209,217,16)" fg:x="3121" fg:w="651"/><text x="81.8875%" y="191.50">rust_obj_parser`rust_obj_p..</text></g><g><title>rust_obj_parser`core::num::dec2flt::parse::parse_decimal (10 samples, 0.26%)</title><rect x="98.4044%" y="165" width="0.2616%" height="15" fill="rgb(219,88,35)" fg:x="3762" fg:w="10"/><text x="98.6544%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="98.6660%" y="149" width="0.0523%" height="15" fill="rgb(220,193,23)" fg:x="3772" fg:w="2"/><text x="98.9160%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="98.6921%" y="133" width="0.0262%" height="15" fill="rgb(230,90,52)" fg:x="3773" fg:w="1"/><text x="98.9421%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="98.6921%" y="117" width="0.0262%" height="15" fill="rgb(252,106,19)" fg:x="3773" fg:w="1"/><text x="98.9421%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="98.6921%" y="101" width="0.0262%" height="15" fill="rgb(206,74,20)" fg:x="3773" fg:w="1"/><text x="98.9421%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="98.7183%" y="149" width="0.0262%" height="15" fill="rgb(230,138,44)" fg:x="3774" fg:w="1"/><text x="98.9683%" y="159.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::Sender&lt;T&gt;::send (4 samples, 0.10%)</title><rect x="98.6660%" y="181" width="0.1046%" height="15" fill="rgb(235,182,43)" fg:x="3772" fg:w="4"/><text x="98.9160%" y="191.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::send (4 samples, 0.10%)</title><rect x="98.6660%" y="165" width="0.1046%" height="15" fill="rgb(242,16,51)" fg:x="3772" fg:w="4"/><text x="98.9160%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="98.7444%" y="149" width="0.0262%" height="15" fill="rgb(248,9,4)" fg:x="3775" fg:w="1"/><text x="98.9944%" y="159.50"></text></g><g><title>rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace (3,229 samples, 84.46%)</title><rect x="14.3343%" y="197" width="84.4625%" height="15" fill="rgb(210,31,22)" fg:x="548" fg:w="3229"/><text x="14.5843%" y="207.50">rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::send (1 samples, 0.03%)</title><rect x="98.7706%" y="181" width="0.0262%" height="15" fill="rgb(239,54,39)" fg:x="3776" fg:w="1"/><text x="99.0206%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="98.9275%" y="149" width="0.0523%" height="15" fill="rgb(230,99,41)" fg:x="3782" fg:w="2"/><text x="99.1775%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="98.9275%" y="133" width="0.0523%" height="15" fill="rgb(253,106,12)" fg:x="3782" fg:w="2"/><text x="99.1775%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="98.9275%" y="117" width="0.0523%" height="15" fill="rgb(213,46,41)" fg:x="3782" fg:w="2"/><text x="99.1775%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="98.9537%" y="101" width="0.0262%" height="15" fill="rgb(215,133,35)" fg:x="3783" fg:w="1"/><text x="99.2037%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.05%)</title><rect x="98.9799%" y="149" width="0.0523%" height="15" fill="rgb(213,28,5)" fg:x="3784" fg:w="2"/><text x="99.2299%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="99.0322%" y="149" width="0.0262%" height="15" fill="rgb(215,77,49)" fg:x="3786" fg:w="1"/><text x="99.2822%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_allocate_and_initialize_for_key (7 samples, 0.18%)</title><rect x="98.9014%" y="165" width="0.1831%" height="15" fill="rgb(248,100,22)" fg:x="3781" fg:w="7"/><text x="99.1514%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.03%)</title><rect x="99.0583%" y="149" width="0.0262%" height="15" fill="rgb(208,67,9)" fg:x="3787" fg:w="1"/><text x="99.3083%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.31%)</title><rect x="98.7968%" y="181" width="0.3139%" height="15" fill="rgb(219,133,21)" fg:x="3777" fg:w="12"/><text x="99.0468%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.03%)</title><rect x="99.0845%" y="165" width="0.0262%" height="15" fill="rgb(246,46,29)" fg:x="3788" fg:w="1"/><text x="99.3345%" y="175.50"></text></g><g><title>rust_obj_parser`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="99.1106%" y="181" width="0.0262%" height="15" fill="rgb(246,185,52)" fg:x="3789" fg:w="1"/><text x="99.3606%" y="191.50"></text></g><g><title>libdyld.dylib`_tlv_atexit (1 samples, 0.03%)</title><rect x="99.1368%" y="165" width="0.0262%" height="15" fill="rgb(252,136,11)" fg:x="3790" fg:w="1"/><text x="99.3868%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="99.1368%" y="149" width="0.0262%" height="15" fill="rgb(219,138,53)" fg:x="3790" fg:w="1"/><text x="99.3868%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="99.1368%" y="133" width="0.0262%" height="15" fill="rgb(211,51,23)" fg:x="3790" fg:w="1"/><text x="99.3868%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="99.1368%" y="117" width="0.0262%" height="15" fill="rgb(247,221,28)" fg:x="3790" fg:w="1"/><text x="99.3868%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="99.1368%" y="101" width="0.0262%" height="15" fill="rgb(251,222,45)" fg:x="3790" fg:w="1"/><text x="99.3868%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="99.1630%" y="165" width="0.0262%" height="15" fill="rgb(217,162,53)" fg:x="3791" fg:w="1"/><text x="99.4130%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="99.1630%" y="149" width="0.0262%" height="15" fill="rgb(229,93,14)" fg:x="3791" fg:w="1"/><text x="99.4130%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="99.1630%" y="133" width="0.0262%" height="15" fill="rgb(209,67,49)" fg:x="3791" fg:w="1"/><text x="99.4130%" y="143.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="99.1891%" y="165" width="0.0262%" height="15" fill="rgb(213,87,29)" fg:x="3792" fg:w="1"/><text x="99.4391%" y="175.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="99.1891%" y="149" width="0.0262%" height="15" fill="rgb(205,151,52)" fg:x="3792" fg:w="1"/><text x="99.4391%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="99.1891%" y="133" width="0.0262%" height="15" fill="rgb(253,215,39)" fg:x="3792" fg:w="1"/><text x="99.4391%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="99.1891%" y="117" width="0.0262%" height="15" fill="rgb(221,220,41)" fg:x="3792" fg:w="1"/><text x="99.4391%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="99.1891%" y="101" width="0.0262%" height="15" fill="rgb(218,133,21)" fg:x="3792" fg:w="1"/><text x="99.4391%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="99.1891%" y="85" width="0.0262%" height="15" fill="rgb(221,193,43)" fg:x="3792" fg:w="1"/><text x="99.4391%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="99.1891%" y="69" width="0.0262%" height="15" fill="rgb(240,128,52)" fg:x="3792" fg:w="1"/><text x="99.4391%" y="79.50"></text></g><g><title>rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}} (3,253 samples, 85.09%)</title><rect x="14.1512%" y="213" width="85.0902%" height="15" fill="rgb(253,114,12)" fg:x="541" fg:w="3253"/><text x="14.4012%" y="223.50">rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_obj_parser`std::sys_common::thread_info::set (17 samples, 0.44%)</title><rect x="98.7968%" y="197" width="0.4447%" height="15" fill="rgb(215,223,47)" fg:x="3777" fg:w="17"/><text x="99.0468%" y="207.50"></text></g><g><title>rust_obj_parser`std::thread::local::fast::Key&lt;T&gt;::try_initialize (4 samples, 0.10%)</title><rect x="99.1368%" y="181" width="0.1046%" height="15" fill="rgb(248,225,23)" fg:x="3790" fg:w="4"/><text x="99.3868%" y="191.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="99.2153%" y="165" width="0.0262%" height="15" fill="rgb(250,108,0)" fg:x="3793" fg:w="1"/><text x="99.4653%" y="175.50"></text></g><g><title>rust_obj_parser`std::sys::unix::stack_overflow::imp::make_handler (26 samples, 0.68%)</title><rect x="99.2414%" y="213" width="0.6801%" height="15" fill="rgb(228,208,7)" fg:x="3794" fg:w="26"/><text x="99.4914%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (15 samples, 0.39%)</title><rect x="99.5292%" y="197" width="0.3924%" height="15" fill="rgb(244,45,10)" fg:x="3805" fg:w="15"/><text x="99.7792%" y="207.50"></text></g><g><title>rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.03%)</title><rect x="99.9215%" y="213" width="0.0262%" height="15" fill="rgb(207,125,25)" fg:x="3820" fg:w="1"/><text x="100.1715%" y="223.50"></text></g><g><title>all (3,823 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="3823"/><text x="0.2500%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (3,467 samples, 90.69%)</title><rect x="9.3121%" y="261" width="90.6879%" height="15" fill="rgb(249,80,12)" fg:x="356" fg:w="3467"/><text x="9.5621%" y="271.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (3,391 samples, 88.70%)</title><rect x="11.3000%" y="245" width="88.7000%" height="15" fill="rgb(221,65,9)" fg:x="432" fg:w="3391"/><text x="11.5500%" y="255.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::new::thread_start (3,316 samples, 86.74%)</title><rect x="13.2618%" y="229" width="86.7382%" height="15" fill="rgb(235,49,36)" fg:x="507" fg:w="3316"/><text x="13.5118%" y="239.50">rust_obj_parser`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_obj_parser`std::thread::Thread::cname (2 samples, 0.05%)</title><rect x="99.9477%" y="213" width="0.0523%" height="15" fill="rgb(225,32,20)" fg:x="3821" fg:w="2"/><text x="100.1977%" y="223.50"></text></g></svg></svg>