<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="1583"><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.06%)</title><rect x="0.0000%" y="229" width="0.0632%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="0.0632%" y="149" width="0.0632%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3132%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="0.1263%" y="149" width="0.0632%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.3763%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="0.1263%" y="133" width="0.0632%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.3763%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="0.1263%" y="117" width="0.0632%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.3763%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="0.1895%" y="133" width="0.0632%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.4395%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="0.1895%" y="117" width="0.0632%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="0.4395%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (1 samples, 0.06%)</title><rect x="0.1895%" y="101" width="0.0632%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.4395%" y="111.50"></text></g><g><title>rust_obj_parser`&lt;alloc::string::String as core::clone::Clone&gt;::clone (18 samples, 1.14%)</title><rect x="0.1895%" y="149" width="1.1371%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="18"/><text x="0.4395%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (17 samples, 1.07%)</title><rect x="0.2527%" y="133" width="1.0739%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="17"/><text x="0.5027%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.13%)</title><rect x="1.5793%" y="133" width="0.1263%" height="15" fill="rgb(250,228,42)" fg:x="25" fg:w="2"/><text x="1.8293%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.19%)</title><rect x="1.7056%" y="133" width="0.1895%" height="15" fill="rgb(240,193,28)" fg:x="27" fg:w="3"/><text x="1.9556%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.19%)</title><rect x="1.7056%" y="117" width="0.1895%" height="15" fill="rgb(216,20,37)" fg:x="27" fg:w="3"/><text x="1.9556%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.19%)</title><rect x="1.7056%" y="101" width="0.1895%" height="15" fill="rgb(206,188,39)" fg:x="27" fg:w="3"/><text x="1.9556%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.13%)</title><rect x="1.7688%" y="85" width="0.1263%" height="15" fill="rgb(217,207,13)" fg:x="28" fg:w="2"/><text x="2.0188%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="1.8951%" y="117" width="0.0632%" height="15" fill="rgb(231,73,38)" fg:x="30" fg:w="1"/><text x="2.1451%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.19%)</title><rect x="1.8951%" y="133" width="0.1895%" height="15" fill="rgb(225,20,46)" fg:x="30" fg:w="3"/><text x="2.1451%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.13%)</title><rect x="1.9583%" y="117" width="0.1263%" height="15" fill="rgb(210,31,41)" fg:x="31" fg:w="2"/><text x="2.2083%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (1 samples, 0.06%)</title><rect x="2.0846%" y="133" width="0.0632%" height="15" fill="rgb(221,200,47)" fg:x="33" fg:w="1"/><text x="2.3346%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.19%)</title><rect x="2.1478%" y="133" width="0.1895%" height="15" fill="rgb(226,26,5)" fg:x="34" fg:w="3"/><text x="2.3978%" y="143.50"></text></g><g><title>rust_obj_parser`&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.57%)</title><rect x="2.3373%" y="133" width="0.5685%" height="15" fill="rgb(249,33,26)" fg:x="37" fg:w="9"/><text x="2.5873%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.57%)</title><rect x="2.3373%" y="117" width="0.5685%" height="15" fill="rgb(235,183,28)" fg:x="37" fg:w="9"/><text x="2.5873%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="2.9690%" y="101" width="0.0632%" height="15" fill="rgb(221,5,38)" fg:x="47" fg:w="1"/><text x="3.2190%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="3.0954%" y="85" width="0.0632%" height="15" fill="rgb(247,18,42)" fg:x="49" fg:w="1"/><text x="3.3454%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="3.0954%" y="69" width="0.0632%" height="15" fill="rgb(241,131,45)" fg:x="49" fg:w="1"/><text x="3.3454%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="3.0954%" y="53" width="0.0632%" height="15" fill="rgb(249,31,29)" fg:x="49" fg:w="1"/><text x="3.3454%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="3.1586%" y="85" width="0.0632%" height="15" fill="rgb(225,111,53)" fg:x="50" fg:w="1"/><text x="3.4086%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="3.1586%" y="69" width="0.0632%" height="15" fill="rgb(238,160,17)" fg:x="50" fg:w="1"/><text x="3.4086%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (22 samples, 1.39%)</title><rect x="3.2217%" y="69" width="1.3898%" height="15" fill="rgb(214,148,48)" fg:x="51" fg:w="22"/><text x="3.4717%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (1 samples, 0.06%)</title><rect x="4.6115%" y="53" width="0.0632%" height="15" fill="rgb(232,36,49)" fg:x="73" fg:w="1"/><text x="4.8615%" y="63.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (3 samples, 0.19%)</title><rect x="4.6115%" y="69" width="0.1895%" height="15" fill="rgb(209,103,24)" fg:x="73" fg:w="3"/><text x="4.8615%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.13%)</title><rect x="4.6747%" y="53" width="0.1263%" height="15" fill="rgb(229,88,8)" fg:x="74" fg:w="2"/><text x="4.9247%" y="63.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::WaitToken::wait (29 samples, 1.83%)</title><rect x="3.0322%" y="101" width="1.8320%" height="15" fill="rgb(213,181,19)" fg:x="48" fg:w="29"/><text x="3.2822%" y="111.50">r..</text></g><g><title>rust_obj_parser`std::thread::park (26 samples, 1.64%)</title><rect x="3.2217%" y="85" width="1.6425%" height="15" fill="rgb(254,191,54)" fg:x="51" fg:w="26"/><text x="3.4717%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (1 samples, 0.06%)</title><rect x="4.8010%" y="69" width="0.0632%" height="15" fill="rgb(241,83,37)" fg:x="76" fg:w="1"/><text x="5.0510%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="4.9274%" y="69" width="0.0632%" height="15" fill="rgb(233,36,39)" fg:x="78" fg:w="1"/><text x="5.1774%" y="79.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 2.40%)</title><rect x="2.9059%" y="133" width="2.4005%" height="15" fill="rgb(226,3,54)" fg:x="46" fg:w="38"/><text x="3.1559%" y="143.50">ru..</text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::recv (38 samples, 2.40%)</title><rect x="2.9059%" y="117" width="2.4005%" height="15" fill="rgb(245,192,40)" fg:x="46" fg:w="38"/><text x="3.1559%" y="127.50">ru..</text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::try_recv (7 samples, 0.44%)</title><rect x="4.8642%" y="101" width="0.4422%" height="15" fill="rgb(238,167,29)" fg:x="77" fg:w="7"/><text x="5.1142%" y="111.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::pop (7 samples, 0.44%)</title><rect x="4.8642%" y="85" width="0.4422%" height="15" fill="rgb(232,182,51)" fg:x="77" fg:w="7"/><text x="5.1142%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.32%)</title><rect x="4.9905%" y="69" width="0.3159%" height="15" fill="rgb(231,60,39)" fg:x="79" fg:w="5"/><text x="5.2405%" y="79.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="5.3064%" y="133" width="0.0632%" height="15" fill="rgb(208,69,12)" fg:x="84" fg:w="1"/><text x="5.5564%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="5.3064%" y="117" width="0.0632%" height="15" fill="rgb(235,93,37)" fg:x="84" fg:w="1"/><text x="5.5564%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (1 samples, 0.06%)</title><rect x="5.3064%" y="101" width="0.0632%" height="15" fill="rgb(213,116,39)" fg:x="84" fg:w="1"/><text x="5.5564%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="5.3696%" y="101" width="0.0632%" height="15" fill="rgb(222,207,29)" fg:x="85" fg:w="1"/><text x="5.6196%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="5.3696%" y="85" width="0.0632%" height="15" fill="rgb(206,96,30)" fg:x="85" fg:w="1"/><text x="5.6196%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="5.3696%" y="69" width="0.0632%" height="15" fill="rgb(218,138,4)" fg:x="85" fg:w="1"/><text x="5.6196%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.06%)</title><rect x="5.3696%" y="53" width="0.0632%" height="15" fill="rgb(250,191,14)" fg:x="85" fg:w="1"/><text x="5.6196%" y="63.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.13%)</title><rect x="5.3696%" y="133" width="0.1263%" height="15" fill="rgb(239,60,40)" fg:x="85" fg:w="2"/><text x="5.6196%" y="143.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (2 samples, 0.13%)</title><rect x="5.3696%" y="117" width="0.1263%" height="15" fill="rgb(206,27,48)" fg:x="85" fg:w="2"/><text x="5.6196%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.06%)</title><rect x="5.4327%" y="101" width="0.0632%" height="15" fill="rgb(225,35,8)" fg:x="86" fg:w="1"/><text x="5.6827%" y="111.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.13%)</title><rect x="5.4959%" y="133" width="0.1263%" height="15" fill="rgb(250,213,24)" fg:x="87" fg:w="2"/><text x="5.7459%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.13%)</title><rect x="5.4959%" y="117" width="0.1263%" height="15" fill="rgb(247,123,22)" fg:x="87" fg:w="2"/><text x="5.7459%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="5.6222%" y="101" width="0.0632%" height="15" fill="rgb(231,138,38)" fg:x="89" fg:w="1"/><text x="5.8722%" y="111.50"></text></g><g><title>rust_obj_parser`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="5.6222%" y="117" width="0.1263%" height="15" fill="rgb(231,145,46)" fg:x="89" fg:w="2"/><text x="5.8722%" y="127.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.06%)</title><rect x="5.6854%" y="101" width="0.0632%" height="15" fill="rgb(251,118,11)" fg:x="90" fg:w="1"/><text x="5.9354%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="5.6854%" y="85" width="0.0632%" height="15" fill="rgb(217,147,25)" fg:x="90" fg:w="1"/><text x="5.9354%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="5.6854%" y="69" width="0.0632%" height="15" fill="rgb(247,81,37)" fg:x="90" fg:w="1"/><text x="5.9354%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="5.6854%" y="53" width="0.0632%" height="15" fill="rgb(209,12,38)" fg:x="90" fg:w="1"/><text x="5.9354%" y="63.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::Sender&lt;T&gt;::send (10 samples, 0.63%)</title><rect x="5.8117%" y="101" width="0.6317%" height="15" fill="rgb(227,1,9)" fg:x="92" fg:w="10"/><text x="6.0617%" y="111.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::stream::Packet&lt;T&gt;::send (10 samples, 0.63%)</title><rect x="5.8117%" y="85" width="0.6317%" height="15" fill="rgb(248,47,43)" fg:x="92" fg:w="10"/><text x="6.0617%" y="95.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::SignalToken::signal (10 samples, 0.63%)</title><rect x="5.8117%" y="69" width="0.6317%" height="15" fill="rgb(221,10,30)" fg:x="92" fg:w="10"/><text x="6.0617%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (10 samples, 0.63%)</title><rect x="5.8117%" y="53" width="0.6317%" height="15" fill="rgb(210,229,1)" fg:x="92" fg:w="10"/><text x="6.0617%" y="63.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::stream::Packet&lt;T&gt;::send (1 samples, 0.06%)</title><rect x="6.4435%" y="101" width="0.0632%" height="15" fill="rgb(222,148,37)" fg:x="102" fg:w="1"/><text x="6.6935%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="6.5066%" y="85" width="0.0632%" height="15" fill="rgb(234,67,33)" fg:x="103" fg:w="1"/><text x="6.7566%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="6.5066%" y="69" width="0.0632%" height="15" fill="rgb(247,98,35)" fg:x="103" fg:w="1"/><text x="6.7566%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="6.5066%" y="53" width="0.0632%" height="15" fill="rgb(247,138,52)" fg:x="103" fg:w="1"/><text x="6.7566%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.13%)</title><rect x="6.5698%" y="69" width="0.1263%" height="15" fill="rgb(213,79,30)" fg:x="104" fg:w="2"/><text x="6.8198%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="6.6330%" y="53" width="0.0632%" height="15" fill="rgb(246,177,23)" fg:x="105" fg:w="1"/><text x="6.8830%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="6.6330%" y="37" width="0.0632%" height="15" fill="rgb(230,62,27)" fg:x="105" fg:w="1"/><text x="6.8830%" y="47.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.19%)</title><rect x="6.5698%" y="85" width="0.1895%" height="15" fill="rgb(216,154,8)" fg:x="104" fg:w="3"/><text x="6.8198%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_destroy (1 samples, 0.06%)</title><rect x="6.6961%" y="69" width="0.0632%" height="15" fill="rgb(244,35,45)" fg:x="106" fg:w="1"/><text x="6.9461%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (7 samples, 0.44%)</title><rect x="6.7593%" y="69" width="0.4422%" height="15" fill="rgb(251,115,12)" fg:x="107" fg:w="7"/><text x="7.0093%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (21 samples, 1.33%)</title><rect x="7.3279%" y="37" width="1.3266%" height="15" fill="rgb(240,54,50)" fg:x="116" fg:w="21"/><text x="7.5779%" y="47.50"></text></g><g><title>rust_obj_parser`core::ptr::drop_in_place&lt;rust_obj_parser::parser::ThreadPool&gt; (49 samples, 3.10%)</title><rect x="5.6222%" y="133" width="3.0954%" height="15" fill="rgb(233,84,52)" fg:x="89" fg:w="49"/><text x="5.8722%" y="143.50">rus..</text></g><g><title>rust_obj_parser`&lt;rust_obj_parser::parser::ThreadPool as core::ops::drop::Drop&gt;::drop (47 samples, 2.97%)</title><rect x="5.7486%" y="117" width="2.9690%" height="15" fill="rgb(207,117,47)" fg:x="91" fg:w="47"/><text x="5.9986%" y="127.50">rus..</text></g><g><title>rust_obj_parser`std::thread::JoinHandle&lt;T&gt;::join (35 samples, 2.21%)</title><rect x="6.5066%" y="101" width="2.2110%" height="15" fill="rgb(249,43,39)" fg:x="103" fg:w="35"/><text x="6.7566%" y="111.50">r..</text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::join (31 samples, 1.96%)</title><rect x="6.7593%" y="85" width="1.9583%" height="15" fill="rgb(209,38,44)" fg:x="107" fg:w="31"/><text x="7.0093%" y="95.50">r..</text></g><g><title>libsystem_pthread.dylib`_pthread_join (24 samples, 1.52%)</title><rect x="7.2015%" y="69" width="1.5161%" height="15" fill="rgb(236,212,23)" fg:x="114" fg:w="24"/><text x="7.4515%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_deallocate (22 samples, 1.39%)</title><rect x="7.3279%" y="53" width="1.3898%" height="15" fill="rgb(242,79,21)" fg:x="116" fg:w="22"/><text x="7.5779%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_vm_deallocate (1 samples, 0.06%)</title><rect x="8.6545%" y="37" width="0.0632%" height="15" fill="rgb(211,96,35)" fg:x="137" fg:w="1"/><text x="8.9045%" y="47.50"></text></g><g><title>rust_obj_parser`core::str::_&lt;impl str&gt;::rfind (66 samples, 4.17%)</title><rect x="8.7176%" y="133" width="4.1693%" height="15" fill="rgb(253,215,40)" fg:x="138" fg:w="66"/><text x="8.9676%" y="143.50">rust_..</text></g><g><title>rust_obj_parser`core::str::pattern::TwoWaySearcher::next_back (66 samples, 4.17%)</title><rect x="8.7176%" y="117" width="4.1693%" height="15" fill="rgb(211,81,21)" fg:x="138" fg:w="66"/><text x="8.9676%" y="127.50">rust_..</text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.13%)</title><rect x="12.8869%" y="117" width="0.1263%" height="15" fill="rgb(208,190,38)" fg:x="204" fg:w="2"/><text x="13.1369%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="13.0133%" y="117" width="0.0632%" height="15" fill="rgb(235,213,38)" fg:x="206" fg:w="1"/><text x="13.2633%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size_try_large (1 samples, 0.06%)</title><rect x="13.0133%" y="101" width="0.0632%" height="15" fill="rgb(237,122,38)" fg:x="206" fg:w="1"/><text x="13.2633%" y="111.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::ObjectInfo::extend (6 samples, 0.38%)</title><rect x="12.8869%" y="133" width="0.3790%" height="15" fill="rgb(244,218,35)" fg:x="204" fg:w="6"/><text x="13.1369%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.19%)</title><rect x="13.0764%" y="117" width="0.1895%" height="15" fill="rgb(240,68,47)" fg:x="207" fg:w="3"/><text x="13.3264%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="13.4555%" y="53" width="0.0632%" height="15" fill="rgb(210,16,53)" fg:x="213" fg:w="1"/><text x="13.7055%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="13.4555%" y="37" width="0.0632%" height="15" fill="rgb(235,124,12)" fg:x="213" fg:w="1"/><text x="13.7055%" y="47.50"></text></g><g><title>rust_obj_parser`__rdl_alloc (4 samples, 0.25%)</title><rect x="13.3291%" y="117" width="0.2527%" height="15" fill="rgb(224,169,11)" fg:x="211" fg:w="4"/><text x="13.5791%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (4 samples, 0.25%)</title><rect x="13.3291%" y="101" width="0.2527%" height="15" fill="rgb(250,166,2)" fg:x="211" fg:w="4"/><text x="13.5791%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (4 samples, 0.25%)</title><rect x="13.3291%" y="85" width="0.2527%" height="15" fill="rgb(242,216,29)" fg:x="211" fg:w="4"/><text x="13.5791%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (4 samples, 0.25%)</title><rect x="13.3291%" y="69" width="0.2527%" height="15" fill="rgb(230,116,27)" fg:x="211" fg:w="4"/><text x="13.5791%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="13.5186%" y="53" width="0.0632%" height="15" fill="rgb(228,99,48)" fg:x="214" fg:w="1"/><text x="13.7686%" y="63.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::SignalToken::signal (12 samples, 0.76%)</title><rect x="13.5818%" y="117" width="0.7581%" height="15" fill="rgb(253,11,6)" fg:x="215" fg:w="12"/><text x="13.8318%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (12 samples, 0.76%)</title><rect x="13.5818%" y="101" width="0.7581%" height="15" fill="rgb(247,143,39)" fg:x="215" fg:w="12"/><text x="13.8318%" y="111.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::Sender&lt;T&gt;::send (24 samples, 1.52%)</title><rect x="13.2660%" y="133" width="1.5161%" height="15" fill="rgb(236,97,10)" fg:x="210" fg:w="24"/><text x="13.5160%" y="143.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::oneshot::Packet&lt;T&gt;::send (7 samples, 0.44%)</title><rect x="14.3399%" y="117" width="0.4422%" height="15" fill="rgb(233,208,19)" fg:x="227" fg:w="7"/><text x="14.5899%" y="127.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::SignalToken::signal (7 samples, 0.44%)</title><rect x="14.3399%" y="101" width="0.4422%" height="15" fill="rgb(216,164,2)" fg:x="227" fg:w="7"/><text x="14.5899%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (7 samples, 0.44%)</title><rect x="14.3399%" y="85" width="0.4422%" height="15" fill="rgb(220,129,5)" fg:x="227" fg:w="7"/><text x="14.5899%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.06%)</title><rect x="14.7821%" y="117" width="0.0632%" height="15" fill="rgb(242,17,10)" fg:x="234" fg:w="1"/><text x="15.0321%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (19 samples, 1.20%)</title><rect x="14.8452%" y="101" width="1.2003%" height="15" fill="rgb(242,107,0)" fg:x="235" fg:w="19"/><text x="15.0952%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (8 samples, 0.51%)</title><rect x="16.9931%" y="85" width="0.5054%" height="15" fill="rgb(251,28,31)" fg:x="269" fg:w="8"/><text x="17.2431%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_protect_trap (4 samples, 0.25%)</title><rect x="17.4984%" y="85" width="0.2527%" height="15" fill="rgb(233,223,10)" fg:x="277" fg:w="4"/><text x="17.7484%" y="95.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::parse_obj_threaded (261 samples, 16.49%)</title><rect x="1.3266%" y="149" width="16.4877%" height="15" fill="rgb(215,21,27)" fg:x="21" fg:w="261"/><text x="1.5766%" y="159.50">rust_obj_parser`rust_obj_..</text></g><g><title>rust_obj_parser`std::thread::spawn (48 samples, 3.03%)</title><rect x="14.7821%" y="133" width="3.0322%" height="15" fill="rgb(232,23,21)" fg:x="234" fg:w="48"/><text x="15.0321%" y="143.50">rus..</text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::new (47 samples, 2.97%)</title><rect x="14.8452%" y="117" width="2.9690%" height="15" fill="rgb(244,5,23)" fg:x="235" fg:w="47"/><text x="15.0952%" y="127.50">rus..</text></g><g><title>libsystem_pthread.dylib`_pthread_create (28 samples, 1.77%)</title><rect x="16.0455%" y="101" width="1.7688%" height="15" fill="rgb(226,81,46)" fg:x="254" fg:w="28"/><text x="16.2955%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_vm_protect (1 samples, 0.06%)</title><rect x="17.7511%" y="85" width="0.0632%" height="15" fill="rgb(247,70,30)" fg:x="281" fg:w="1"/><text x="18.0011%" y="95.50"></text></g><g><title>0x1 (283 samples, 17.88%)</title><rect x="0.0000%" y="261" width="17.8774%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="283"/><text x="0.2500%" y="271.50">0x1</text></g><g><title>libdyld.dylib`start (283 samples, 17.88%)</title><rect x="0.0000%" y="245" width="17.8774%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="283"/><text x="0.2500%" y="255.50">libdyld.dylib`start</text></g><g><title>rust_obj_parser`main (282 samples, 17.81%)</title><rect x="0.0632%" y="229" width="17.8143%" height="15" fill="rgb(223,113,26)" fg:x="1" fg:w="282"/><text x="0.3132%" y="239.50">rust_obj_parser`main</text></g><g><title>rust_obj_parser`std::rt::lang_start_internal (282 samples, 17.81%)</title><rect x="0.0632%" y="213" width="17.8143%" height="15" fill="rgb(206,192,2)" fg:x="1" fg:w="282"/><text x="0.3132%" y="223.50">rust_obj_parser`std::rt::lan..</text></g><g><title>rust_obj_parser`std::rt::lang_start::_{{closure}} (282 samples, 17.81%)</title><rect x="0.0632%" y="197" width="17.8143%" height="15" fill="rgb(241,108,4)" fg:x="1" fg:w="282"/><text x="0.3132%" y="207.50">rust_obj_parser`std::rt::lan..</text></g><g><title>rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace (282 samples, 17.81%)</title><rect x="0.0632%" y="181" width="17.8143%" height="15" fill="rgb(247,173,49)" fg:x="1" fg:w="282"/><text x="0.3132%" y="191.50">rust_obj_parser`std::sys_com..</text></g><g><title>rust_obj_parser`rust_obj_parser::main (282 samples, 17.81%)</title><rect x="0.0632%" y="165" width="17.8143%" height="15" fill="rgb(224,114,35)" fg:x="1" fg:w="282"/><text x="0.3132%" y="175.50">rust_obj_parser`rust_obj_par..</text></g><g><title>rust_obj_parser`std::fs::read_to_string::inner (1 samples, 0.06%)</title><rect x="17.8143%" y="149" width="0.0632%" height="15" fill="rgb(245,159,27)" fg:x="282" fg:w="1"/><text x="18.0643%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.06%)</title><rect x="17.8143%" y="133" width="0.0632%" height="15" fill="rgb(245,172,44)" fg:x="282" fg:w="1"/><text x="18.0643%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (34 samples, 2.15%)</title><rect x="17.8774%" y="261" width="2.1478%" height="15" fill="rgb(236,23,11)" fg:x="283" fg:w="34"/><text x="18.1274%" y="271.50">l..</text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.13%)</title><rect x="20.0253%" y="261" width="0.1263%" height="15" fill="rgb(205,117,38)" fg:x="317" fg:w="2"/><text x="20.2753%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__thread_selfid (2 samples, 0.13%)</title><rect x="22.1731%" y="245" width="0.1263%" height="15" fill="rgb(237,72,25)" fg:x="351" fg:w="2"/><text x="22.4231%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__disable_threadsignal (3 samples, 0.19%)</title><rect x="22.2994%" y="229" width="0.1895%" height="15" fill="rgb(244,70,9)" fg:x="353" fg:w="3"/><text x="22.5494%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (22 samples, 1.39%)</title><rect x="22.4889%" y="229" width="1.3898%" height="15" fill="rgb(217,125,39)" fg:x="356" fg:w="22"/><text x="22.7389%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__sigaltstack (3 samples, 0.19%)</title><rect x="23.8787%" y="229" width="0.1895%" height="15" fill="rgb(235,36,10)" fg:x="378" fg:w="3"/><text x="24.1287%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="24.0682%" y="165" width="0.0632%" height="15" fill="rgb(251,123,47)" fg:x="381" fg:w="1"/><text x="24.3182%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="24.0682%" y="149" width="0.0632%" height="15" fill="rgb(221,13,13)" fg:x="381" fg:w="1"/><text x="24.3182%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="24.0682%" y="133" width="0.0632%" height="15" fill="rgb(238,131,9)" fg:x="381" fg:w="1"/><text x="24.3182%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.25%)</title><rect x="24.1314%" y="165" width="0.2527%" height="15" fill="rgb(211,50,8)" fg:x="382" fg:w="4"/><text x="24.3814%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.19%)</title><rect x="24.1946%" y="149" width="0.1895%" height="15" fill="rgb(245,182,24)" fg:x="383" fg:w="3"/><text x="24.4446%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (6 samples, 0.38%)</title><rect x="24.0682%" y="229" width="0.3790%" height="15" fill="rgb(242,14,37)" fg:x="381" fg:w="6"/><text x="24.3182%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (6 samples, 0.38%)</title><rect x="24.0682%" y="213" width="0.3790%" height="15" fill="rgb(246,228,12)" fg:x="381" fg:w="6"/><text x="24.3182%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_finalize_list (6 samples, 0.38%)</title><rect x="24.0682%" y="197" width="0.3790%" height="15" fill="rgb(213,55,15)" fg:x="381" fg:w="6"/><text x="24.3182%" y="207.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread_local_dtor::register_dtor::run_dtors (6 samples, 0.38%)</title><rect x="24.0682%" y="181" width="0.3790%" height="15" fill="rgb(209,9,3)" fg:x="381" fg:w="6"/><text x="24.3182%" y="191.50"></text></g><g><title>rust_obj_parser`std::thread::local::fast::destroy_value (1 samples, 0.06%)</title><rect x="24.3841%" y="165" width="0.0632%" height="15" fill="rgb(230,59,30)" fg:x="386" fg:w="1"/><text x="24.6341%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_setcancelstate_exit (1 samples, 0.06%)</title><rect x="24.4473%" y="229" width="0.0632%" height="15" fill="rgb(209,121,21)" fg:x="387" fg:w="1"/><text x="24.6973%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (35 samples, 2.21%)</title><rect x="24.5104%" y="197" width="2.2110%" height="15" fill="rgb(220,109,13)" fg:x="388" fg:w="35"/><text x="24.7604%" y="207.50">l..</text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (1 samples, 0.06%)</title><rect x="26.7214%" y="197" width="0.0632%" height="15" fill="rgb(232,18,1)" fg:x="423" fg:w="1"/><text x="26.9714%" y="207.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_unlock (1 samples, 0.06%)</title><rect x="26.7846%" y="197" width="0.0632%" height="15" fill="rgb(215,41,42)" fg:x="424" fg:w="1"/><text x="27.0346%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_join$NOCANCEL (40 samples, 2.53%)</title><rect x="24.5104%" y="229" width="2.5268%" height="15" fill="rgb(224,123,36)" fg:x="388" fg:w="40"/><text x="24.7604%" y="239.50">li..</text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (40 samples, 2.53%)</title><rect x="24.5104%" y="213" width="2.5268%" height="15" fill="rgb(240,125,3)" fg:x="388" fg:w="40"/><text x="24.7604%" y="223.50">li..</text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (3 samples, 0.19%)</title><rect x="26.8478%" y="197" width="0.1895%" height="15" fill="rgb(205,98,50)" fg:x="425" fg:w="3"/><text x="27.0978%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (3 samples, 0.19%)</title><rect x="26.8478%" y="181" width="0.1895%" height="15" fill="rgb(205,185,37)" fg:x="425" fg:w="3"/><text x="27.0978%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (7 samples, 0.44%)</title><rect x="27.1004%" y="213" width="0.4422%" height="15" fill="rgb(238,207,15)" fg:x="429" fg:w="7"/><text x="27.3504%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__sigaltstack (4 samples, 0.25%)</title><rect x="27.5426%" y="213" width="0.2527%" height="15" fill="rgb(213,199,42)" fg:x="436" fg:w="4"/><text x="27.7926%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="27.7953%" y="213" width="0.0632%" height="15" fill="rgb(235,201,11)" fg:x="440" fg:w="1"/><text x="28.0453%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="27.7953%" y="197" width="0.0632%" height="15" fill="rgb(207,46,11)" fg:x="440" fg:w="1"/><text x="28.0453%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="27.7953%" y="181" width="0.0632%" height="15" fill="rgb(241,35,35)" fg:x="440" fg:w="1"/><text x="28.0453%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="27.8585%" y="213" width="0.0632%" height="15" fill="rgb(243,32,47)" fg:x="441" fg:w="1"/><text x="28.1085%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="27.8585%" y="197" width="0.0632%" height="15" fill="rgb(247,202,23)" fg:x="441" fg:w="1"/><text x="28.1085%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="27.8585%" y="181" width="0.0632%" height="15" fill="rgb(219,102,11)" fg:x="441" fg:w="1"/><text x="28.1085%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.06%)</title><rect x="27.9217%" y="197" width="0.0632%" height="15" fill="rgb(243,110,44)" fg:x="442" fg:w="1"/><text x="28.1717%" y="207.50"></text></g><g><title>rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.06%)</title><rect x="27.9848%" y="197" width="0.0632%" height="15" fill="rgb(222,74,54)" fg:x="443" fg:w="1"/><text x="28.2348%" y="207.50"></text></g><g><title>rust_obj_parser`std::sys::unix::thread::guard::current (1 samples, 0.06%)</title><rect x="28.0480%" y="197" width="0.0632%" height="15" fill="rgb(216,99,12)" fg:x="444" fg:w="1"/><text x="28.2980%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_get_stackaddr_np (1 samples, 0.06%)</title><rect x="28.0480%" y="181" width="0.0632%" height="15" fill="rgb(226,22,26)" fg:x="444" fg:w="1"/><text x="28.2980%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="28.1744%" y="181" width="0.0632%" height="15" fill="rgb(217,163,10)" fg:x="446" fg:w="1"/><text x="28.4244%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="28.1744%" y="165" width="0.0632%" height="15" fill="rgb(213,25,53)" fg:x="446" fg:w="1"/><text x="28.4244%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="28.1744%" y="149" width="0.0632%" height="15" fill="rgb(252,105,26)" fg:x="446" fg:w="1"/><text x="28.4244%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.19%)</title><rect x="28.2375%" y="181" width="0.1895%" height="15" fill="rgb(220,39,43)" fg:x="447" fg:w="3"/><text x="28.4875%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="28.3639%" y="165" width="0.0632%" height="15" fill="rgb(229,68,48)" fg:x="449" fg:w="1"/><text x="28.6139%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="28.3639%" y="149" width="0.0632%" height="15" fill="rgb(252,8,32)" fg:x="449" fg:w="1"/><text x="28.6139%" y="159.50"></text></g><g><title>rust_obj_parser`&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.32%)</title><rect x="28.4270%" y="181" width="0.3159%" height="15" fill="rgb(223,20,43)" fg:x="450" fg:w="5"/><text x="28.6770%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="29.0587%" y="165" width="0.0632%" height="15" fill="rgb(229,81,49)" fg:x="460" fg:w="1"/><text x="29.3087%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="29.0587%" y="149" width="0.0632%" height="15" fill="rgb(236,28,36)" fg:x="460" fg:w="1"/><text x="29.3087%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="29.0587%" y="133" width="0.0632%" height="15" fill="rgb(249,185,26)" fg:x="460" fg:w="1"/><text x="29.3087%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="29.8168%" y="149" width="0.0632%" height="15" fill="rgb(249,174,33)" fg:x="472" fg:w="1"/><text x="30.0668%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (1 samples, 0.06%)</title><rect x="29.9431%" y="133" width="0.0632%" height="15" fill="rgb(233,201,37)" fg:x="474" fg:w="1"/><text x="30.1931%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="30.0063%" y="133" width="0.0632%" height="15" fill="rgb(221,78,26)" fg:x="475" fg:w="1"/><text x="30.2563%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="30.0063%" y="117" width="0.0632%" height="15" fill="rgb(250,127,30)" fg:x="475" fg:w="1"/><text x="30.2563%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="30.0063%" y="101" width="0.0632%" height="15" fill="rgb(230,49,44)" fg:x="475" fg:w="1"/><text x="30.2563%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.51%)</title><rect x="30.0695%" y="133" width="0.5054%" height="15" fill="rgb(229,67,23)" fg:x="476" fg:w="8"/><text x="30.3195%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.25%)</title><rect x="30.3222%" y="117" width="0.2527%" height="15" fill="rgb(249,83,47)" fg:x="480" fg:w="4"/><text x="30.5722%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (35 samples, 2.21%)</title><rect x="30.6380%" y="117" width="2.2110%" height="15" fill="rgb(215,43,3)" fg:x="485" fg:w="35"/><text x="30.8880%" y="127.50">l..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.06%)</title><rect x="32.9754%" y="101" width="0.0632%" height="15" fill="rgb(238,154,13)" fg:x="522" fg:w="1"/><text x="33.2254%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (4 samples, 0.25%)</title><rect x="32.8490%" y="117" width="0.2527%" height="15" fill="rgb(219,56,2)" fg:x="520" fg:w="4"/><text x="33.0990%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (1 samples, 0.06%)</title><rect x="33.0385%" y="101" width="0.0632%" height="15" fill="rgb(233,0,4)" fg:x="523" fg:w="1"/><text x="33.2885%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.06%)</title><rect x="33.1017%" y="117" width="0.0632%" height="15" fill="rgb(235,30,7)" fg:x="524" fg:w="1"/><text x="33.3517%" y="127.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::oneshot::Packet&lt;T&gt;::recv (65 samples, 4.11%)</title><rect x="29.1219%" y="165" width="4.1061%" height="15" fill="rgb(250,79,13)" fg:x="461" fg:w="65"/><text x="29.3719%" y="175.50">rust..</text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::WaitToken::wait (53 samples, 3.35%)</title><rect x="29.8800%" y="149" width="3.3481%" height="15" fill="rgb(211,146,34)" fg:x="473" fg:w="53"/><text x="30.1300%" y="159.50">rus..</text></g><g><title>rust_obj_parser`std::thread::park (42 samples, 2.65%)</title><rect x="30.5749%" y="133" width="2.6532%" height="15" fill="rgb(228,22,38)" fg:x="484" fg:w="42"/><text x="30.8249%" y="143.50">ru..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.06%)</title><rect x="33.1649%" y="117" width="0.0632%" height="15" fill="rgb(235,168,5)" fg:x="525" fg:w="1"/><text x="33.4149%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="33.4807%" y="117" width="0.0632%" height="15" fill="rgb(221,155,16)" fg:x="530" fg:w="1"/><text x="33.7307%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="33.4807%" y="101" width="0.0632%" height="15" fill="rgb(215,215,53)" fg:x="530" fg:w="1"/><text x="33.7307%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.13%)</title><rect x="33.4807%" y="133" width="0.1263%" height="15" fill="rgb(223,4,10)" fg:x="530" fg:w="2"/><text x="33.7307%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (1 samples, 0.06%)</title><rect x="33.5439%" y="117" width="0.0632%" height="15" fill="rgb(234,103,6)" fg:x="531" fg:w="1"/><text x="33.7939%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="33.6071%" y="133" width="0.0632%" height="15" fill="rgb(227,97,0)" fg:x="532" fg:w="1"/><text x="33.8571%" y="143.50"></text></g><g><title>rust_obj_parser`DYLD-STUB$$pthread_cond_wait (1 samples, 0.06%)</title><rect x="33.6702%" y="133" width="0.0632%" height="15" fill="rgb(234,150,53)" fg:x="533" fg:w="1"/><text x="33.9202%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (10 samples, 0.63%)</title><rect x="33.7334%" y="117" width="0.6317%" height="15" fill="rgb(228,201,54)" fg:x="534" fg:w="10"/><text x="33.9834%" y="127.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::WaitToken::wait (19 samples, 1.20%)</title><rect x="33.2280%" y="149" width="1.2003%" height="15" fill="rgb(222,22,37)" fg:x="526" fg:w="19"/><text x="33.4780%" y="159.50"></text></g><g><title>rust_obj_parser`std::thread::park (11 samples, 0.69%)</title><rect x="33.7334%" y="133" width="0.6949%" height="15" fill="rgb(237,53,32)" fg:x="534" fg:w="11"/><text x="33.9834%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.06%)</title><rect x="34.3651%" y="117" width="0.0632%" height="15" fill="rgb(233,25,53)" fg:x="544" fg:w="1"/><text x="34.6151%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (1 samples, 0.06%)</title><rect x="34.3651%" y="101" width="0.0632%" height="15" fill="rgb(210,40,34)" fg:x="544" fg:w="1"/><text x="34.6151%" y="111.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 5.75%)</title><rect x="28.7429%" y="181" width="5.7486%" height="15" fill="rgb(241,220,44)" fg:x="455" fg:w="91"/><text x="28.9929%" y="191.50">rust_ob..</text></g><g><title>rust_obj_parser`std::sync::mpsc::stream::Packet&lt;T&gt;::recv (20 samples, 1.26%)</title><rect x="33.2280%" y="165" width="1.2634%" height="15" fill="rgb(235,28,35)" fg:x="526" fg:w="20"/><text x="33.4780%" y="175.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::tokens (1 samples, 0.06%)</title><rect x="34.4283%" y="149" width="0.0632%" height="15" fill="rgb(210,56,17)" fg:x="545" fg:w="1"/><text x="34.6783%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="34.4283%" y="133" width="0.0632%" height="15" fill="rgb(224,130,29)" fg:x="545" fg:w="1"/><text x="34.6783%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="34.4283%" y="117" width="0.0632%" height="15" fill="rgb(235,212,8)" fg:x="545" fg:w="1"/><text x="34.6783%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="34.4283%" y="101" width="0.0632%" height="15" fill="rgb(223,33,50)" fg:x="545" fg:w="1"/><text x="34.6783%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.06%)</title><rect x="34.4283%" y="85" width="0.0632%" height="15" fill="rgb(219,149,13)" fg:x="545" fg:w="1"/><text x="34.6783%" y="95.50"></text></g><g><title>rust_obj_parser`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.06%)</title><rect x="34.4915%" y="181" width="0.0632%" height="15" fill="rgb(250,156,29)" fg:x="546" fg:w="1"/><text x="34.7415%" y="191.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::dec2flt (5 samples, 0.32%)</title><rect x="34.5546%" y="181" width="0.3159%" height="15" fill="rgb(216,193,19)" fg:x="547" fg:w="5"/><text x="34.8046%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (8 samples, 0.51%)</title><rect x="49.2104%" y="149" width="0.5054%" height="15" fill="rgb(216,135,14)" fg:x="779" fg:w="8"/><text x="49.4604%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (21 samples, 1.33%)</title><rect x="54.4536%" y="133" width="1.3266%" height="15" fill="rgb(241,47,5)" fg:x="862" fg:w="21"/><text x="54.7036%" y="143.50"></text></g><g><title>rust_obj_parser`&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (285 samples, 18.00%)</title><rect x="49.7157%" y="149" width="18.0038%" height="15" fill="rgb(233,42,35)" fg:x="787" fg:w="285"/><text x="49.9657%" y="159.50">rust_obj_parser`&lt;core::str::..</text></g><g><title>rust_obj_parser`core::slice::memchr::memchr_general_case (189 samples, 11.94%)</title><rect x="55.7802%" y="133" width="11.9394%" height="15" fill="rgb(231,13,6)" fg:x="883" fg:w="189"/><text x="56.0302%" y="143.50">rust_obj_parser`co..</text></g><g><title>rust_obj_parser`DYLD-STUB$$memcmp (6 samples, 0.38%)</title><rect x="67.7195%" y="149" width="0.3790%" height="15" fill="rgb(207,181,40)" fg:x="1072" fg:w="6"/><text x="67.9695%" y="159.50"></text></g><g><title>rust_obj_parser`&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (343 samples, 21.67%)</title><rect x="46.9994%" y="165" width="21.6677%" height="15" fill="rgb(254,173,49)" fg:x="744" fg:w="343"/><text x="47.2494%" y="175.50">rust_obj_parser`&lt;core::iter::adapt..</text></g><g><title>rust_obj_parser`core::slice::memchr::memchr_general_case (9 samples, 0.57%)</title><rect x="68.0985%" y="149" width="0.5685%" height="15" fill="rgb(221,1,38)" fg:x="1078" fg:w="9"/><text x="68.3485%" y="159.50"></text></g><g><title>rust_obj_parser`&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (6 samples, 0.38%)</title><rect x="68.6671%" y="165" width="0.3790%" height="15" fill="rgb(206,124,46)" fg:x="1087" fg:w="6"/><text x="68.9171%" y="175.50"></text></g><g><title>rust_obj_parser`&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (9 samples, 0.57%)</title><rect x="69.0461%" y="165" width="0.5685%" height="15" fill="rgb(249,21,11)" fg:x="1093" fg:w="9"/><text x="69.2961%" y="175.50"></text></g><g><title>rust_obj_parser`&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::short_fast_pow10 (10 samples, 0.63%)</title><rect x="69.6147%" y="165" width="0.6317%" height="15" fill="rgb(222,201,40)" fg:x="1102" fg:w="10"/><text x="69.8647%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.06%)</title><rect x="70.3095%" y="85" width="0.0632%" height="15" fill="rgb(235,61,29)" fg:x="1113" fg:w="1"/><text x="70.5595%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="70.3095%" y="69" width="0.0632%" height="15" fill="rgb(219,207,3)" fg:x="1113" fg:w="1"/><text x="70.5595%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.06%)</title><rect x="70.4359%" y="69" width="0.0632%" height="15" fill="rgb(222,56,46)" fg:x="1115" fg:w="1"/><text x="70.6859%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (3 samples, 0.19%)</title><rect x="70.3727%" y="85" width="0.1895%" height="15" fill="rgb(239,76,54)" fg:x="1114" fg:w="3"/><text x="70.6227%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="70.4991%" y="69" width="0.0632%" height="15" fill="rgb(231,124,27)" fg:x="1116" fg:w="1"/><text x="70.7491%" y="79.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.38%)</title><rect x="70.2464%" y="165" width="0.3790%" height="15" fill="rgb(249,195,6)" fg:x="1112" fg:w="6"/><text x="70.4964%" y="175.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (5 samples, 0.32%)</title><rect x="70.3095%" y="149" width="0.3159%" height="15" fill="rgb(237,174,47)" fg:x="1113" fg:w="5"/><text x="70.5595%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.32%)</title><rect x="70.3095%" y="133" width="0.3159%" height="15" fill="rgb(206,201,31)" fg:x="1113" fg:w="5"/><text x="70.5595%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.32%)</title><rect x="70.3095%" y="117" width="0.3159%" height="15" fill="rgb(231,57,52)" fg:x="1113" fg:w="5"/><text x="70.5595%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.32%)</title><rect x="70.3095%" y="101" width="0.3159%" height="15" fill="rgb(248,177,22)" fg:x="1113" fg:w="5"/><text x="70.5595%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="70.5622%" y="85" width="0.0632%" height="15" fill="rgb(215,211,37)" fg:x="1117" fg:w="1"/><text x="70.8122%" y="95.50"></text></g><g><title>rust_obj_parser`&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (21 samples, 1.33%)</title><rect x="90.6507%" y="149" width="1.3266%" height="15" fill="rgb(241,128,51)" fg:x="1435" fg:w="21"/><text x="90.9007%" y="159.50"></text></g><g><title>rust_obj_parser`&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::short_fast_pow10 (1 samples, 0.06%)</title><rect x="91.9773%" y="149" width="0.0632%" height="15" fill="rgb(227,165,31)" fg:x="1456" fg:w="1"/><text x="92.2273%" y="159.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::extract_sign (10 samples, 0.63%)</title><rect x="92.0404%" y="149" width="0.6317%" height="15" fill="rgb(228,167,24)" fg:x="1457" fg:w="10"/><text x="92.2904%" y="159.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::dec2flt (412 samples, 26.03%)</title><rect x="70.6254%" y="165" width="26.0265%" height="15" fill="rgb(228,143,12)" fg:x="1118" fg:w="412"/><text x="70.8754%" y="175.50">rust_obj_parser`core::num::dec2flt::dec2flt</text></g><g><title>rust_obj_parser`core::num::dec2flt::parse::parse_decimal (63 samples, 3.98%)</title><rect x="92.6721%" y="149" width="3.9798%" height="15" fill="rgb(249,149,8)" fg:x="1467" fg:w="63"/><text x="92.9221%" y="159.50">rust..</text></g><g><title>rust_obj_parser`core::num::dec2flt::extract_sign (7 samples, 0.44%)</title><rect x="96.6519%" y="165" width="0.4422%" height="15" fill="rgb(243,35,44)" fg:x="1530" fg:w="7"/><text x="96.9019%" y="175.50"></text></g><g><title>rust_obj_parser`core::num::dec2flt::parse::parse_decimal (8 samples, 0.51%)</title><rect x="97.0941%" y="165" width="0.5054%" height="15" fill="rgb(246,89,9)" fg:x="1537" fg:w="8"/><text x="97.3441%" y="175.50"></text></g><g><title>rust_obj_parser`core::ptr::drop_in_place&lt;rust_obj_parser::parser::create_thread_parse&lt;rust_obj_parser::parser::parse_obj_threaded::{{closure}},rust_obj_parser::parser::parse_obj_threaded::{{closure}}&gt;::{{closure}}&gt; (1 samples, 0.06%)</title><rect x="97.5995%" y="165" width="0.0632%" height="15" fill="rgb(233,213,13)" fg:x="1545" fg:w="1"/><text x="97.8495%" y="175.50"></text></g><g><title>rust_obj_parser`rust_obj_parser::parser::add_vertex (3 samples, 0.19%)</title><rect x="97.6627%" y="165" width="0.1895%" height="15" fill="rgb(233,141,41)" fg:x="1546" fg:w="3"/><text x="97.9127%" y="175.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.13%)</title><rect x="97.7258%" y="149" width="0.1263%" height="15" fill="rgb(239,167,4)" fg:x="1547" fg:w="2"/><text x="97.9758%" y="159.50"></text></g><g><title>rust_obj_parser`alloc::raw_vec::finish_grow (2 samples, 0.13%)</title><rect x="97.7258%" y="133" width="0.1263%" height="15" fill="rgb(209,217,16)" fg:x="1547" fg:w="2"/><text x="97.9758%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.13%)</title><rect x="97.7258%" y="117" width="0.1263%" height="15" fill="rgb(219,88,35)" fg:x="1547" fg:w="2"/><text x="97.9758%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.06%)</title><rect x="97.7890%" y="101" width="0.0632%" height="15" fill="rgb(220,193,23)" fg:x="1548" fg:w="1"/><text x="98.0390%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.06%)</title><rect x="97.7890%" y="85" width="0.0632%" height="15" fill="rgb(230,90,52)" fg:x="1548" fg:w="1"/><text x="98.0390%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="97.7890%" y="69" width="0.0632%" height="15" fill="rgb(252,106,19)" fg:x="1548" fg:w="1"/><text x="98.0390%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="97.8522%" y="149" width="0.0632%" height="15" fill="rgb(206,74,20)" fg:x="1549" fg:w="1"/><text x="98.1022%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.13%)</title><rect x="97.9154%" y="133" width="0.1263%" height="15" fill="rgb(230,138,44)" fg:x="1550" fg:w="2"/><text x="98.1654%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="97.9785%" y="117" width="0.0632%" height="15" fill="rgb(235,182,43)" fg:x="1551" fg:w="1"/><text x="98.2285%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="97.9785%" y="101" width="0.0632%" height="15" fill="rgb(242,16,51)" fg:x="1551" fg:w="1"/><text x="98.2285%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.06%)</title><rect x="97.9785%" y="85" width="0.0632%" height="15" fill="rgb(248,9,4)" fg:x="1551" fg:w="1"/><text x="98.2285%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (7 samples, 0.44%)</title><rect x="98.0417%" y="117" width="0.4422%" height="15" fill="rgb(210,31,22)" fg:x="1552" fg:w="7"/><text x="98.2917%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (1 samples, 0.06%)</title><rect x="98.4839%" y="117" width="0.0632%" height="15" fill="rgb(239,54,39)" fg:x="1559" fg:w="1"/><text x="98.7339%" y="127.50"></text></g><g><title>rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,009 samples, 63.74%)</title><rect x="34.8705%" y="181" width="63.7397%" height="15" fill="rgb(230,99,41)" fg:x="552" fg:w="1009"/><text x="35.1205%" y="191.50">rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_obj_parser`std::sync::mpsc::Sender&lt;T&gt;::send (12 samples, 0.76%)</title><rect x="97.8522%" y="165" width="0.7581%" height="15" fill="rgb(253,106,12)" fg:x="1549" fg:w="12"/><text x="98.1022%" y="175.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::shared::Packet&lt;T&gt;::send (11 samples, 0.69%)</title><rect x="97.9154%" y="149" width="0.6949%" height="15" fill="rgb(213,46,41)" fg:x="1550" fg:w="11"/><text x="98.1654%" y="159.50"></text></g><g><title>rust_obj_parser`std::sync::mpsc::blocking::SignalToken::signal (9 samples, 0.57%)</title><rect x="98.0417%" y="133" width="0.5685%" height="15" fill="rgb(215,133,35)" fg:x="1552" fg:w="9"/><text x="98.2917%" y="143.50"></text></g><g><title>rust_obj_parser`std::sys_common::thread_parker::generic::Parker::unpark (1 samples, 0.06%)</title><rect x="98.5471%" y="117" width="0.0632%" height="15" fill="rgb(213,28,5)" fg:x="1560" fg:w="1"/><text x="98.7971%" y="127.50"></text></g><g><title>rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace (1,117 samples, 70.56%)</title><rect x="28.1112%" y="197" width="70.5622%" height="15" fill="rgb(215,77,49)" fg:x="445" fg:w="1117"/><text x="28.3612%" y="207.50">rust_obj_parser`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_obj_parser`core::ptr::drop_in_place&lt;std::sync::mpsc::IntoIter&lt;rust_obj_parser::parser::ThreadMessage&gt;&gt; (1 samples, 0.06%)</title><rect x="98.6102%" y="181" width="0.0632%" height="15" fill="rgb(248,100,22)" fg:x="1561" fg:w="1"/><text x="98.8602%" y="191.50"></text></g><g><title>rust_obj_parser`&lt;std::sync::mpsc::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="98.6102%" y="165" width="0.0632%" height="15" fill="rgb(208,67,9)" fg:x="1561" fg:w="1"/><text x="98.8602%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="98.7997%" y="149" width="0.0632%" height="15" fill="rgb(219,133,21)" fg:x="1564" fg:w="1"/><text x="99.0497%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="98.7997%" y="133" width="0.0632%" height="15" fill="rgb(246,46,29)" fg:x="1564" fg:w="1"/><text x="99.0497%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="98.7997%" y="117" width="0.0632%" height="15" fill="rgb(246,185,52)" fg:x="1564" fg:w="1"/><text x="99.0497%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.25%)</title><rect x="98.6734%" y="181" width="0.2527%" height="15" fill="rgb(252,136,11)" fg:x="1562" fg:w="4"/><text x="98.9234%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_allocate_and_initialize_for_key (2 samples, 0.13%)</title><rect x="98.7997%" y="165" width="0.1263%" height="15" fill="rgb(219,138,53)" fg:x="1564" fg:w="2"/><text x="99.0497%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.06%)</title><rect x="98.8629%" y="149" width="0.0632%" height="15" fill="rgb(211,51,23)" fg:x="1565" fg:w="1"/><text x="99.1129%" y="159.50"></text></g><g><title>rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,126 samples, 71.13%)</title><rect x="27.9217%" y="213" width="71.1308%" height="15" fill="rgb(247,221,28)" fg:x="442" fg:w="1126"/><text x="28.1717%" y="223.50">rust_obj_parser`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_obj_parser`std::sys_common::thread_info::set (6 samples, 0.38%)</title><rect x="98.6734%" y="197" width="0.3790%" height="15" fill="rgb(251,222,45)" fg:x="1562" fg:w="6"/><text x="98.9234%" y="207.50"></text></g><g><title>rust_obj_parser`std::thread::local::fast::Key&lt;T&gt;::try_initialize (2 samples, 0.13%)</title><rect x="98.9261%" y="181" width="0.1263%" height="15" fill="rgb(217,162,53)" fg:x="1566" fg:w="2"/><text x="99.1761%" y="191.50"></text></g><g><title>libdyld.dylib`_tlv_atexit (2 samples, 0.13%)</title><rect x="98.9261%" y="165" width="0.1263%" height="15" fill="rgb(229,93,14)" fg:x="1566" fg:w="2"/><text x="99.1761%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.13%)</title><rect x="98.9261%" y="149" width="0.1263%" height="15" fill="rgb(209,67,49)" fg:x="1566" fg:w="2"/><text x="99.1761%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.13%)</title><rect x="98.9261%" y="133" width="0.1263%" height="15" fill="rgb(213,87,29)" fg:x="1566" fg:w="2"/><text x="99.1761%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="98.9893%" y="117" width="0.0632%" height="15" fill="rgb(205,151,52)" fg:x="1567" fg:w="1"/><text x="99.2393%" y="127.50"></text></g><g><title>all (1,583 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="1583"/><text x="0.2500%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (1,264 samples, 79.85%)</title><rect x="20.1516%" y="261" width="79.8484%" height="15" fill="rgb(221,220,41)" fg:x="319" fg:w="1264"/><text x="20.4016%" y="271.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (1,230 samples, 77.70%)</title><rect x="22.2994%" y="245" width="77.7006%" height="15" fill="rgb(218,133,21)" fg:x="353" fg:w="1230"/><text x="22.5494%" y="255.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_obj_parser`std::sys::unix::thread::Thread::new::thread_start (1,155 samples, 72.96%)</title><rect x="27.0373%" y="229" width="72.9627%" height="15" fill="rgb(221,193,43)" fg:x="428" fg:w="1155"/><text x="27.2873%" y="239.50">rust_obj_parser`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_obj_parser`std::sys::unix::stack_overflow::imp::make_handler (15 samples, 0.95%)</title><rect x="99.0524%" y="213" width="0.9476%" height="15" fill="rgb(240,128,52)" fg:x="1568" fg:w="15"/><text x="99.3024%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (11 samples, 0.69%)</title><rect x="99.3051%" y="197" width="0.6949%" height="15" fill="rgb(253,114,12)" fg:x="1572" fg:w="11"/><text x="99.5551%" y="207.50"></text></g></svg></svg>